from __future__ import unicode_literals
from __future__ import print_function

import time
import unittest
import sys
import traceback


__unittest = True
TEST_BEGIN = "TEST BEGIN"
TEST_END = "TEST END"
TEST_FAIL = "FAIL"
TEST_XFAIL = "XFAIL"
TEST_PASS = "PASS"
TEST_XPASS = "XPASS"
TEST_SKIP = "SKIP"
TEST_ERROR = "ERROR"
TEST_CLEANUP = "CLEANUP"


def get_caller_info(stack=None):
    """ walk stack and find first frame not in unittest module
        returns (fname, lineno, funcname, text)
    """
    if stack is None:
        stack = traceback.extract_stack()
    for f in reversed(stack):
        (fname, lineno, funcname, text) = f
        if "/darwinunit.py" in fname or "/unittest/" in fname:
            continue
        return (fname, lineno, funcname, text)
    return ("unknown_file", 0, "unknwon_method", "")


def dt_format(msg, t_type="LOG", print_tb=None):
    cur_time = time.strftime('%Y-%m-%d %H:%M:%S.%s')
    caller = ''
    if print_tb is None:
        cinfo = get_caller_info()
        caller = "{c[0]}:{c[1]}\t{c[2]}\t( {c[3]} )".format(c=cinfo)
    else:
        caller = print_tb
    if not msg:
        msg = ''
    return "{}\t{}\t{}\t{}\n".format(cur_time, t_type, caller, msg)


class DarwinTestResult(unittest.TestResult):
    """A test result class that can print darwint test formatted text results to a stream.

    Used by DarwinTestRunner.
    """

    def __init__(self, stream, descriptions, verbosity):
        super(DarwinTestResult, self).__init__(stream, descriptions, verbosity)
        self.stream = stream
        self.descriptions = descriptions
        self.dt_name = "UnknownTest"

    def getDescription(self, test):
        doc_first_line = test.shortDescription()
        if self.descriptions and doc_first_line:
            return '\n'.join((str(test), doc_first_line))
        else:
            return str(test)

    def startTest(self, test):
        super(DarwinTestResult, self).startTest(test)
        self.dt_name = "{}".format(test).split("(")[0]
        self.stream.write("\n" + dt_format(self.dt_name, TEST_BEGIN, ''))
        self.stream.flush()

    def stopTest(self, test):
        super(DarwinTestResult, self).stopTest(test)
        self.stream.write(dt_format(self.dt_name, TEST_END, ''))
        self.stream.flush()

    def addSuccess(self, test):
        super(DarwinTestResult, self).addSuccess(test)
        self.stream.write(dt_format(self.dt_name, TEST_PASS))
        self.stream.flush()

    def addError(self, test, err):
        super(DarwinTestResult, self).addError(test, err)
        self.stream.write(dt_format(self.dt_name, TEST_ERROR, print_tb=err))
        self.stream.flush()
        if self.errors:
            self.stream.write(self.errors[-1][-1])
            self.stream.flush()

    def addFailure(self, test, err):
        super(DarwinTestResult, self).addFailure(test, err)
        exctype, value, tb = err
        stack = traceback.extract_tb(tb)
        caller_info = get_caller_info(stack=stack)
        if self.failures:
            self.stream.write(self.failures[-1][-1])
        self.stream.write(dt_format('', TEST_FAIL, print_tb=caller_info))
        self.stream.flush()

    def addSkip(self, test, reason):
        super(DarwinTestResult, self).addSkip(test, reason)
        self.stream.write(dt_format('', TEST_SKIP))
        self.stream.flush()

    def addExpectedFailure(self, test, err):
        super(DarwinTestResult, self).addExpectedFailure(test, err)
        self.stream.write(dt_format(self.dt_name, TEST_XFAIL))
        self.stream.flush()

    def addUnexpectedSuccess(self, test):
        super(DarwinTestResult, self).addUnexpectedSuccess(test)
        self.stream.write(dt_format(self.dt_name, TEST_XPASS))
        self.stream.flush()

    def printErrors(self):
        return

    def printErrorList(self, flavour, errors):
        return


class DarwinTestRunner(unittest.TextTestRunner):
    """A test runner class that displays results in textual form.

    It prints out the names of tests as they are run, errors as they
    occur, and a summary of the results at the end of the test run.
    """
    resultclass = DarwinTestResult

    def __init__(self, stream=sys.stderr, descriptions=True, verbosity=1,
                 failfast=False, buffer=False, resultclass=None):
        super(DarwinTestRunner, self).__init__(stream=stream, descriptions=descriptions, verbosity=verbosity,
                                               failfast=failfast, buffer=buffer, resultclass=DarwinTestResult)

    def run(self, test):
        "Run the given test case or test suite."
        result = super(DarwinTestRunner, self).run(test)

        return result


class TestCase(unittest.TestCase):
    longMessage = False

    def dt_log(self, msg):
        if getattr(self, "dt_result"):
            self.dt_result.stream.write(msg)
            self.dt_result.stream.flush()
        else:
            print(msg)

    def run(self, result=None):
        self.dt_result = result.stream
        return super(TestCase, self).run(result=result)

    def doCleanups(self):
        # self.dt_log(dt_format("Running cleanup actions", TEST_CLEANUP))
        return super(TestCase, self).doCleanups()

    def assertFalse(self, expr, msg=None):
        super(TestCase, self).assertFalse(expr, msg=msg)
        self.dt_log(dt_format(msg, TEST_PASS))

    def assertTrue(self, expr, msg=None):
        """Check that the expression is true."""
        super(TestCase, self).assertTrue(expr, msg=msg)
        self.dt_log(dt_format(msg, TEST_PASS))

    def assertRaises(self, *args, **kwargs):
        self.dt_log(dt_format("assertRaises"))
        return super(TestCase, self).assertRaises(*args, **kwargs)

    def assertEqual(self, first, second, msg=None):
        super(TestCase, self).assertEqual(first, second, msg=msg)
        self.dt_log(dt_format(msg, TEST_PASS))

    def assertNotEqual(self, first, second, msg=None):
        super(TestCase, self).assertNotEqual(first, second, msg=msg)
        self.dt_log(dt_format(msg, TEST_PASS))

    def assertAlmostEqual(self, first, second, places=None, msg=None, delta=None):
        super(TestCase, self).assertAlmostEqual(first, second, places=places, msg=msg, delta=delta)
        self.dt_log(dt_format(msg, TEST_PASS))

    def assertNotAlmostEqual(self, first, second, places=None, msg=None, delta=None):
        super(TestCase, self).assertNotAlmostEqual(first, second, places=places, msg=msg, delta=delta)
        self.dt_log(dt_format(msg, TEST_PASS))

    def assertSequenceEqual(self, seq1, seq2, msg=None, seq_type=None):
        super(TestCase, self).assertSequenceEqual(seq1, seq2, msg=msg, seq_type=seq_type)
        self.dt_log(dt_format(msg, TEST_PASS))

    def assertListEqual(self, list1, list2, msg=None):
        super(TestCase, self).assertListEqual(list1, list2, msg=msg)
        self.dt_log(dt_format(msg, TEST_PASS))

    def assertTupleEqual(self, tup1, tup2, msg=None):
        super(TestCase, self).assertTupleEqual(tup1, tup2, msg=msg)
        self.dt_log(dt_format(msg, TEST_PASS))

    def assertSetEqual(self, set1, set2, msg=None):
        super(TestCase, self).assertSetEqual(set1, set2, msg=msg)
        self.dt_log(dt_format(msg, TEST_PASS))

    def assertCountEqual(self, first, second, msg=None):
        super(TestCase, self).assertCountEqual(first, second, msg=msg)
        self.dt_log(dt_format(msg, TEST_PASS))

    def assertIn(self, member, container, msg=None):
        super(TestCase, self).assertIn(member, container, msg=msg)
        self.dt_log(dt_format(msg, TEST_PASS))

    def assertNotIn(self, member, container, msg=None):
        super(TestCase, self).assertNotIn(member, container, msg=msg)
        self.dt_log(dt_format(msg, TEST_PASS))

    def assertIs(self, expr1, expr2, msg=None):
        super(TestCase, self).assertIs(expr1, expr2, msg=msg)
        self.dt_log(dt_format(msg, TEST_PASS))

    def assertIsNot(self, expr1, expr2, msg=None):
        super(TestCase, self).assertIsNot(expr1, expr2, msg=msg)
        self.dt_log(dt_format(msg, TEST_PASS))

    def assertDictEqual(self, d1, d2, msg=None):
        super(TestCase, self).assertDictEqual(d1, d2, msg=msg)
        self.dt_log(dt_format(msg, TEST_PASS))

    def assertDictContainsSubset(self, expected, actual, msg=None):
        super(TestCase, self).assertDictContainsSubset(expected, actual, msg=msg)
        self.dt_log(dt_format(msg, TEST_PASS))

    def assertItemsEqual(self, expected_seq, actual_seq, msg=None):
        super(TestCase, self).assertItemsEqual(expected_seq, actual_seq, msg=msg)
        self.dt_log(dt_format(msg, TEST_PASS))

    def assertMultiLineEqual(self, first, second, msg=None):
        super(TestCase, self).assertMultiLineEqual(first, second, msg=msg)
        self.dt_log(dt_format(msg, TEST_PASS))

    def assertLess(self, a, b, msg=None):
        super(TestCase, self).assertLess(a, b, msg=msg)
        self.dt_log(dt_format(msg, TEST_PASS))

    def assertLessEqual(self, a, b, msg=None):
        super(TestCase, self).assertLessEqual(a, b, msg=msg)
        self.dt_log(dt_format(msg, TEST_PASS))

    def assertGreater(self, a, b, msg=None):
        super(TestCase, self).assertGreater(a, b, msg=msg)
        self.dt_log(dt_format(msg, TEST_PASS))

    def assertGreaterEqual(self, a, b, msg=None):
        super(TestCase, self).assertGreaterEqual(a, b, msg=msg)
        self.dt_log(dt_format(msg, TEST_PASS))

    def assertIsNone(self, obj, msg=None):
        super(TestCase, self).assertIsNone(obj, msg=msg)
        self.dt_log(dt_format(msg, TEST_PASS))

    def assertIsNotNone(self, obj, msg=None):
        super(TestCase, self).assertIsNotNone(obj, msg=msg)
        self.dt_log(dt_format(msg, TEST_PASS))

    def assertIsInstance(self, obj, cls, msg=None):
        super(TestCase, self).assertIsInstance(obj, cls, msg=msg)
        self.dt_log(dt_format(msg, TEST_PASS))

    def assertNotIsInstance(self, obj, cls, msg=None):
        super(TestCase, self).assertNotIsInstance(obj, cls, msg=msg)
        self.dt_log(dt_format(msg, TEST_PASS))

    def assertRaisesRegexp(self, *args, **kwargs):
        self.dt_log(dt_format("assertRaisesRegexp"))
        return super(TestCase, self).assertRaisesRegexp(*args, **kwargs)

    def assertWarns(self, *args, **kwargs):
        self.dt_log(dt_format("assertWarns"))
        return super(TestCase, self).assertWarns(*args, **kwargs)

    def assertWarnsRegex(self, *args, **kwargs):
        self.dt_log(dt_format("assertWarnsRegex"))
        return super(TestCase, self).assertWarnsRegex(*args, **kwargs)

    def assertRegexpMatches(self, text, expected_regexp, msg=None):
        super(TestCase, self).assertRegexpMatches(text, expected_regexp, msg=msg)
        self.dt_log(dt_format(msg, TEST_PASS))

    def assertNotRegexpMatches(self, text, unexpected_regexp, msg=None):
        super(TestCase, self).assertNotRegexpMatches(text, unexpected_regexp, msg=msg)
        self.dt_log(dt_format(msg, TEST_PASS))

    def assertLogs(self, logger=None, level=None, msg=None):
        super(TestCase, self).assertLogs(logger=logger, level=level)
        self.dt_log(dt_format(msg, TEST_PASS))


def main(*args, **kwargs):
    kwargs['testRunner'] = DarwinTestRunner
    unittest.main(*args, **kwargs)
