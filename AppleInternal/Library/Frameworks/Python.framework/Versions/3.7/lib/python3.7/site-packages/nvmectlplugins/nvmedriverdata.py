#!/usr/bin/python

import nvmectl
import nvmectlparser
import os

from textwrap import fill


# Retrieve the pending requests array
def get_pending_requests(ctl, textoutput):
    length = 256
    buf = nvmectl.uint64Array(length)
    result = ctl.GetDriverData(nvmectl.kNVMeDriverPendingCommands, buf, length * 8)
    if result[0] != 0:
        print('Error: GetDriverData failed. (status=0x%x)' % result[0])
        return result[0]

    read_size = result[1]
    if read_size == 0:
        print('Error: GetDriverData returned with 0 bytes read.')
        return 1

    if textoutput:
        for i in range(read_size // 8):
            print('0x%02X: 0x%016X' % (i, buf[i]))
        return 0
    else:
        return [buf, read_size]


# Get the last disk feedback dword.
def get_disk_feedback(ctl, textoutput):
    length = 4
    buf = nvmectl.intArray(length)
    result = ctl.GetDriverData(nvmectl.kNVMeDriverLastDiskFeedback, buf, length)
    if result[0] != 0:
        print((nvmectlparser.error_str.format(cmd='Get driver data', r=result[0])))
        return result[0]

    read_size = result[1]
    if read_size == 0:
        print('Error: GetDriverData returned with 0 bytes read.')
        return 1

    if textoutput:
        print(("{:<25}{}".format("DISK_FULL", buf[0] & 1)))
        print(("{:<25}{}".format("THROTTLING_LEVEL", (buf[0] >> 1) & 15)))
    else:
        return [buf, read_size]

    return 0


# Get the last disk feedback dword.
def get_csts_poll_time(ctl, textoutput):
    length = 4
    buf = nvmectl.intArray(length)
    result = ctl.GetDriverData(nvmectl.kNVMeDriverLastCSTSPollTime, buf, length)
    if result[0] != 0:
        print((nvmectlparser.error_str.format(cmd='Get driver data', r=result[0])))
        return result[0]

    read_size = result[1]
    if read_size == 0:
        print('Error: GetDriverData returned with 0 bytes read.')
        return 1

    if textoutput:
        print(("{}".format(buf[0])))
    else:
        return [buf, read_size]

    return 0


# Get number of spurious interrupts.
def get_num_spurious_interrupts(ctl, textoutput):
    length = 4
    buf = nvmectl.intArray(length)
    result = ctl.GetDriverData(nvmectl.kNVMeDriverSpuriousInterrupts, buf, length)
    if result[0] != 0:
        print((nvmectlparser.error_str.format(cmd='Get driver data', r=result[0])))
        return result[0]

    read_size = result[1]
    if read_size == 0:
        print('Error: GetDriverData returned with 0 bytes read.')
        return 1

    if textoutput:
        print(("{}".format(buf[0])))
    else:
        return [buf, read_size]

    return 0


# Retrieve the S3E ddr scratchpad buffer
def get_ddr_scratchpad(ctl, textoutput):
    length = ctl.ReadRegister32(nvmectl.kNVMe_DDRSIZE_Offset)
    if length == 0:
        length = ctl.ReadRegister32(nvmectl.kNVMe_DDRREQSIZE_Offset)
    if length == 0:
        print('Error: scratchpad size is set to 0')
        return 1

    print('Scratchpad length is {} bytes.'.format(length))
    buf = nvmectl.ucharArray(length)
    result = ctl.GetDriverData(nvmectl.kNVMeDriverScratchpad, buf, length)
    if result[0] != 0:
        print('Error: GetDriverData failed. (result[0]=0x%x)' % result[0])
        return result[0]

    read_size = result[1]
    if read_size == 0:
        print('Error: GetDriverData returned with 0 bytes read.')
        return 1

    if textoutput:
        hexList = ["0x%02X" % buf[i] for i in range(length)]
        print(fill(" ".join(hexList)))
    else:
        return [buf, read_size]

    return 0


# Retrieve internal driver data structures.
def get_driver_data(ctl, info, args):
    textoutput = args.binary_file is None
    if args.pending_requests:
        res = get_pending_requests(ctl, textoutput)
    elif args.disk_feedback:
        res = get_disk_feedback(ctl, textoutput)
    elif args.csts_poll_ms:
        res = get_csts_poll_time(ctl, textoutput)
    elif args.ddr_scratchpad:
        res = get_ddr_scratchpad(ctl, textoutput)
    elif args.num_spurious_ints:
        res = get_num_spurious_interrupts(ctl, textoutput)

    if type(res) == int and res != 0:
        return res

    if textoutput:
        return res
    else:
        print(('Writing {} bytes to {}'.format(res[1], args.binary_file)))
        return ctl.WriteBufferToFile(res[0], res[1], args.binary_file)

get_driver_data_parser = nvmectlparser.subparsers.add_parser('GetDriverData', help='Execute ReadDebugLog commands, and write the data to a file.')
get_driver_data_parser.add_argument('-b', '--binary-file', default=None, help='Write the raw binary data into a file.')
get_driver_data_group = get_driver_data_parser.add_mutually_exclusive_group(required=True)
get_driver_data_group.add_argument('--pending-requests', action='store_true', help='Get the pending requests buffer.')
get_driver_data_group.add_argument('--disk-feedback', action='store_true', help='Get the disk feedback dword (DWORD 1) from the last completion.')
get_driver_data_group.add_argument('--csts-poll-ms', action='store_true', help='Get the last CSTS polling time in MS.')
get_driver_data_group.add_argument('--ddr-scratchpad', action='store_true', help='Get the ddr scratchpad.')
get_driver_data_group.add_argument('--num-spurious-ints', action='store_true', help='Get the ddr scratchpad.')
get_driver_data_parser.set_defaults(func=get_driver_data)


# Retrieve the disk logger buffer.
def s3e_get_logger_buffer(ctl, info, args):
    read_size = nvmectl.intArray(1)
    buf = nvmectl.charArray(args.size)
    status = ctl.ReadLoggerBuffer(buf, args.core_id, args.offset, args.size, read_size.cast())
    if status != 0:
        print("Error: ReadLoggerBuffer failed. (status=0x%x)" % (status))
        return status

    print("Writing %s bytes to %s" % (read_size[0], args.file))
    status = ctl.WriteBufferToFile(buf, read_size[0], args.file)
    if status != 0:
        print("Error: Failed writing data to file. (%s)" % (os.strerror(status)))
        return status

        print(buf.cast())

    return 0

read_logger_buffer_parser = nvmectlparser.subparsers.add_parser('ReadLoggerBuffer', help='Retrieve the disk logger buffer. S3E only.')
read_logger_buffer_parser.add_argument('core_id', type=nvmectlparser.nonnegative,
                                       help='The core ID for which to get the log.')
read_logger_buffer_parser.add_argument('file', help='The file to file core ID for which to get the log.')
read_logger_buffer_parser.add_argument('-o', '--offset', type=nvmectlparser.nonnegative, default=0,
                                       help='Offset inf the logger buffer. Defaults to 0')
read_logger_buffer_parser.add_argument('-s', '--size', type=nvmectlparser.positive, default=(1<<20),
                                       help='Amount of data to read. Defaults to 1MB')
read_logger_buffer_parser.set_defaults(func=s3e_get_logger_buffer)
