#!/bin/bash
##########################################################################
## FILENAME:    switch-iap-daemons                                      ##
##                                                                      ##
## CREATED:     Carmen Bovalino - 09/09/2016                            ##
##                                                                      ##
## DESCRIPTION: This script switches between the legacy iAP daemons     ##
##              (iaptransportd, iapd, iap2d and new daemon accessoryd   ##
##########################################################################

# Preferences
kScriptPath="/System/Library/CoreAccessories/Scripts"
kLaunchDaemonsPath="/System/Library/LaunchDaemons"
kPlist_iaptransportd="com.apple.iaptransportd.plist"
kPlist_iapd="com.apple.iapd.plist"
kPlist_iap2d="com.apple.iap2d.plist"
kPlist_accessoryd="com.apple.accessoryd.plist"

# Enable colors
COLOR=1

# Note: To use colors in bash scripts, use this syntax:
#       echo -e "${kColorBoldCyan}Text Here${kColorNoColor}"
#       OR
#       echo -e $kColorBoldGreen"Text Here"$kColorNoColor

if [ $COLOR ]; then
if [ $COLOR -eq 1 ]; then
kColorNoColor="\033[0m"
kColorWhite="\033[1;37m"
kColorBlack="\033[0;30m"
kColorLightGray="\033[0;37m"
kColorDarkGray="\033[1;30m"
kColorRed="\033[0;31m"
kColorYellow="\033[0;33m"
kColorGreen="\033[0;32m"
kColorCyan="\033[0;36m"
kColorPurple="\033[0;34m"
kColorPink="\033[0;35m"
kColorBoldRed="\033[1;31m"
kColorBoldYellow="\033[1;33m"
kColorBoldGreen="\033[1;32m"
kColorBoldCyan="\033[1;36m"
kColorBoldPurple="\033[1;34m"
kColorBoldPink="\033[1;35m"
fi
fi

# Initialize variables
kScriptName=$(basename $0)
kArg1=$( echo $1 | tr '[:upper:]' '[:lower:]' )
kArg2=$( echo $2 | tr '[:upper:]' '[:lower:]' )
gResult=0

## == Functions == ##
display_usage ()
{
    echo "Accessory Daemon Control"
    echo
    echo "Usage: $kScriptName [command [options]]"
    echo "       $kScriptName status"
    echo "       $kScriptName mode    [new|legacy]"
    echo "       $kScriptName reload  [new|legacy]"
    echo "       $kScriptName load    [new|legacy]"
    echo "       $kScriptName unload  [new|legacy|all]"
    echo "       $kScriptName enable  [new|legacy]"
    echo "       $kScriptName disable [new|legacy|all]"
    echo
    echo "Description:"
    echo "       status     Displays which daemons are currently loaded"
    echo "       mode       Switches between using new and legacy daemons"
    echo "       reload     Unloads then reloads the specified group of daemons using launchctl"
    echo "       load       Loads the specified group of daemons using launchctl"
    echo "       unload     Unloads the specified group of daemons using launchctl"
    echo "       enable     Loads the specified group of daemons (persists across reboots)"
    echo "       disable    Unloads the specified group of daemons (persists across reboots)"
    echo
    exit
}

display_banner ()
{
    echo -e $kColorWhite"╔════════════════════╗"$kColorNoColor
    echo -e $kColorWhite"║ SWITCH iAP DAEMONS ║"$kColorNoColor
    echo -e $kColorWhite"╚════════════════════╝"$kColorNoColor
    echo ""
}

display_complete_msg ()
{
    if [ $numErrors -eq 0 ]; then
    echo -e $kColorBoldGreen
    echo "┌─────────────────┐"
    echo "│ Switch Complete │"
    echo "└─────────────────┘"
    echo -e -n $kColorNoColor
    else
    echo -e $kColorBoldYellow
    echo "┌────────────────────────┐"
    echo "│ Complete with Warnings │"
    echo "└────────────────────────┘"
    echo -e -n $kColorNoColor
    fi
}

display_already_active ()
{
    echo -e $kColorBoldGreen
    echo "┌──────────────────────────────┐"
    echo "│ Configuration Already Active │"
    echo "└──────────────────────────────┘"
    echo -e -n $kColorNoColor
}

display_reload_complete_msg ()
{
    echo -e $kColorBoldGreen
    echo "┌─────────────────┐"
    echo "│ Reload Complete │"
    echo "└─────────────────┘"
    echo -e -n $kColorNoColor
}

unload_plist ()
{
    command="launchctl unload $kLaunchDaemonsPath/$1"
    echo -e -n $kColorYellow
    eval $command
    gResult=$?
    echo -e -n $kColorNoColor
}

load_plist ()
{
    command="launchctl load $kLaunchDaemonsPath/$1"
    echo -e -n $kColorYellow
    eval $command
    gResult=$?
    echo -e -n $kColorNoColor
}

disable_plist ()
{
    command="launchctl unload -w $kLaunchDaemonsPath/$1"
    echo -e -n $kColorYellow
    eval $command
    gResult=$?
    echo -e -n $kColorNoColor
}

enable_plist ()
{
    command="launchctl load -w $kLaunchDaemonsPath/$1"
    echo -e -n $kColorYellow
    eval $command
    gResult=$?
    echo -e -n $kColorNoColor
}

unload_legacy_daemons ()
{
    echo -n "    "
    echo -e $kColorCyan">> Unloading iaptransportd..."$kColorNoColor
    unload_plist $kPlist_iaptransportd
    numErrors=$(($numErrors+$gResult))

    echo -n "    "
    echo -e $kColorCyan">> Unloading iapd..."$kColorNoColor
    unload_plist $kPlist_iapd
    numErrors=$(($numErrors+$gResult))

    echo -n "    "
    echo -e $kColorCyan">> Unloading iap2d..."$kColorNoColor
    unload_plist $kPlist_iap2d
    numErrors=$(($numErrors+$gResult))
}

load_legacy_daemons ()
{
    echo -n "    "
    echo -e $kColorCyan">> Loading iap2d..."$kColorNoColor
    load_plist $kPlist_iap2d
    numErrors=$(($numErrors+$gResult))

    echo -n "    "
    echo -e $kColorCyan">> Loading iapd..."$kColorNoColor
    load_plist $kPlist_iapd
    numErrors=$(($numErrors+$gResult))

    echo -n "    "
    echo -e $kColorCyan">> Loading iaptransportd..."$kColorNoColor
    load_plist $kPlist_iaptransportd
    numErrors=$(($numErrors+$gResult))
}

unload_new_daemon ()
{
    echo -n "    "
    echo -e $kColorCyan">> Unloading accessoryd..."$kColorNoColor
    unload_plist $kPlist_accessoryd
    numErrors=$(($numErrors+$gResult))

    echo -n "    "
    echo -e $kColorCyan">> Unloading iapd..."$kColorNoColor
    unload_plist $kPlist_iapd
    numErrors=$(($numErrors+$gResult))
}

load_new_daemon ()
{
    echo -n "    "
    echo -e $kColorCyan">> Loading iapd..."$kColorNoColor
    load_plist $kPlist_iapd
    numErrors=$(($numErrors+$gResult))

    echo -n "    "
    echo -e $kColorCyan">> Adding accessoryd to whitelist..."$kColorNoColor
    command="mount -uw /"
    echo -e -n $kColorYellow
    eval $command
    echo -e -n $kColorNoColor
    command="jetsam_properties set Override Daemon com.apple.accessoryd ExecuteAllowed True"
    echo -e -n $kColorYellow
    eval $command > /dev/null 2>&1
    echo -e -n $kColorNoColor

    echo -n "    "
    echo -e $kColorCyan">> Loading accessoryd..."$kColorNoColor
    load_plist $kPlist_accessoryd
    numErrors=$(($numErrors+$gResult))
}

disable_legacy_daemons ()
{
    echo -e $kColorBoldCyan">> Disabling legacy daemons.."$kColorNoColor

    echo -n "    "
    echo -e $kColorCyan">> Disabling iaptransportd..."$kColorNoColor
    disable_plist $kPlist_iaptransportd
    numErrors=$(($numErrors+$gResult))

    echo -n "    "
    echo -e $kColorCyan">> Disabling iapd..."$kColorNoColor
    disable_plist $kPlist_iapd
    numErrors=$(($numErrors+$gResult))

    echo -n "    "
    echo -e $kColorCyan">> Disabling iap2d..."$kColorNoColor
    disable_plist $kPlist_iap2d
    numErrors=$(($numErrors+$gResult))
}

enable_legacy_daemons ()
{
    echo -e $kColorBoldCyan">> Enabling legacy daemons..."$kColorNoColor

    echo -n "    "
    echo -e $kColorCyan">> Enabling iaptransportd..."$kColorNoColor
    enable_plist $kPlist_iaptransportd
    numErrors=$(($numErrors+$gResult))

    echo -n "    "
    echo -e $kColorCyan">> Enabling iapd..."$kColorNoColor
    enable_plist $kPlist_iapd
    numErrors=$(($numErrors+$gResult))

    echo -n "    "
    echo -e $kColorCyan">> Enabling iap2d..."$kColorNoColor
    enable_plist $kPlist_iap2d
    numErrors=$(($numErrors+$gResult))
}

disable_new_daemon ()
{
    echo -e $kColorBoldCyan">> Disabling new daemon.."$kColorNoColor

    echo -n "    "
    echo -e $kColorCyan">> Disabling accessoryd..."$kColorNoColor
    disable_plist $kPlist_accessoryd
    numErrors=$(($numErrors+$gResult))

    echo -n "    "
    echo -e $kColorCyan">> Disabling iapd..."$kColorNoColor
    disable_plist $kPlist_iapd
    numErrors=$(($numErrors+$gResult))
}

enable_new_daemon ()
{
    echo -e $kColorBoldCyan">> Enabling new daemons..."$kColorNoColor

    echo -n "    "
    echo -e $kColorCyan">> Enabling iapd..."$kColorNoColor
    enable_plist $kPlist_iapd
    numErrors=$(($numErrors+$gResult))

    echo -n "    "
    echo -e $kColorCyan">> Enabling accessoryd..."$kColorNoColor
    enable_plist $kPlist_accessoryd
    numErrors=$(($numErrors+$gResult))
}

change_mode ()
{
    # Check which daemons are loaded
    # Check if legacy daemons are already loaded
    command="launchctl list | grep iaptransportd > /dev/null 2>&1"
    eval $command
    legacyLoaded=$?
    command="launchctl list | grep accessoryd > /dev/null 2>&1"
    eval $command
    newLoaded=$?

    # Validate mode
    numErrors=0
    if [ $1 == "legacy" ]; then
        if [ $legacyLoaded -ne 1 ] && [ $newLoaded -eq 1 ]; then
            reload $1
            display_reload_complete_msg
        else
            # Disable new daemon
            disable_new_daemon

            # Enable legacy daemons
            enable_legacy_daemons

            display_complete_msg
        fi

    elif [ $1 == "new" ]; then
        if [ $newLoaded -ne 1 ] && [ $legacyLoaded -eq 1 ]; then
            reload $1
            display_reload_complete_msg
        else
            # Disable legacy daemons
            disable_legacy_daemons

            # Enable new daemon
            enable_new_daemon

            display_complete_msg
        fi
    else
        display_usage
    fi
}

disable ()
{
    case "$1" in
        all)
            disable_legacy_daemons
            disable_new_daemon
            ;;

        legacy)
            disable_legacy_daemons
            ;;

        new)
            disable_new_daemon
            ;;

        *)
            display_usage
            exit 1
    esac
}

enable ()
{
    case "$1" in
        legacy)
            enable_legacy_daemons
            ;;

        new)
            enable_new_daemon
            ;;

        *)
            display_usage
            exit 1
    esac
}

reload ()
{
    case "$1" in
        legacy)
            echo -e $kColorBoldCyan">> Reloading legacy daemons..."$kColorNoColor
            unload_legacy_daemons
            load_legacy_daemons
            ;;

        new)
            echo -e $kColorBoldCyan">> Reloading new daemons..."$kColorNoColor
            unload_new_daemon
            load_new_daemon
            ;;

        *)
            display_usage
            exit 1
    esac
}

load ()
{
    case "$1" in
        legacy)
            load_legacy_daemons
            ;;

        new)
            load_new_daemon
            ;;

        *)
            display_usage
            exit 1
    esac
}

unload ()
{
    case "$1" in
        all)
            unload_legacy_daemons
            unload_new_daemon
            ;;

        legacy)
            unload_legacy_daemons
            ;;

        new)
            unload_new_daemon
            ;;

        *)
            display_usage
            exit 1
    esac
}

status ()
{
    # Check if legacy daemons are enabled
    echo -e $kColorBoldCyan"Legacy daemons:"$kColorNoColor
    echo -en $kColorCyan"    iaptransportd:  "$kColorNoColor
    command="launchctl list | grep iaptransportd > /dev/null 2>&1"
    eval $command
    if [ $? -ne 1 ]; then
        echo -e $kColorGreen"Loaded"$kColorNoColor
    else
        echo -e $kColorRed"Not Loaded"$kColorNoColor
    fi

    echo -en $kColorCyan"    iapd:           "$kColorNoColor
    command="launchctl list | grep iapd > /dev/null 2>&1"
    eval $command
    if [ $? -ne 1 ]; then
        echo -e $kColorGreen"Loaded"$kColorNoColor
    else
        echo -e $kColorRed"Not Loaded"$kColorNoColor
    fi

    echo -en $kColorCyan"    iap2d:          "$kColorNoColor
    command="launchctl list | grep iap2d > /dev/null 2>&1"
    eval $command
    if [ $? -ne 1 ]; then
        echo -e $kColorGreen"Loaded"$kColorNoColor
    else
        echo -e $kColorRed"Not Loaded"$kColorNoColor
    fi

    # Check if new daemon is enabled
    echo
    echo -e $kColorBoldCyan"New daemon:"$kColorNoColor
    echo -en $kColorCyan"    accessoryd:     "$kColorNoColor
    command="launchctl list | grep accessoryd > /dev/null 2>&1"
    eval $command
    if [ $? -ne 1 ]; then
        echo -e $kColorGreen"Loaded"$kColorNoColor
    else
        echo -e $kColorRed"Not Loaded"$kColorNoColor
    fi
}

case "$kArg1" in
    status)
        status
        ;;

    mode)
        change_mode $kArg2
        ;;

    reload)
        reload $kArg2
        ;;

    load)
        load $kArg2
        ;;

    unload)
        unload $kArg2
        ;;

    enable)
        enable $kArg2
        ;;

    disable)
        disable $kArg2
        ;;

    *)
        display_usage
        exit 1
esac
