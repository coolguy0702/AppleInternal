#!/usr/bin/python

import bisect

import nvmectl
import nvmectlparser

timeout_map = {
    'X31_128': [
        (6, 200000),
        (13, 30000),
        (20, 30000),
        (27, 30000),
        (34, 30000),
        (40, 30000),
        (47, 30000),
        (53, 30000),
        (60, 30000),
        (66, 30000),
        (73, 30000),
        (79, 30000),
        (86, 30000),
        (92, 30000),
        (99, 30000),
        (100, 30000)
    ],
    'X31_256': [
        (6, 200000),
        (13, 30000),
        (20, 30000),
        (27, 30000),
        (34, 30000),
        (40, 30000),
        (47, 30000),
        (53, 30000),
        (60, 30000),
        (66, 30000),
        (73, 30000),
        (79, 30000),
        (86, 30000),
        (92, 30000),
        (99, 30000),
        (100, 30000)
    ],
    'X31_512': [
        (6, 200000),
        (13, 30000),
        (20, 30000),
        (27, 30000),
        (34, 30000),
        (40, 30000),
        (47, 30000),
        (53, 30000),
        (60, 30000),
        (66, 30000),
        (73, 30000),
        (79, 30000),
        (86, 30000),
        (92, 30000),
        (99, 30000),
        (100, 30000)
    ],
    'X56_128': [
        (6, 200000),
        (13, 30000),
        (20, 30000),
        (27, 30000),
        (34, 30000),
        (40, 30000),
        (47, 30000),
        (53, 30000),
        (60, 30000),
        (66, 30000),
        (73, 30000),
        (79, 30000),
        (86, 30000),
        (92, 30000),
        (99, 30000),
        (100, 30000)
    ],
    'X56_256': [
        (6, 200000),
        (13, 30000),
        (20, 30000),
        (27, 30000),
        (34, 30000),
        (40, 30000),
        (47, 30000),
        (53, 30000),
        (60, 30000),
        (66, 30000),
        (73, 30000),
        (79, 30000),
        (86, 30000),
        (92, 30000),
        (99, 30000),
        (100, 30000)
    ],
    'X56_512': [
        (6, 200000),
        (13, 30000),
        (20, 30000),
        (27, 30000),
        (34, 30000),
        (40, 30000),
        (47, 30000),
        (53, 30000),
        (60, 30000),
        (66, 30000),
        (73, 30000),
        (79, 30000),
        (86, 30000),
        (92, 30000),
        (99, 30000),
        (100, 30000)
    ]
}


# Set throttling level and adjust the command timeout accordingly.
def set_throttling_level(ctl, info, args):
    if args.level == 0 or args.level > 100:
        print("Illegal throttling level. Level must be between 1-100.")
        return 1

    retval = ctl.CLIWrite("\ngo fm\nfm_set_throttling_level {}\n".format(args.level))
    if retval.fReturn != 0 or retval.fNVMeStatus != 0:
        print((nvmectlparser.error_str.format(cmd='Debug Service', r=retval)))
        return retval.fReturn

    index = bisect.bisect_right(timeout_map[args.disk_type], (args.level,))
    retval = ctl.SetDriverParams(nvmectl.kNVMeControllerRequestTimeout,
                                 timeout_map[args.disk_type][index][1])
    if retval.fReturn != 0:
        print((nvmectlparser.error_str.format(cmd='Set driver params', r=retval)))
        return retval.fReturn

    return 0

set_throttling_level_parser = nvmectlparser.subparsers.add_parser("SetThrottlingLevel", help="Set the disk's throttling level")
set_throttling_level_parser.add_argument("disk_type", choices=list(timeout_map.keys()),
                                         help="The type of disk to set the thottling for.")
set_throttling_level_parser.add_argument("level", type=nvmectlparser.positive,
                                         help="The new throttling level. (0-99)")
set_throttling_level_parser.set_defaults(func=set_throttling_level)


# Set Bandwidth limit.
def set_bw_limit(ctl, info, args):
    if (args.tier0, args.tier1, args.tier2, args.tier3) == (None, None, None, None):
        print('Error: At least one tier bandwidth is required.')
        return 1

    limits = nvmectl.NVMeBandwidthLimit()
    limits.BW_LIMIT_TIER0 = args.tier0 or 0
    limits.BW_LIMIT_TIER1 = args.tier1 or 0
    limits.BW_LIMIT_TIER2 = args.tier2 or 0
    limits.BW_LIMIT_TIER3 = args.tier3 or 0

    ctl.SetBWLimit(limits)

    return 0

set_bw_limit_parser = nvmectlparser.subparsers.add_parser("SetBWLimit", help="Set device's bandwidth limitation for each of the IO tiers.")
set_bw_limit_parser.add_argument("-t0", "--tier0", type=nvmectlparser.percentage,
                                 help="Bandwidth limit for IO tier 0. (0-100)")
set_bw_limit_parser.add_argument("-t1", "--tier1", type=nvmectlparser.percentage,
                                 help="Bandwidth limit for IO tier 1. (0-100)")
set_bw_limit_parser.add_argument("-t2", "--tier2", type=nvmectlparser.percentage,
                                 help="Bandwidth limit for IO tier 2. (0-100)")
set_bw_limit_parser.add_argument("-t3", "--tier3", type=nvmectlparser.percentage,
                                 help="Bandwidth limit for IO tier 3. (0-100)")
set_bw_limit_parser.set_defaults(func=set_bw_limit)


# Execute reprioritize command.
def reprioritize(ctl, info, args):
    retval = ctl.Reprioritize(args.queue, args.namespace, args.start_lba, args.num_blocks - 1, args.priority)
    print((nvmectlparser.status_str.format(r=retval)))

    return retval.fReturn

reprioritize_parser = nvmectlparser.subparsers.add_parser("Reprioritize", help="Reprioritize an LBA range.")
reprioritize_parser.add_argument("-q", "--queue", type=nvmectlparser.nonnegative, default=1, help="Queue ID. Default=1")
reprioritize_parser.add_argument("-n", "--namespace", type=nvmectlparser.nonnegative,
                                 default=1, help="Namespace ID. Default=1")
reprioritize_parser.add_argument("start_lba", type=nvmectlparser.nonnegative, help="LBA to start reading from")
reprioritize_parser.add_argument("num_blocks", type=nvmectlparser.positive, help="Number of blocks to read")
reprioritize_parser.add_argument("priority", type=int, choices=list(range(4)), help="priority level.")
reprioritize_parser.set_defaults(func=reprioritize)


# Execute set power budget index command.
def set_power_budget_index(ctl, info, args):
    retval = ctl.SetPowerBudgetIndex(args.index)
    print((nvmectlparser.status_str.format(r=retval)))

    return retval.fReturn

set_pb_index_parser = nvmectlparser.subparsers.add_parser("SetPowerBudgetIndex", help="Set power budget index (ANS2 only).")
set_pb_index_parser.add_argument("index", type=nvmectlparser.myint, help="Power budget index to set.")
set_pb_index_parser.set_defaults(func=set_power_budget_index)
