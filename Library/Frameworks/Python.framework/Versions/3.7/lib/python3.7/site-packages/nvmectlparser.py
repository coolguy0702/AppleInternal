#!/usr/bin/python

import argparse
from argparse import RawTextHelpFormatter
import os

import nvmectl


# An int type that also accepts hex values.
def myint(value):
    return int(value, 0)


def positive(value):
    ivalue = myint(value)
    if ivalue <= 0:
        raise argparse.ArgumentTypeError("A positive integer is required.")
    return ivalue


def nonnegative(value):
    ivalue = myint(value)
    if ivalue < 0:
        raise argparse.ArgumentTypeError("A non-negative integer is required.")
    return ivalue


def percentage(value):
    ivalue = int(value)
    if ivalue < 0 or ivalue > 100:
        raise argparse.ArgumentTypeError("a percentage value is required (0-100).")
    return ivalue


# A function generator for int arguments with custom ranges.
def int_range(minimum, maximum):
    def validate_range(value):
        try:
            ivalue = myint(value)
        except ValueError:
            raise argparse.ArgumentTypeError("An integer is required.".format(minimum, maximum))
        if ivalue < minimum or ivalue > maximum:
            raise argparse.ArgumentTypeError("An integer in the range of {}-{} is required.".format(minimum, maximum))
        return myint(value)
    return validate_range


def file_to_buff(file_path, length=None):
    if length is not None:
        buf_size = length
    else:
        try:
            buf_size = os.path.getsize(file_path)
        except OSError as e:
            print(e)
            return None

    buf = nvmectl.charArray(buf_size)
    num_read = nvmectl.NVMeCTL_ReadBufferFromFile(buf, buf_size, file_path)
    if num_read != buf_size:
        print(('Error: Failed reading data from file. ({})'.format(os.strerror(-num_read))))
        return -num_read

    return buf


error_str = 'Error: {cmd} command failed. status={r.fReturn:#x} NVMeStatus={r.fNVMeStatus:#x}'
status_str = 'status={r.fReturn:#x} NVMeStatus={r.fNVMeStatus:#x} dword0={r.fCommandSpecificData:#x} time={r.fExecutionTime}'

## main

# Parse program arguments
parser = argparse.ArgumentParser(description="Execute a command on an NVMe device.",
                                 formatter_class=RawTextHelpFormatter)

parser.add_argument("-v", "--verbose", action="store_true", help="Print a more verbose output.")

group = parser.add_mutually_exclusive_group()
group.add_argument("-b", "--block-device", type=str,
                   help="The device's ID. E.g disk1.")
group.add_argument("-p", "--pci-device", type=str,
                   help="The bus:device:function tuple. E.g 106:0:0.")
group.add_argument("-s", "--serial-number", type=str,
                   help="The serial number of the disk, as presented in the identify command.")
group.add_argument("-a", "--all", dest="all_devices", action="store_true",
                   help="Perform the command on all devices in the system.")

subparsers = parser.add_subparsers(title="NVMe Commands", dest="subcommand", metavar='<command>')
