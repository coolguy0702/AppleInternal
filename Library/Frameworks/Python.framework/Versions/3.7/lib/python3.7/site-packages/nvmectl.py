# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_nvmectl', [dirname(__file__)])
        except ImportError:
            import _nvmectl
            return _nvmectl
        if fp is not None:
            try:
                _mod = imp.load_module('_nvmectl', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _nvmectl = swig_import_helper()
    del swig_import_helper
else:
    import _nvmectl
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def cdata(*args):
  return _nvmectl.cdata(*args)
cdata = _nvmectl.cdata

def memmove(*args):
  return _nvmectl.memmove(*args)
memmove = _nvmectl.memmove
kPassThroughInitWithBlockDevice = _nvmectl.kPassThroughInitWithBlockDevice
kPassThroughInitWithPCIDevice = _nvmectl.kPassThroughInitWithPCIDevice
kPassThroughInitWithSerialNumber = _nvmectl.kPassThroughInitWithSerialNumber
kPassThroughInitFirstFound = _nvmectl.kPassThroughInitFirstFound
kPassThroughAllocNVMeBuffer = _nvmectl.kPassThroughAllocNVMeBuffer
kPassThroughReleaseNVMeBuffer = _nvmectl.kPassThroughReleaseNVMeBuffer
kPassThroughReadRegister32 = _nvmectl.kPassThroughReadRegister32
kPassThroughWriteRegister32 = _nvmectl.kPassThroughWriteRegister32
kPassThroughReadRegister64 = _nvmectl.kPassThroughReadRegister64
kPassThroughWriteRegister64 = _nvmectl.kPassThroughWriteRegister64
kPassThroughInitController = _nvmectl.kPassThroughInitController
kPassThroughShutdownController = _nvmectl.kPassThroughShutdownController
kPassThroughSavePCI = _nvmectl.kPassThroughSavePCI
kPassThroughRestorePCI = _nvmectl.kPassThroughRestorePCI
kPassThroughInitDriver = _nvmectl.kPassThroughInitDriver
kPassThroughAbortAllRequests = _nvmectl.kPassThroughAbortAllRequests
kPassThroughSetQueueFrozen = _nvmectl.kPassThroughSetQueueFrozen
kPassThroughCreateSQ = _nvmectl.kPassThroughCreateSQ
kPassThroughDeleteSQ = _nvmectl.kPassThroughDeleteSQ
kPassThroughCreateCQ = _nvmectl.kPassThroughCreateCQ
kPassThroughDeleteCQ = _nvmectl.kPassThroughDeleteCQ
kPassThroughFirmwareActivate = _nvmectl.kPassThroughFirmwareActivate
kPassThroughFirmwareDownload = _nvmectl.kPassThroughFirmwareDownload
kPassThroughAbort = _nvmectl.kPassThroughAbort
kPassThroughSetArbitration = _nvmectl.kPassThroughSetArbitration
kPassThroughSetPowerManagement = _nvmectl.kPassThroughSetPowerManagement
kPassThroughSetTempThreshold = _nvmectl.kPassThroughSetTempThreshold
kPassThroughSetErrorRecovery = _nvmectl.kPassThroughSetErrorRecovery
kPassThroughSetVolatileWriteCache = _nvmectl.kPassThroughSetVolatileWriteCache
kPassThroughSetNumQueues = _nvmectl.kPassThroughSetNumQueues
kPassThroughSetThrottling = _nvmectl.kPassThroughSetThrottling
kPassThroughSetAbruptShutdownTimeout = _nvmectl.kPassThroughSetAbruptShutdownTimeout
kPassThroughSetIntCoalescing = _nvmectl.kPassThroughSetIntCoalescing
kPassThroughSetIntVectorConfig = _nvmectl.kPassThroughSetIntVectorConfig
kPassThroughSetWriteAtomicity = _nvmectl.kPassThroughSetWriteAtomicity
kPassThroughSetAsyncEventConfig = _nvmectl.kPassThroughSetAsyncEventConfig
kPassThroughSetSWProgressMarker = _nvmectl.kPassThroughSetSWProgressMarker
kPassThroughGetFeature = _nvmectl.kPassThroughGetFeature
kPassThroughIdentifyController = _nvmectl.kPassThroughIdentifyController
kPassThroughIdentifyNamespace = _nvmectl.kPassThroughIdentifyNamespace
kPassThroughGetLogPage = _nvmectl.kPassThroughGetLogPage
kPassThroughFormatNVM = _nvmectl.kPassThroughFormatNVM
kPassThroughRead = _nvmectl.kPassThroughRead
kPassThroughWrite = _nvmectl.kPassThroughWrite
kPassThroughSetEncryptionParams = _nvmectl.kPassThroughSetEncryptionParams
kPassThroughDeallocate = _nvmectl.kPassThroughDeallocate
kPassThroughFlush = _nvmectl.kPassThroughFlush
kPassThroughReprioritize = _nvmectl.kPassThroughReprioritize
kPassThroughAsyncEventReqeust = _nvmectl.kPassThroughAsyncEventReqeust
kPassThroughDeleteFirmwareSlot = _nvmectl.kPassThroughDeleteFirmwareSlot
kPassThroughDebugServiceRead = _nvmectl.kPassThroughDebugServiceRead
kPassThroughDebugServiceWrite = _nvmectl.kPassThroughDebugServiceWrite
kPassThroughReadDebugLog = _nvmectl.kPassThroughReadDebugLog
kPassThroughWriteDebugLog = _nvmectl.kPassThroughWriteDebugLog
kPassThroughSetTimestamp = _nvmectl.kPassThroughSetTimestamp
kPassThroughSetFEParams = _nvmectl.kPassThroughSetFEParams
kPassThroughGetFEParams = _nvmectl.kPassThroughGetFEParams
kPassThroughConfigRead32 = _nvmectl.kPassThroughConfigRead32
kPassThroughConfigWrite32 = _nvmectl.kPassThroughConfigWrite32
kPassThroughGetDriverParams = _nvmectl.kPassThroughGetDriverParams
kPassThroughSetDriverParams = _nvmectl.kPassThroughSetDriverParams
kPassThroughGetDriverData = _nvmectl.kPassThroughGetDriverData
kPassThroughCreateBlockStorageDevice = _nvmectl.kPassThroughCreateBlockStorageDevice
kPassThroughDestroyBlockStorageDevice = _nvmectl.kPassThroughDestroyBlockStorageDevice
kPassThroughCheckWriteProtection = _nvmectl.kPassThroughCheckWriteProtection
kPassThroughCreateNamespaces = _nvmectl.kPassThroughCreateNamespaces
kPassThroughUnmap = _nvmectl.kPassThroughUnmap
kPassThroughReadLoggerBuffer = _nvmectl.kPassThroughReadLoggerBuffer
kPassThroughSetHostFWSize = _nvmectl.kPassThroughSetHostFWSize
kPassThroughBonfireTest = _nvmectl.kPassThroughBonfireTest
kPassThroughIdentifyStorageDevice = _nvmectl.kPassThroughIdentifyStorageDevice
kPassThroughSetScratchpad = _nvmectl.kPassThroughSetScratchpad
kPassThroughSetScratchpadRegisters = _nvmectl.kPassThroughSetScratchpadRegisters
kPassThroughPerformBFH = _nvmectl.kPassThroughPerformBFH
kPassThroughTunnel = _nvmectl.kPassThroughTunnel
kPassThroughPrepareForShutdown = _nvmectl.kPassThroughPrepareForShutdown
kPassThroughSecureErase = _nvmectl.kPassThroughSecureErase
kPassThroughNeuralize = _nvmectl.kPassThroughNeuralize
kPassThroughScheduleBG = _nvmectl.kPassThroughScheduleBG
kPassThroughGetDeviceType = _nvmectl.kPassThroughGetDeviceType
kPassThroughGetNANDInfo = _nvmectl.kPassThroughGetNANDInfo
kPassThroughFreezeSQs = _nvmectl.kPassThroughFreezeSQs
kPassThroughSetFeature = _nvmectl.kPassThroughSetFeature
kPassThroughSetPowerBudgetIndex = _nvmectl.kPassThroughSetPowerBudgetIndex
kPassThroughMethodCount = _nvmectl.kPassThroughMethodCount
kNVMeControllerErrorHandling = _nvmectl.kNVMeControllerErrorHandling
kNVMeControllerRequestTimeout = _nvmectl.kNVMeControllerRequestTimeout
kNVMeControllerRequestTimeoutDelta = _nvmectl.kNVMeControllerRequestTimeoutDelta
kNVMeControllerSRTimeout = _nvmectl.kNVMeControllerSRTimeout
kNVMeControllerSRCycleCount = _nvmectl.kNVMeControllerSRCycleCount
kNVMeDriverPendingCommands = _nvmectl.kNVMeDriverPendingCommands
kNVMeDriverLastDiskFeedback = _nvmectl.kNVMeDriverLastDiskFeedback
kNVMeDriverScratchpad = _nvmectl.kNVMeDriverScratchpad
kNVMeDriverLastCSTSPollTime = _nvmectl.kNVMeDriverLastCSTSPollTime
kNVMeDriverSpuriousInterrupts = _nvmectl.kNVMeDriverSpuriousInterrupts
kNVMeShutdownNormal = _nvmectl.kNVMeShutdownNormal
kNVMeShutdownSelfRefresh = _nvmectl.kNVMeShutdownSelfRefresh
kNVMeShutdownBoth = _nvmectl.kNVMeShutdownBoth
kNVMeShutdownAbrupt = _nvmectl.kNVMeShutdownAbrupt
kNVMeDeviceS1X = _nvmectl.kNVMeDeviceS1X
kNVMeDeviceS3E = _nvmectl.kNVMeDeviceS3E
kNVMeDeviceS3X = _nvmectl.kNVMeDeviceS3X
kNVMeDeviceANS2 = _nvmectl.kNVMeDeviceANS2
kNVMeDeviceANS2QB = _nvmectl.kNVMeDeviceANS2QB
kNVMeDeviceUnknown = _nvmectl.kNVMeDeviceUnknown
kNVMeNumDeviceTypes = _nvmectl.kNVMeNumDeviceTypes
class PassThroughStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PassThroughStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PassThroughStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fExecutionTime"] = _nvmectl.PassThroughStatus_fExecutionTime_set
    __swig_getmethods__["fExecutionTime"] = _nvmectl.PassThroughStatus_fExecutionTime_get
    if _newclass:fExecutionTime = _swig_property(_nvmectl.PassThroughStatus_fExecutionTime_get, _nvmectl.PassThroughStatus_fExecutionTime_set)
    __swig_setmethods__["fReturn"] = _nvmectl.PassThroughStatus_fReturn_set
    __swig_getmethods__["fReturn"] = _nvmectl.PassThroughStatus_fReturn_get
    if _newclass:fReturn = _swig_property(_nvmectl.PassThroughStatus_fReturn_get, _nvmectl.PassThroughStatus_fReturn_set)
    __swig_setmethods__["fNVMeStatus"] = _nvmectl.PassThroughStatus_fNVMeStatus_set
    __swig_getmethods__["fNVMeStatus"] = _nvmectl.PassThroughStatus_fNVMeStatus_get
    if _newclass:fNVMeStatus = _swig_property(_nvmectl.PassThroughStatus_fNVMeStatus_get, _nvmectl.PassThroughStatus_fNVMeStatus_set)
    __swig_setmethods__["fCommandSpecificData"] = _nvmectl.PassThroughStatus_fCommandSpecificData_set
    __swig_getmethods__["fCommandSpecificData"] = _nvmectl.PassThroughStatus_fCommandSpecificData_get
    if _newclass:fCommandSpecificData = _swig_property(_nvmectl.PassThroughStatus_fCommandSpecificData_get, _nvmectl.PassThroughStatus_fCommandSpecificData_set)
    __swig_setmethods__["fReserved"] = _nvmectl.PassThroughStatus_fReserved_set
    __swig_getmethods__["fReserved"] = _nvmectl.PassThroughStatus_fReserved_get
    if _newclass:fReserved = _swig_property(_nvmectl.PassThroughStatus_fReserved_get, _nvmectl.PassThroughStatus_fReserved_set)
    def __init__(self): 
        this = _nvmectl.new_PassThroughStatus()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_PassThroughStatus
    __del__ = lambda self : None;
PassThroughStatus_swigregister = _nvmectl.PassThroughStatus_swigregister
PassThroughStatus_swigregister(PassThroughStatus)

class PassThroughRWCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PassThroughRWCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PassThroughRWCommand, name)
    __repr__ = _swig_repr
    __swig_setmethods__["buffer"] = _nvmectl.PassThroughRWCommand_buffer_set
    __swig_getmethods__["buffer"] = _nvmectl.PassThroughRWCommand_buffer_get
    if _newclass:buffer = _swig_property(_nvmectl.PassThroughRWCommand_buffer_get, _nvmectl.PassThroughRWCommand_buffer_set)
    __swig_setmethods__["startLBA"] = _nvmectl.PassThroughRWCommand_startLBA_set
    __swig_getmethods__["startLBA"] = _nvmectl.PassThroughRWCommand_startLBA_get
    if _newclass:startLBA = _swig_property(_nvmectl.PassThroughRWCommand_startLBA_get, _nvmectl.PassThroughRWCommand_startLBA_set)
    __swig_setmethods__["numBlocks"] = _nvmectl.PassThroughRWCommand_numBlocks_set
    __swig_getmethods__["numBlocks"] = _nvmectl.PassThroughRWCommand_numBlocks_get
    if _newclass:numBlocks = _swig_property(_nvmectl.PassThroughRWCommand_numBlocks_get, _nvmectl.PassThroughRWCommand_numBlocks_set)
    __swig_setmethods__["nameSpace"] = _nvmectl.PassThroughRWCommand_nameSpace_set
    __swig_getmethods__["nameSpace"] = _nvmectl.PassThroughRWCommand_nameSpace_get
    if _newclass:nameSpace = _swig_property(_nvmectl.PassThroughRWCommand_nameSpace_get, _nvmectl.PassThroughRWCommand_nameSpace_set)
    __swig_setmethods__["queueID"] = _nvmectl.PassThroughRWCommand_queueID_set
    __swig_getmethods__["queueID"] = _nvmectl.PassThroughRWCommand_queueID_get
    if _newclass:queueID = _swig_property(_nvmectl.PassThroughRWCommand_queueID_get, _nvmectl.PassThroughRWCommand_queueID_set)
    __swig_setmethods__["priority"] = _nvmectl.PassThroughRWCommand_priority_set
    __swig_getmethods__["priority"] = _nvmectl.PassThroughRWCommand_priority_get
    if _newclass:priority = _swig_property(_nvmectl.PassThroughRWCommand_priority_get, _nvmectl.PassThroughRWCommand_priority_set)
    __swig_setmethods__["passive"] = _nvmectl.PassThroughRWCommand_passive_set
    __swig_getmethods__["passive"] = _nvmectl.PassThroughRWCommand_passive_get
    if _newclass:passive = _swig_property(_nvmectl.PassThroughRWCommand_passive_get, _nvmectl.PassThroughRWCommand_passive_set)
    __swig_setmethods__["synchronous"] = _nvmectl.PassThroughRWCommand_synchronous_set
    __swig_getmethods__["synchronous"] = _nvmectl.PassThroughRWCommand_synchronous_get
    if _newclass:synchronous = _swig_property(_nvmectl.PassThroughRWCommand_synchronous_get, _nvmectl.PassThroughRWCommand_synchronous_set)
    __swig_setmethods__["accessFrequency"] = _nvmectl.PassThroughRWCommand_accessFrequency_set
    __swig_getmethods__["accessFrequency"] = _nvmectl.PassThroughRWCommand_accessFrequency_get
    if _newclass:accessFrequency = _swig_property(_nvmectl.PassThroughRWCommand_accessFrequency_get, _nvmectl.PassThroughRWCommand_accessFrequency_set)
    __swig_setmethods__["accessLatency"] = _nvmectl.PassThroughRWCommand_accessLatency_set
    __swig_getmethods__["accessLatency"] = _nvmectl.PassThroughRWCommand_accessLatency_get
    if _newclass:accessLatency = _swig_property(_nvmectl.PassThroughRWCommand_accessLatency_get, _nvmectl.PassThroughRWCommand_accessLatency_set)
    __swig_setmethods__["reserved"] = _nvmectl.PassThroughRWCommand_reserved_set
    __swig_getmethods__["reserved"] = _nvmectl.PassThroughRWCommand_reserved_get
    if _newclass:reserved = _swig_property(_nvmectl.PassThroughRWCommand_reserved_get, _nvmectl.PassThroughRWCommand_reserved_set)
    __swig_setmethods__["key"] = _nvmectl.PassThroughRWCommand_key_set
    __swig_getmethods__["key"] = _nvmectl.PassThroughRWCommand_key_get
    if _newclass:key = _swig_property(_nvmectl.PassThroughRWCommand_key_get, _nvmectl.PassThroughRWCommand_key_set)
    __swig_setmethods__["initVector"] = _nvmectl.PassThroughRWCommand_initVector_set
    __swig_getmethods__["initVector"] = _nvmectl.PassThroughRWCommand_initVector_get
    if _newclass:initVector = _swig_property(_nvmectl.PassThroughRWCommand_initVector_get, _nvmectl.PassThroughRWCommand_initVector_set)
    __swig_setmethods__["wrapped"] = _nvmectl.PassThroughRWCommand_wrapped_set
    __swig_getmethods__["wrapped"] = _nvmectl.PassThroughRWCommand_wrapped_get
    if _newclass:wrapped = _swig_property(_nvmectl.PassThroughRWCommand_wrapped_get, _nvmectl.PassThroughRWCommand_wrapped_set)
    __swig_setmethods__["keyLength"] = _nvmectl.PassThroughRWCommand_keyLength_set
    __swig_getmethods__["keyLength"] = _nvmectl.PassThroughRWCommand_keyLength_get
    if _newclass:keyLength = _swig_property(_nvmectl.PassThroughRWCommand_keyLength_get, _nvmectl.PassThroughRWCommand_keyLength_set)
    __swig_setmethods__["securityMode"] = _nvmectl.PassThroughRWCommand_securityMode_set
    __swig_getmethods__["securityMode"] = _nvmectl.PassThroughRWCommand_securityMode_get
    if _newclass:securityMode = _swig_property(_nvmectl.PassThroughRWCommand_securityMode_get, _nvmectl.PassThroughRWCommand_securityMode_set)
    __swig_setmethods__["reserved2"] = _nvmectl.PassThroughRWCommand_reserved2_set
    __swig_getmethods__["reserved2"] = _nvmectl.PassThroughRWCommand_reserved2_get
    if _newclass:reserved2 = _swig_property(_nvmectl.PassThroughRWCommand_reserved2_get, _nvmectl.PassThroughRWCommand_reserved2_set)
    def __init__(self): 
        this = _nvmectl.new_PassThroughRWCommand()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_PassThroughRWCommand
    __del__ = lambda self : None;
PassThroughRWCommand_swigregister = _nvmectl.PassThroughRWCommand_swigregister
PassThroughRWCommand_swigregister(PassThroughRWCommand)

kNVMeLoggerTransferUnit = _nvmectl.kNVMeLoggerTransferUnit
kNVMeFABlockSize = _nvmectl.kNVMeFABlockSize
kNVMeFAStringSize = _nvmectl.kNVMeFAStringSize
kNVMeFAChunkMagic = _nvmectl.kNVMeFAChunkMagic
kNVMeFALastChunkMagic = _nvmectl.kNVMeFALastChunkMagic
kNVMeFAPurgeAllMagic = _nvmectl.kNVMeFAPurgeAllMagic
kNVMeFAStatusNoData = _nvmectl.kNVMeFAStatusNoData
kNVMeFAStatusSuccess = _nvmectl.kNVMeFAStatusSuccess
kNVMeFAStatusFail = _nvmectl.kNVMeFAStatusFail
kNVMeFALogPayload = _nvmectl.kNVMeFALogPayload
kNVMeFALogMeta = _nvmectl.kNVMeFALogMeta
class FAMeta(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FAMeta, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FAMeta, name)
    __repr__ = _swig_repr
    __swig_setmethods__["VERSION"] = _nvmectl.FAMeta_VERSION_set
    __swig_getmethods__["VERSION"] = _nvmectl.FAMeta_VERSION_get
    if _newclass:VERSION = _swig_property(_nvmectl.FAMeta_VERSION_get, _nvmectl.FAMeta_VERSION_set)
    __swig_setmethods__["DUMP_STATUS"] = _nvmectl.FAMeta_DUMP_STATUS_set
    __swig_getmethods__["DUMP_STATUS"] = _nvmectl.FAMeta_DUMP_STATUS_get
    if _newclass:DUMP_STATUS = _swig_property(_nvmectl.FAMeta_DUMP_STATUS_get, _nvmectl.FAMeta_DUMP_STATUS_set)
    __swig_setmethods__["CHUNK_SIZE"] = _nvmectl.FAMeta_CHUNK_SIZE_set
    __swig_getmethods__["CHUNK_SIZE"] = _nvmectl.FAMeta_CHUNK_SIZE_get
    if _newclass:CHUNK_SIZE = _swig_property(_nvmectl.FAMeta_CHUNK_SIZE_get, _nvmectl.FAMeta_CHUNK_SIZE_set)
    __swig_setmethods__["NUM_CHUNKS"] = _nvmectl.FAMeta_NUM_CHUNKS_set
    __swig_getmethods__["NUM_CHUNKS"] = _nvmectl.FAMeta_NUM_CHUNKS_get
    if _newclass:NUM_CHUNKS = _swig_property(_nvmectl.FAMeta_NUM_CHUNKS_get, _nvmectl.FAMeta_NUM_CHUNKS_set)
    __swig_setmethods__["MAX_ELEMENTS"] = _nvmectl.FAMeta_MAX_ELEMENTS_set
    __swig_getmethods__["MAX_ELEMENTS"] = _nvmectl.FAMeta_MAX_ELEMENTS_get
    if _newclass:MAX_ELEMENTS = _swig_property(_nvmectl.FAMeta_MAX_ELEMENTS_get, _nvmectl.FAMeta_MAX_ELEMENTS_set)
    __swig_setmethods__["NUM_SECTIONS"] = _nvmectl.FAMeta_NUM_SECTIONS_set
    __swig_getmethods__["NUM_SECTIONS"] = _nvmectl.FAMeta_NUM_SECTIONS_get
    if _newclass:NUM_SECTIONS = _swig_property(_nvmectl.FAMeta_NUM_SECTIONS_get, _nvmectl.FAMeta_NUM_SECTIONS_set)
    def __init__(self): 
        this = _nvmectl.new_FAMeta()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_FAMeta
    __del__ = lambda self : None;
FAMeta_swigregister = _nvmectl.FAMeta_swigregister
FAMeta_swigregister(FAMeta)

class NVMeAssertStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NVMeAssertStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NVMeAssertStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fID"] = _nvmectl.NVMeAssertStruct_fID_set
    __swig_getmethods__["fID"] = _nvmectl.NVMeAssertStruct_fID_get
    if _newclass:fID = _swig_property(_nvmectl.NVMeAssertStruct_fID_get, _nvmectl.NVMeAssertStruct_fID_set)
    __swig_setmethods__["fArg1"] = _nvmectl.NVMeAssertStruct_fArg1_set
    __swig_getmethods__["fArg1"] = _nvmectl.NVMeAssertStruct_fArg1_get
    if _newclass:fArg1 = _swig_property(_nvmectl.NVMeAssertStruct_fArg1_get, _nvmectl.NVMeAssertStruct_fArg1_set)
    __swig_setmethods__["fArg2"] = _nvmectl.NVMeAssertStruct_fArg2_set
    __swig_getmethods__["fArg2"] = _nvmectl.NVMeAssertStruct_fArg2_get
    if _newclass:fArg2 = _swig_property(_nvmectl.NVMeAssertStruct_fArg2_get, _nvmectl.NVMeAssertStruct_fArg2_set)
    __swig_setmethods__["fArg3"] = _nvmectl.NVMeAssertStruct_fArg3_set
    __swig_getmethods__["fArg3"] = _nvmectl.NVMeAssertStruct_fArg3_get
    if _newclass:fArg3 = _swig_property(_nvmectl.NVMeAssertStruct_fArg3_get, _nvmectl.NVMeAssertStruct_fArg3_set)
    def __init__(self): 
        this = _nvmectl.new_NVMeAssertStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_NVMeAssertStruct
    __del__ = lambda self : None;
NVMeAssertStruct_swigregister = _nvmectl.NVMeAssertStruct_swigregister
NVMeAssertStruct_swigregister(NVMeAssertStruct)

class FAMetaStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FAMetaStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FAMetaStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["META"] = _nvmectl.FAMetaStruct_META_set
    __swig_getmethods__["META"] = _nvmectl.FAMetaStruct_META_get
    if _newclass:META = _swig_property(_nvmectl.FAMetaStruct_META_get, _nvmectl.FAMetaStruct_META_set)
    __swig_setmethods__["SECTION_STRINGS"] = _nvmectl.FAMetaStruct_SECTION_STRINGS_set
    __swig_getmethods__["SECTION_STRINGS"] = _nvmectl.FAMetaStruct_SECTION_STRINGS_get
    if _newclass:SECTION_STRINGS = _swig_property(_nvmectl.FAMetaStruct_SECTION_STRINGS_get, _nvmectl.FAMetaStruct_SECTION_STRINGS_set)
    __swig_setmethods__["RESERVED"] = _nvmectl.FAMetaStruct_RESERVED_set
    __swig_getmethods__["RESERVED"] = _nvmectl.FAMetaStruct_RESERVED_get
    if _newclass:RESERVED = _swig_property(_nvmectl.FAMetaStruct_RESERVED_get, _nvmectl.FAMetaStruct_RESERVED_set)
    def __init__(self): 
        this = _nvmectl.new_FAMetaStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_FAMetaStruct
    __del__ = lambda self : None;
FAMetaStruct_swigregister = _nvmectl.FAMetaStruct_swigregister
FAMetaStruct_swigregister(FAMetaStruct)

class FAChunkHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FAChunkHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FAChunkHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["MAGIC"] = _nvmectl.FAChunkHeader_MAGIC_set
    __swig_getmethods__["MAGIC"] = _nvmectl.FAChunkHeader_MAGIC_get
    if _newclass:MAGIC = _swig_property(_nvmectl.FAChunkHeader_MAGIC_get, _nvmectl.FAChunkHeader_MAGIC_set)
    __swig_setmethods__["CHUNK_ID"] = _nvmectl.FAChunkHeader_CHUNK_ID_set
    __swig_getmethods__["CHUNK_ID"] = _nvmectl.FAChunkHeader_CHUNK_ID_get
    if _newclass:CHUNK_ID = _swig_property(_nvmectl.FAChunkHeader_CHUNK_ID_get, _nvmectl.FAChunkHeader_CHUNK_ID_set)
    __swig_setmethods__["BYTE_LEN"] = _nvmectl.FAChunkHeader_BYTE_LEN_set
    __swig_getmethods__["BYTE_LEN"] = _nvmectl.FAChunkHeader_BYTE_LEN_get
    if _newclass:BYTE_LEN = _swig_property(_nvmectl.FAChunkHeader_BYTE_LEN_get, _nvmectl.FAChunkHeader_BYTE_LEN_set)
    def __init__(self): 
        this = _nvmectl.new_FAChunkHeader()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_FAChunkHeader
    __del__ = lambda self : None;
FAChunkHeader_swigregister = _nvmectl.FAChunkHeader_swigregister
FAChunkHeader_swigregister(FAChunkHeader)

class FAChunkFooter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FAChunkFooter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FAChunkFooter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CRC"] = _nvmectl.FAChunkFooter_CRC_set
    __swig_getmethods__["CRC"] = _nvmectl.FAChunkFooter_CRC_get
    if _newclass:CRC = _swig_property(_nvmectl.FAChunkFooter_CRC_get, _nvmectl.FAChunkFooter_CRC_set)
    def __init__(self): 
        this = _nvmectl.new_FAChunkFooter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_FAChunkFooter
    __del__ = lambda self : None;
FAChunkFooter_swigregister = _nvmectl.FAChunkFooter_swigregister
FAChunkFooter_swigregister(FAChunkFooter)

class FATOC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FATOC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FATOC, name)
    __repr__ = _swig_repr
    __swig_setmethods__["DEVICE_PHYS_ADDRESS"] = _nvmectl.FATOC_DEVICE_PHYS_ADDRESS_set
    __swig_getmethods__["DEVICE_PHYS_ADDRESS"] = _nvmectl.FATOC_DEVICE_PHYS_ADDRESS_get
    if _newclass:DEVICE_PHYS_ADDRESS = _swig_property(_nvmectl.FATOC_DEVICE_PHYS_ADDRESS_get, _nvmectl.FATOC_DEVICE_PHYS_ADDRESS_set)
    __swig_setmethods__["SECTION_LEN"] = _nvmectl.FATOC_SECTION_LEN_set
    __swig_getmethods__["SECTION_LEN"] = _nvmectl.FATOC_SECTION_LEN_get
    if _newclass:SECTION_LEN = _swig_property(_nvmectl.FATOC_SECTION_LEN_get, _nvmectl.FATOC_SECTION_LEN_set)
    def __init__(self): 
        this = _nvmectl.new_FATOC()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_FATOC
    __del__ = lambda self : None;
FATOC_swigregister = _nvmectl.FATOC_swigregister
FATOC_swigregister(FATOC)

class S3XFADB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S3XFADB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S3XFADB, name)
    __repr__ = _swig_repr
    __swig_setmethods__["MAGIC"] = _nvmectl.S3XFADB_MAGIC_set
    __swig_getmethods__["MAGIC"] = _nvmectl.S3XFADB_MAGIC_get
    if _newclass:MAGIC = _swig_property(_nvmectl.S3XFADB_MAGIC_get, _nvmectl.S3XFADB_MAGIC_set)
    __swig_setmethods__["SIZE"] = _nvmectl.S3XFADB_SIZE_set
    __swig_getmethods__["SIZE"] = _nvmectl.S3XFADB_SIZE_get
    if _newclass:SIZE = _swig_property(_nvmectl.S3XFADB_SIZE_get, _nvmectl.S3XFADB_SIZE_set)
    __swig_setmethods__["DATA_START_OFFSET"] = _nvmectl.S3XFADB_DATA_START_OFFSET_set
    __swig_getmethods__["DATA_START_OFFSET"] = _nvmectl.S3XFADB_DATA_START_OFFSET_get
    if _newclass:DATA_START_OFFSET = _swig_property(_nvmectl.S3XFADB_DATA_START_OFFSET_get, _nvmectl.S3XFADB_DATA_START_OFFSET_set)
    __swig_setmethods__["NUM_BLOCKS"] = _nvmectl.S3XFADB_NUM_BLOCKS_set
    __swig_getmethods__["NUM_BLOCKS"] = _nvmectl.S3XFADB_NUM_BLOCKS_get
    if _newclass:NUM_BLOCKS = _swig_property(_nvmectl.S3XFADB_NUM_BLOCKS_get, _nvmectl.S3XFADB_NUM_BLOCKS_set)
    __swig_setmethods__["NUM_MSPS"] = _nvmectl.S3XFADB_NUM_MSPS_set
    __swig_getmethods__["NUM_MSPS"] = _nvmectl.S3XFADB_NUM_MSPS_get
    if _newclass:NUM_MSPS = _swig_property(_nvmectl.S3XFADB_NUM_MSPS_get, _nvmectl.S3XFADB_NUM_MSPS_set)
    __swig_setmethods__["ACTIVE_MSP_MASK"] = _nvmectl.S3XFADB_ACTIVE_MSP_MASK_set
    __swig_getmethods__["ACTIVE_MSP_MASK"] = _nvmectl.S3XFADB_ACTIVE_MSP_MASK_get
    if _newclass:ACTIVE_MSP_MASK = _swig_property(_nvmectl.S3XFADB_ACTIVE_MSP_MASK_get, _nvmectl.S3XFADB_ACTIVE_MSP_MASK_set)
    __swig_setmethods__["NUM_CORE_CHUNKS_MSP"] = _nvmectl.S3XFADB_NUM_CORE_CHUNKS_MSP_set
    __swig_getmethods__["NUM_CORE_CHUNKS_MSP"] = _nvmectl.S3XFADB_NUM_CORE_CHUNKS_MSP_get
    if _newclass:NUM_CORE_CHUNKS_MSP = _swig_property(_nvmectl.S3XFADB_NUM_CORE_CHUNKS_MSP_get, _nvmectl.S3XFADB_NUM_CORE_CHUNKS_MSP_set)
    __swig_setmethods__["NUM_CORE_CHUNKS_ASP"] = _nvmectl.S3XFADB_NUM_CORE_CHUNKS_ASP_set
    __swig_getmethods__["NUM_CORE_CHUNKS_ASP"] = _nvmectl.S3XFADB_NUM_CORE_CHUNKS_ASP_get
    if _newclass:NUM_CORE_CHUNKS_ASP = _swig_property(_nvmectl.S3XFADB_NUM_CORE_CHUNKS_ASP_get, _nvmectl.S3XFADB_NUM_CORE_CHUNKS_ASP_set)
    __swig_setmethods__["NUM_NON_CORE_CHUNKS_MSP"] = _nvmectl.S3XFADB_NUM_NON_CORE_CHUNKS_MSP_set
    __swig_getmethods__["NUM_NON_CORE_CHUNKS_MSP"] = _nvmectl.S3XFADB_NUM_NON_CORE_CHUNKS_MSP_get
    if _newclass:NUM_NON_CORE_CHUNKS_MSP = _swig_property(_nvmectl.S3XFADB_NUM_NON_CORE_CHUNKS_MSP_get, _nvmectl.S3XFADB_NUM_NON_CORE_CHUNKS_MSP_set)
    __swig_setmethods__["NUM_NON_CORE_CHUNKS_ASP"] = _nvmectl.S3XFADB_NUM_NON_CORE_CHUNKS_ASP_set
    __swig_getmethods__["NUM_NON_CORE_CHUNKS_ASP"] = _nvmectl.S3XFADB_NUM_NON_CORE_CHUNKS_ASP_get
    if _newclass:NUM_NON_CORE_CHUNKS_ASP = _swig_property(_nvmectl.S3XFADB_NUM_NON_CORE_CHUNKS_ASP_get, _nvmectl.S3XFADB_NUM_NON_CORE_CHUNKS_ASP_set)
    def __init__(self): 
        this = _nvmectl.new_S3XFADB()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_S3XFADB
    __del__ = lambda self : None;
S3XFADB_swigregister = _nvmectl.S3XFADB_swigregister
S3XFADB_swigregister(S3XFADB)

class S3XFADBVersion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S3XFADBVersion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S3XFADBVersion, name)
    __repr__ = _swig_repr
    __swig_setmethods__["MAGIC"] = _nvmectl.S3XFADBVersion_MAGIC_set
    __swig_getmethods__["MAGIC"] = _nvmectl.S3XFADBVersion_MAGIC_get
    if _newclass:MAGIC = _swig_property(_nvmectl.S3XFADBVersion_MAGIC_get, _nvmectl.S3XFADBVersion_MAGIC_set)
    __swig_setmethods__["VERSION"] = _nvmectl.S3XFADBVersion_VERSION_set
    __swig_getmethods__["VERSION"] = _nvmectl.S3XFADBVersion_VERSION_get
    if _newclass:VERSION = _swig_property(_nvmectl.S3XFADBVersion_VERSION_get, _nvmectl.S3XFADBVersion_VERSION_set)
    def __init__(self): 
        this = _nvmectl.new_S3XFADBVersion()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_S3XFADBVersion
    __del__ = lambda self : None;
S3XFADBVersion_swigregister = _nvmectl.S3XFADBVersion_swigregister
S3XFADBVersion_swigregister(S3XFADBVersion)

class S3XFAHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S3XFAHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S3XFAHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["MAGIC"] = _nvmectl.S3XFAHeader_MAGIC_set
    __swig_getmethods__["MAGIC"] = _nvmectl.S3XFAHeader_MAGIC_get
    if _newclass:MAGIC = _swig_property(_nvmectl.S3XFAHeader_MAGIC_get, _nvmectl.S3XFAHeader_MAGIC_set)
    __swig_setmethods__["PROC_ID"] = _nvmectl.S3XFAHeader_PROC_ID_set
    __swig_getmethods__["PROC_ID"] = _nvmectl.S3XFAHeader_PROC_ID_get
    if _newclass:PROC_ID = _swig_property(_nvmectl.S3XFAHeader_PROC_ID_get, _nvmectl.S3XFAHeader_PROC_ID_set)
    def __init__(self): 
        this = _nvmectl.new_S3XFAHeader()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_S3XFAHeader
    __del__ = lambda self : None;
S3XFAHeader_swigregister = _nvmectl.S3XFAHeader_swigregister
S3XFAHeader_swigregister(S3XFAHeader)

class S3XFAARMStateHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S3XFAARMStateHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S3XFAARMStateHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["HEADER"] = _nvmectl.S3XFAARMStateHeader_HEADER_set
    __swig_getmethods__["HEADER"] = _nvmectl.S3XFAARMStateHeader_HEADER_get
    if _newclass:HEADER = _swig_property(_nvmectl.S3XFAARMStateHeader_HEADER_get, _nvmectl.S3XFAARMStateHeader_HEADER_set)
    __swig_setmethods__["PAYLOAD_SIZE"] = _nvmectl.S3XFAARMStateHeader_PAYLOAD_SIZE_set
    __swig_getmethods__["PAYLOAD_SIZE"] = _nvmectl.S3XFAARMStateHeader_PAYLOAD_SIZE_get
    if _newclass:PAYLOAD_SIZE = _swig_property(_nvmectl.S3XFAARMStateHeader_PAYLOAD_SIZE_get, _nvmectl.S3XFAARMStateHeader_PAYLOAD_SIZE_set)
    def __init__(self): 
        this = _nvmectl.new_S3XFAARMStateHeader()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_S3XFAARMStateHeader
    __del__ = lambda self : None;
S3XFAARMStateHeader_swigregister = _nvmectl.S3XFAARMStateHeader_swigregister
S3XFAARMStateHeader_swigregister(S3XFAARMStateHeader)

class S3XFAChunkHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S3XFAChunkHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S3XFAChunkHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["HEADER"] = _nvmectl.S3XFAChunkHeader_HEADER_set
    __swig_getmethods__["HEADER"] = _nvmectl.S3XFAChunkHeader_HEADER_get
    if _newclass:HEADER = _swig_property(_nvmectl.S3XFAChunkHeader_HEADER_get, _nvmectl.S3XFAChunkHeader_HEADER_set)
    __swig_setmethods__["CHUNK_ADDRESS"] = _nvmectl.S3XFAChunkHeader_CHUNK_ADDRESS_set
    __swig_getmethods__["CHUNK_ADDRESS"] = _nvmectl.S3XFAChunkHeader_CHUNK_ADDRESS_get
    if _newclass:CHUNK_ADDRESS = _swig_property(_nvmectl.S3XFAChunkHeader_CHUNK_ADDRESS_get, _nvmectl.S3XFAChunkHeader_CHUNK_ADDRESS_set)
    __swig_setmethods__["PAYLOAD_SIZE"] = _nvmectl.S3XFAChunkHeader_PAYLOAD_SIZE_set
    __swig_getmethods__["PAYLOAD_SIZE"] = _nvmectl.S3XFAChunkHeader_PAYLOAD_SIZE_get
    if _newclass:PAYLOAD_SIZE = _swig_property(_nvmectl.S3XFAChunkHeader_PAYLOAD_SIZE_get, _nvmectl.S3XFAChunkHeader_PAYLOAD_SIZE_set)
    def __init__(self): 
        this = _nvmectl.new_S3XFAChunkHeader()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_S3XFAChunkHeader
    __del__ = lambda self : None;
S3XFAChunkHeader_swigregister = _nvmectl.S3XFAChunkHeader_swigregister
S3XFAChunkHeader_swigregister(S3XFAChunkHeader)

class S3XFARawDataHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S3XFARawDataHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S3XFARawDataHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["HEADER"] = _nvmectl.S3XFARawDataHeader_HEADER_set
    __swig_getmethods__["HEADER"] = _nvmectl.S3XFARawDataHeader_HEADER_get
    if _newclass:HEADER = _swig_property(_nvmectl.S3XFARawDataHeader_HEADER_get, _nvmectl.S3XFARawDataHeader_HEADER_set)
    __swig_setmethods__["FNAME_LEN"] = _nvmectl.S3XFARawDataHeader_FNAME_LEN_set
    __swig_getmethods__["FNAME_LEN"] = _nvmectl.S3XFARawDataHeader_FNAME_LEN_get
    if _newclass:FNAME_LEN = _swig_property(_nvmectl.S3XFARawDataHeader_FNAME_LEN_get, _nvmectl.S3XFARawDataHeader_FNAME_LEN_set)
    __swig_setmethods__["RESERVED"] = _nvmectl.S3XFARawDataHeader_RESERVED_set
    __swig_getmethods__["RESERVED"] = _nvmectl.S3XFARawDataHeader_RESERVED_get
    if _newclass:RESERVED = _swig_property(_nvmectl.S3XFARawDataHeader_RESERVED_get, _nvmectl.S3XFARawDataHeader_RESERVED_set)
    __swig_setmethods__["PAYLOAD_SIZE"] = _nvmectl.S3XFARawDataHeader_PAYLOAD_SIZE_set
    __swig_getmethods__["PAYLOAD_SIZE"] = _nvmectl.S3XFARawDataHeader_PAYLOAD_SIZE_get
    if _newclass:PAYLOAD_SIZE = _swig_property(_nvmectl.S3XFARawDataHeader_PAYLOAD_SIZE_get, _nvmectl.S3XFARawDataHeader_PAYLOAD_SIZE_set)
    def __init__(self): 
        this = _nvmectl.new_S3XFARawDataHeader()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_S3XFARawDataHeader
    __del__ = lambda self : None;
S3XFARawDataHeader_swigregister = _nvmectl.S3XFARawDataHeader_swigregister
S3XFARawDataHeader_swigregister(S3XFARawDataHeader)

class S3XFAContext(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S3XFAContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S3XFAContext, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fd"] = _nvmectl.S3XFAContext_fd_set
    __swig_getmethods__["fd"] = _nvmectl.S3XFAContext_fd_get
    if _newclass:fd = _swig_property(_nvmectl.S3XFAContext_fd_get, _nvmectl.S3XFAContext_fd_set)
    __swig_setmethods__["data_offset"] = _nvmectl.S3XFAContext_data_offset_set
    __swig_getmethods__["data_offset"] = _nvmectl.S3XFAContext_data_offset_get
    if _newclass:data_offset = _swig_property(_nvmectl.S3XFAContext_data_offset_get, _nvmectl.S3XFAContext_data_offset_set)
    __swig_setmethods__["cmd_offset"] = _nvmectl.S3XFAContext_cmd_offset_set
    __swig_getmethods__["cmd_offset"] = _nvmectl.S3XFAContext_cmd_offset_get
    if _newclass:cmd_offset = _swig_property(_nvmectl.S3XFAContext_cmd_offset_get, _nvmectl.S3XFAContext_cmd_offset_set)
    def __init__(self): 
        this = _nvmectl.new_S3XFAContext()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_S3XFAContext
    __del__ = lambda self : None;
S3XFAContext_swigregister = _nvmectl.S3XFAContext_swigregister
S3XFAContext_swigregister(S3XFAContext)

class NVMeCTLDevice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NVMeCTLDevice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NVMeCTLDevice, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fBridgeBDF"] = _nvmectl.NVMeCTLDevice_fBridgeBDF_set
    __swig_getmethods__["fBridgeBDF"] = _nvmectl.NVMeCTLDevice_fBridgeBDF_get
    if _newclass:fBridgeBDF = _swig_property(_nvmectl.NVMeCTLDevice_fBridgeBDF_get, _nvmectl.NVMeCTLDevice_fBridgeBDF_set)
    __swig_setmethods__["fDeviceBDF"] = _nvmectl.NVMeCTLDevice_fDeviceBDF_set
    __swig_getmethods__["fDeviceBDF"] = _nvmectl.NVMeCTLDevice_fDeviceBDF_get
    if _newclass:fDeviceBDF = _swig_property(_nvmectl.NVMeCTLDevice_fDeviceBDF_get, _nvmectl.NVMeCTLDevice_fDeviceBDF_set)
    __swig_setmethods__["fSerial"] = _nvmectl.NVMeCTLDevice_fSerial_set
    __swig_getmethods__["fSerial"] = _nvmectl.NVMeCTLDevice_fSerial_get
    if _newclass:fSerial = _swig_property(_nvmectl.NVMeCTLDevice_fSerial_get, _nvmectl.NVMeCTLDevice_fSerial_set)
    __swig_setmethods__["fBSDName"] = _nvmectl.NVMeCTLDevice_fBSDName_set
    __swig_getmethods__["fBSDName"] = _nvmectl.NVMeCTLDevice_fBSDName_get
    if _newclass:fBSDName = _swig_property(_nvmectl.NVMeCTLDevice_fBSDName_get, _nvmectl.NVMeCTLDevice_fBSDName_set)
    __swig_setmethods__["fFirmwareRev"] = _nvmectl.NVMeCTLDevice_fFirmwareRev_set
    __swig_getmethods__["fFirmwareRev"] = _nvmectl.NVMeCTLDevice_fFirmwareRev_get
    if _newclass:fFirmwareRev = _swig_property(_nvmectl.NVMeCTLDevice_fFirmwareRev_get, _nvmectl.NVMeCTLDevice_fFirmwareRev_set)
    def __init__(self): 
        this = _nvmectl.new_NVMeCTLDevice()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_NVMeCTLDevice
    __del__ = lambda self : None;
NVMeCTLDevice_swigregister = _nvmectl.NVMeCTLDevice_swigregister
NVMeCTLDevice_swigregister(NVMeCTLDevice)

class NVMeBufferHandle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NVMeBufferHandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NVMeBufferHandle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["descriptor"] = _nvmectl.NVMeBufferHandle_descriptor_set
    __swig_getmethods__["descriptor"] = _nvmectl.NVMeBufferHandle_descriptor_get
    if _newclass:descriptor = _swig_property(_nvmectl.NVMeBufferHandle_descriptor_get, _nvmectl.NVMeBufferHandle_descriptor_set)
    __swig_setmethods__["virtAddress"] = _nvmectl.NVMeBufferHandle_virtAddress_set
    __swig_getmethods__["virtAddress"] = _nvmectl.NVMeBufferHandle_virtAddress_get
    if _newclass:virtAddress = _swig_property(_nvmectl.NVMeBufferHandle_virtAddress_get, _nvmectl.NVMeBufferHandle_virtAddress_set)
    __swig_setmethods__["physAddress"] = _nvmectl.NVMeBufferHandle_physAddress_set
    __swig_getmethods__["physAddress"] = _nvmectl.NVMeBufferHandle_physAddress_get
    if _newclass:physAddress = _swig_property(_nvmectl.NVMeBufferHandle_physAddress_get, _nvmectl.NVMeBufferHandle_physAddress_set)
    def __init__(self): 
        this = _nvmectl.new_NVMeBufferHandle()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_NVMeBufferHandle
    __del__ = lambda self : None;
NVMeBufferHandle_swigregister = _nvmectl.NVMeBufferHandle_swigregister
NVMeBufferHandle_swigregister(NVMeBufferHandle)

class PRPBufferHandle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PRPBufferHandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PRPBufferHandle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["descriptor"] = _nvmectl.PRPBufferHandle_descriptor_set
    __swig_getmethods__["descriptor"] = _nvmectl.PRPBufferHandle_descriptor_get
    if _newclass:descriptor = _swig_property(_nvmectl.PRPBufferHandle_descriptor_get, _nvmectl.PRPBufferHandle_descriptor_set)
    __swig_setmethods__["address"] = _nvmectl.PRPBufferHandle_address_set
    __swig_getmethods__["address"] = _nvmectl.PRPBufferHandle_address_get
    if _newclass:address = _swig_property(_nvmectl.PRPBufferHandle_address_get, _nvmectl.PRPBufferHandle_address_set)
    def __init__(self): 
        this = _nvmectl.new_PRPBufferHandle()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_PRPBufferHandle
    __del__ = lambda self : None;
PRPBufferHandle_swigregister = _nvmectl.PRPBufferHandle_swigregister
PRPBufferHandle_swigregister(PRPBufferHandle)

MAX_NUM_OF_CYCLES_STATS = _nvmectl.MAX_NUM_OF_CYCLES_STATS
MAX_NUM_OF_GBB_FOR_PTS_DATA = _nvmectl.MAX_NUM_OF_GBB_FOR_PTS_DATA
class SLBT_DriveInfoPtsData_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLBT_DriveInfoPtsData_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SLBT_DriveInfoPtsData_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["OFW_VERSION"] = _nvmectl.SLBT_DriveInfoPtsData_t_OFW_VERSION_set
    __swig_getmethods__["OFW_VERSION"] = _nvmectl.SLBT_DriveInfoPtsData_t_OFW_VERSION_get
    if _newclass:OFW_VERSION = _swig_property(_nvmectl.SLBT_DriveInfoPtsData_t_OFW_VERSION_get, _nvmectl.SLBT_DriveInfoPtsData_t_OFW_VERSION_set)
    __swig_setmethods__["SERIAL_NUMBER"] = _nvmectl.SLBT_DriveInfoPtsData_t_SERIAL_NUMBER_set
    __swig_getmethods__["SERIAL_NUMBER"] = _nvmectl.SLBT_DriveInfoPtsData_t_SERIAL_NUMBER_get
    if _newclass:SERIAL_NUMBER = _swig_property(_nvmectl.SLBT_DriveInfoPtsData_t_SERIAL_NUMBER_get, _nvmectl.SLBT_DriveInfoPtsData_t_SERIAL_NUMBER_set)
    __swig_setmethods__["VENDOR_ID"] = _nvmectl.SLBT_DriveInfoPtsData_t_VENDOR_ID_set
    __swig_getmethods__["VENDOR_ID"] = _nvmectl.SLBT_DriveInfoPtsData_t_VENDOR_ID_get
    if _newclass:VENDOR_ID = _swig_property(_nvmectl.SLBT_DriveInfoPtsData_t_VENDOR_ID_get, _nvmectl.SLBT_DriveInfoPtsData_t_VENDOR_ID_set)
    __swig_setmethods__["PACKAGE_TYPE"] = _nvmectl.SLBT_DriveInfoPtsData_t_PACKAGE_TYPE_set
    __swig_getmethods__["PACKAGE_TYPE"] = _nvmectl.SLBT_DriveInfoPtsData_t_PACKAGE_TYPE_get
    if _newclass:PACKAGE_TYPE = _swig_property(_nvmectl.SLBT_DriveInfoPtsData_t_PACKAGE_TYPE_get, _nvmectl.SLBT_DriveInfoPtsData_t_PACKAGE_TYPE_set)
    __swig_setmethods__["NAND_LITHOGRAOHY"] = _nvmectl.SLBT_DriveInfoPtsData_t_NAND_LITHOGRAOHY_set
    __swig_getmethods__["NAND_LITHOGRAOHY"] = _nvmectl.SLBT_DriveInfoPtsData_t_NAND_LITHOGRAOHY_get
    if _newclass:NAND_LITHOGRAOHY = _swig_property(_nvmectl.SLBT_DriveInfoPtsData_t_NAND_LITHOGRAOHY_get, _nvmectl.SLBT_DriveInfoPtsData_t_NAND_LITHOGRAOHY_set)
    __swig_setmethods__["NAND_DENSITY"] = _nvmectl.SLBT_DriveInfoPtsData_t_NAND_DENSITY_set
    __swig_getmethods__["NAND_DENSITY"] = _nvmectl.SLBT_DriveInfoPtsData_t_NAND_DENSITY_get
    if _newclass:NAND_DENSITY = _swig_property(_nvmectl.SLBT_DriveInfoPtsData_t_NAND_DENSITY_get, _nvmectl.SLBT_DriveInfoPtsData_t_NAND_DENSITY_set)
    __swig_setmethods__["NAND_TECHNOLOGY"] = _nvmectl.SLBT_DriveInfoPtsData_t_NAND_TECHNOLOGY_set
    __swig_getmethods__["NAND_TECHNOLOGY"] = _nvmectl.SLBT_DriveInfoPtsData_t_NAND_TECHNOLOGY_get
    if _newclass:NAND_TECHNOLOGY = _swig_property(_nvmectl.SLBT_DriveInfoPtsData_t_NAND_TECHNOLOGY_get, _nvmectl.SLBT_DriveInfoPtsData_t_NAND_TECHNOLOGY_set)
    __swig_setmethods__["NAND_REVISION"] = _nvmectl.SLBT_DriveInfoPtsData_t_NAND_REVISION_set
    __swig_getmethods__["NAND_REVISION"] = _nvmectl.SLBT_DriveInfoPtsData_t_NAND_REVISION_get
    if _newclass:NAND_REVISION = _swig_property(_nvmectl.SLBT_DriveInfoPtsData_t_NAND_REVISION_get, _nvmectl.SLBT_DriveInfoPtsData_t_NAND_REVISION_set)
    __swig_setmethods__["NAND_CAPACITY"] = _nvmectl.SLBT_DriveInfoPtsData_t_NAND_CAPACITY_set
    __swig_getmethods__["NAND_CAPACITY"] = _nvmectl.SLBT_DriveInfoPtsData_t_NAND_CAPACITY_get
    if _newclass:NAND_CAPACITY = _swig_property(_nvmectl.SLBT_DriveInfoPtsData_t_NAND_CAPACITY_get, _nvmectl.SLBT_DriveInfoPtsData_t_NAND_CAPACITY_set)
    __swig_setmethods__["RESERVED"] = _nvmectl.SLBT_DriveInfoPtsData_t_RESERVED_set
    __swig_getmethods__["RESERVED"] = _nvmectl.SLBT_DriveInfoPtsData_t_RESERVED_get
    if _newclass:RESERVED = _swig_property(_nvmectl.SLBT_DriveInfoPtsData_t_RESERVED_get, _nvmectl.SLBT_DriveInfoPtsData_t_RESERVED_set)
    def __init__(self): 
        this = _nvmectl.new_SLBT_DriveInfoPtsData_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_SLBT_DriveInfoPtsData_t
    __del__ = lambda self : None;
SLBT_DriveInfoPtsData_t_swigregister = _nvmectl.SLBT_DriveInfoPtsData_t_swigregister
SLBT_DriveInfoPtsData_t_swigregister(SLBT_DriveInfoPtsData_t)

class slbt_cycle_perf_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, slbt_cycle_perf_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, slbt_cycle_perf_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["PROGRAM_TICKS"] = _nvmectl.slbt_cycle_perf_t_PROGRAM_TICKS_set
    __swig_getmethods__["PROGRAM_TICKS"] = _nvmectl.slbt_cycle_perf_t_PROGRAM_TICKS_get
    if _newclass:PROGRAM_TICKS = _swig_property(_nvmectl.slbt_cycle_perf_t_PROGRAM_TICKS_get, _nvmectl.slbt_cycle_perf_t_PROGRAM_TICKS_set)
    __swig_setmethods__["PROGRAM_TIME"] = _nvmectl.slbt_cycle_perf_t_PROGRAM_TIME_set
    __swig_getmethods__["PROGRAM_TIME"] = _nvmectl.slbt_cycle_perf_t_PROGRAM_TIME_get
    if _newclass:PROGRAM_TIME = _swig_property(_nvmectl.slbt_cycle_perf_t_PROGRAM_TIME_get, _nvmectl.slbt_cycle_perf_t_PROGRAM_TIME_set)
    __swig_setmethods__["READ_TIME"] = _nvmectl.slbt_cycle_perf_t_READ_TIME_set
    __swig_getmethods__["READ_TIME"] = _nvmectl.slbt_cycle_perf_t_READ_TIME_get
    if _newclass:READ_TIME = _swig_property(_nvmectl.slbt_cycle_perf_t_READ_TIME_get, _nvmectl.slbt_cycle_perf_t_READ_TIME_set)
    __swig_setmethods__["TOTAL_TIME"] = _nvmectl.slbt_cycle_perf_t_TOTAL_TIME_set
    __swig_getmethods__["TOTAL_TIME"] = _nvmectl.slbt_cycle_perf_t_TOTAL_TIME_get
    if _newclass:TOTAL_TIME = _swig_property(_nvmectl.slbt_cycle_perf_t_TOTAL_TIME_get, _nvmectl.slbt_cycle_perf_t_TOTAL_TIME_set)
    __swig_setmethods__["PROGRAM_OPS"] = _nvmectl.slbt_cycle_perf_t_PROGRAM_OPS_set
    __swig_getmethods__["PROGRAM_OPS"] = _nvmectl.slbt_cycle_perf_t_PROGRAM_OPS_get
    if _newclass:PROGRAM_OPS = _swig_property(_nvmectl.slbt_cycle_perf_t_PROGRAM_OPS_get, _nvmectl.slbt_cycle_perf_t_PROGRAM_OPS_set)
    __swig_setmethods__["READ_OPS"] = _nvmectl.slbt_cycle_perf_t_READ_OPS_set
    __swig_getmethods__["READ_OPS"] = _nvmectl.slbt_cycle_perf_t_READ_OPS_get
    if _newclass:READ_OPS = _swig_property(_nvmectl.slbt_cycle_perf_t_READ_OPS_get, _nvmectl.slbt_cycle_perf_t_READ_OPS_set)
    __swig_setmethods__["PROGRAM_PERF"] = _nvmectl.slbt_cycle_perf_t_PROGRAM_PERF_set
    __swig_getmethods__["PROGRAM_PERF"] = _nvmectl.slbt_cycle_perf_t_PROGRAM_PERF_get
    if _newclass:PROGRAM_PERF = _swig_property(_nvmectl.slbt_cycle_perf_t_PROGRAM_PERF_get, _nvmectl.slbt_cycle_perf_t_PROGRAM_PERF_set)
    __swig_setmethods__["READ_PERF"] = _nvmectl.slbt_cycle_perf_t_READ_PERF_set
    __swig_getmethods__["READ_PERF"] = _nvmectl.slbt_cycle_perf_t_READ_PERF_get
    if _newclass:READ_PERF = _swig_property(_nvmectl.slbt_cycle_perf_t_READ_PERF_get, _nvmectl.slbt_cycle_perf_t_READ_PERF_set)
    def __init__(self): 
        this = _nvmectl.new_slbt_cycle_perf_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_slbt_cycle_perf_t
    __del__ = lambda self : None;
slbt_cycle_perf_t_swigregister = _nvmectl.slbt_cycle_perf_t_swigregister
slbt_cycle_perf_t_swigregister(slbt_cycle_perf_t)

class SLBT_GBBData_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLBT_GBBData_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SLBT_GBBData_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["GBB_VALID"] = _nvmectl.SLBT_GBBData_t_GBB_VALID_set
    __swig_getmethods__["GBB_VALID"] = _nvmectl.SLBT_GBBData_t_GBB_VALID_get
    if _newclass:GBB_VALID = _swig_property(_nvmectl.SLBT_GBBData_t_GBB_VALID_get, _nvmectl.SLBT_GBBData_t_GBB_VALID_set)
    __swig_setmethods__["GBB_CYCLENUMBER"] = _nvmectl.SLBT_GBBData_t_GBB_CYCLENUMBER_set
    __swig_getmethods__["GBB_CYCLENUMBER"] = _nvmectl.SLBT_GBBData_t_GBB_CYCLENUMBER_get
    if _newclass:GBB_CYCLENUMBER = _swig_property(_nvmectl.SLBT_GBBData_t_GBB_CYCLENUMBER_get, _nvmectl.SLBT_GBBData_t_GBB_CYCLENUMBER_set)
    __swig_setmethods__["GBB_MODE"] = _nvmectl.SLBT_GBBData_t_GBB_MODE_set
    __swig_getmethods__["GBB_MODE"] = _nvmectl.SLBT_GBBData_t_GBB_MODE_get
    if _newclass:GBB_MODE = _swig_property(_nvmectl.SLBT_GBBData_t_GBB_MODE_get, _nvmectl.SLBT_GBBData_t_GBB_MODE_set)
    __swig_setmethods__["GBB_FAILURE_TYPE"] = _nvmectl.SLBT_GBBData_t_GBB_FAILURE_TYPE_set
    __swig_getmethods__["GBB_FAILURE_TYPE"] = _nvmectl.SLBT_GBBData_t_GBB_FAILURE_TYPE_get
    if _newclass:GBB_FAILURE_TYPE = _swig_property(_nvmectl.SLBT_GBBData_t_GBB_FAILURE_TYPE_get, _nvmectl.SLBT_GBBData_t_GBB_FAILURE_TYPE_set)
    __swig_setmethods__["GBB_FAILURE_CH"] = _nvmectl.SLBT_GBBData_t_GBB_FAILURE_CH_set
    __swig_getmethods__["GBB_FAILURE_CH"] = _nvmectl.SLBT_GBBData_t_GBB_FAILURE_CH_get
    if _newclass:GBB_FAILURE_CH = _swig_property(_nvmectl.SLBT_GBBData_t_GBB_FAILURE_CH_get, _nvmectl.SLBT_GBBData_t_GBB_FAILURE_CH_set)
    __swig_setmethods__["GBB_MEASURED_VALUE"] = _nvmectl.SLBT_GBBData_t_GBB_MEASURED_VALUE_set
    __swig_getmethods__["GBB_MEASURED_VALUE"] = _nvmectl.SLBT_GBBData_t_GBB_MEASURED_VALUE_get
    if _newclass:GBB_MEASURED_VALUE = _swig_property(_nvmectl.SLBT_GBBData_t_GBB_MEASURED_VALUE_get, _nvmectl.SLBT_GBBData_t_GBB_MEASURED_VALUE_set)
    __swig_setmethods__["GBB_FAILURE_DIE"] = _nvmectl.SLBT_GBBData_t_GBB_FAILURE_DIE_set
    __swig_getmethods__["GBB_FAILURE_DIE"] = _nvmectl.SLBT_GBBData_t_GBB_FAILURE_DIE_get
    if _newclass:GBB_FAILURE_DIE = _swig_property(_nvmectl.SLBT_GBBData_t_GBB_FAILURE_DIE_get, _nvmectl.SLBT_GBBData_t_GBB_FAILURE_DIE_set)
    __swig_setmethods__["GBB_FAILURE_BLOCK"] = _nvmectl.SLBT_GBBData_t_GBB_FAILURE_BLOCK_set
    __swig_getmethods__["GBB_FAILURE_BLOCK"] = _nvmectl.SLBT_GBBData_t_GBB_FAILURE_BLOCK_get
    if _newclass:GBB_FAILURE_BLOCK = _swig_property(_nvmectl.SLBT_GBBData_t_GBB_FAILURE_BLOCK_get, _nvmectl.SLBT_GBBData_t_GBB_FAILURE_BLOCK_set)
    __swig_setmethods__["GBB_FAILURE_PAGE"] = _nvmectl.SLBT_GBBData_t_GBB_FAILURE_PAGE_set
    __swig_getmethods__["GBB_FAILURE_PAGE"] = _nvmectl.SLBT_GBBData_t_GBB_FAILURE_PAGE_get
    if _newclass:GBB_FAILURE_PAGE = _swig_property(_nvmectl.SLBT_GBBData_t_GBB_FAILURE_PAGE_get, _nvmectl.SLBT_GBBData_t_GBB_FAILURE_PAGE_set)
    __swig_setmethods__["GBB_FAILURE_CHUNK"] = _nvmectl.SLBT_GBBData_t_GBB_FAILURE_CHUNK_set
    __swig_getmethods__["GBB_FAILURE_CHUNK"] = _nvmectl.SLBT_GBBData_t_GBB_FAILURE_CHUNK_get
    if _newclass:GBB_FAILURE_CHUNK = _swig_property(_nvmectl.SLBT_GBBData_t_GBB_FAILURE_CHUNK_get, _nvmectl.SLBT_GBBData_t_GBB_FAILURE_CHUNK_set)
    __swig_setmethods__["RESERVED"] = _nvmectl.SLBT_GBBData_t_RESERVED_set
    __swig_getmethods__["RESERVED"] = _nvmectl.SLBT_GBBData_t_RESERVED_get
    if _newclass:RESERVED = _swig_property(_nvmectl.SLBT_GBBData_t_RESERVED_get, _nvmectl.SLBT_GBBData_t_RESERVED_set)
    def __init__(self): 
        this = _nvmectl.new_SLBT_GBBData_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_SLBT_GBBData_t
    __del__ = lambda self : None;
SLBT_GBBData_t_swigregister = _nvmectl.SLBT_GBBData_t_swigregister
SLBT_GBBData_t_swigregister(SLBT_GBBData_t)

class slbt_temp_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, slbt_temp_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, slbt_temp_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["MIN"] = _nvmectl.slbt_temp_data_MIN_set
    __swig_getmethods__["MIN"] = _nvmectl.slbt_temp_data_MIN_get
    if _newclass:MIN = _swig_property(_nvmectl.slbt_temp_data_MIN_get, _nvmectl.slbt_temp_data_MIN_set)
    __swig_setmethods__["MAX"] = _nvmectl.slbt_temp_data_MAX_set
    __swig_getmethods__["MAX"] = _nvmectl.slbt_temp_data_MAX_get
    if _newclass:MAX = _swig_property(_nvmectl.slbt_temp_data_MAX_get, _nvmectl.slbt_temp_data_MAX_set)
    __swig_setmethods__["AVG"] = _nvmectl.slbt_temp_data_AVG_set
    __swig_getmethods__["AVG"] = _nvmectl.slbt_temp_data_AVG_get
    if _newclass:AVG = _swig_property(_nvmectl.slbt_temp_data_AVG_get, _nvmectl.slbt_temp_data_AVG_set)
    def __init__(self): 
        this = _nvmectl.new_slbt_temp_data()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_slbt_temp_data
    __del__ = lambda self : None;
slbt_temp_data_swigregister = _nvmectl.slbt_temp_data_swigregister
slbt_temp_data_swigregister(slbt_temp_data)

class SLBT_TLV_TO_NAND_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SLBT_TLV_TO_NAND_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SLBT_TLV_TO_NAND_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["MAGIC"] = _nvmectl.SLBT_TLV_TO_NAND_t_MAGIC_set
    __swig_getmethods__["MAGIC"] = _nvmectl.SLBT_TLV_TO_NAND_t_MAGIC_get
    if _newclass:MAGIC = _swig_property(_nvmectl.SLBT_TLV_TO_NAND_t_MAGIC_get, _nvmectl.SLBT_TLV_TO_NAND_t_MAGIC_set)
    __swig_setmethods__["AMOUNT_OF_CYCLES_FROM_SOL"] = _nvmectl.SLBT_TLV_TO_NAND_t_AMOUNT_OF_CYCLES_FROM_SOL_set
    __swig_getmethods__["AMOUNT_OF_CYCLES_FROM_SOL"] = _nvmectl.SLBT_TLV_TO_NAND_t_AMOUNT_OF_CYCLES_FROM_SOL_get
    if _newclass:AMOUNT_OF_CYCLES_FROM_SOL = _swig_property(_nvmectl.SLBT_TLV_TO_NAND_t_AMOUNT_OF_CYCLES_FROM_SOL_get, _nvmectl.SLBT_TLV_TO_NAND_t_AMOUNT_OF_CYCLES_FROM_SOL_set)
    __swig_setmethods__["AMOUNT_OF_SLBT_RUN"] = _nvmectl.SLBT_TLV_TO_NAND_t_AMOUNT_OF_SLBT_RUN_set
    __swig_getmethods__["AMOUNT_OF_SLBT_RUN"] = _nvmectl.SLBT_TLV_TO_NAND_t_AMOUNT_OF_SLBT_RUN_get
    if _newclass:AMOUNT_OF_SLBT_RUN = _swig_property(_nvmectl.SLBT_TLV_TO_NAND_t_AMOUNT_OF_SLBT_RUN_get, _nvmectl.SLBT_TLV_TO_NAND_t_AMOUNT_OF_SLBT_RUN_set)
    __swig_setmethods__["DRIVE_INFO"] = _nvmectl.SLBT_TLV_TO_NAND_t_DRIVE_INFO_set
    __swig_getmethods__["DRIVE_INFO"] = _nvmectl.SLBT_TLV_TO_NAND_t_DRIVE_INFO_get
    if _newclass:DRIVE_INFO = _swig_property(_nvmectl.SLBT_TLV_TO_NAND_t_DRIVE_INFO_get, _nvmectl.SLBT_TLV_TO_NAND_t_DRIVE_INFO_set)
    __swig_setmethods__["U_CYCLES"] = _nvmectl.SLBT_TLV_TO_NAND_t_U_CYCLES_set
    __swig_getmethods__["U_CYCLES"] = _nvmectl.SLBT_TLV_TO_NAND_t_U_CYCLES_get
    if _newclass:U_CYCLES = _swig_property(_nvmectl.SLBT_TLV_TO_NAND_t_U_CYCLES_get, _nvmectl.SLBT_TLV_TO_NAND_t_U_CYCLES_set)
    __swig_setmethods__["U_SERIAL_CYCLE0"] = _nvmectl.SLBT_TLV_TO_NAND_t_U_SERIAL_CYCLE0_set
    __swig_getmethods__["U_SERIAL_CYCLE0"] = _nvmectl.SLBT_TLV_TO_NAND_t_U_SERIAL_CYCLE0_get
    if _newclass:U_SERIAL_CYCLE0 = _swig_property(_nvmectl.SLBT_TLV_TO_NAND_t_U_SERIAL_CYCLE0_get, _nvmectl.SLBT_TLV_TO_NAND_t_U_SERIAL_CYCLE0_set)
    __swig_setmethods__["U_SERIAL_CYCLE1"] = _nvmectl.SLBT_TLV_TO_NAND_t_U_SERIAL_CYCLE1_set
    __swig_getmethods__["U_SERIAL_CYCLE1"] = _nvmectl.SLBT_TLV_TO_NAND_t_U_SERIAL_CYCLE1_get
    if _newclass:U_SERIAL_CYCLE1 = _swig_property(_nvmectl.SLBT_TLV_TO_NAND_t_U_SERIAL_CYCLE1_get, _nvmectl.SLBT_TLV_TO_NAND_t_U_SERIAL_CYCLE1_set)
    __swig_setmethods__["U_SERIAL_CYCLE2"] = _nvmectl.SLBT_TLV_TO_NAND_t_U_SERIAL_CYCLE2_set
    __swig_getmethods__["U_SERIAL_CYCLE2"] = _nvmectl.SLBT_TLV_TO_NAND_t_U_SERIAL_CYCLE2_get
    if _newclass:U_SERIAL_CYCLE2 = _swig_property(_nvmectl.SLBT_TLV_TO_NAND_t_U_SERIAL_CYCLE2_get, _nvmectl.SLBT_TLV_TO_NAND_t_U_SERIAL_CYCLE2_set)
    __swig_setmethods__["U_OPEN_BLOCK_CYCLE0"] = _nvmectl.SLBT_TLV_TO_NAND_t_U_OPEN_BLOCK_CYCLE0_set
    __swig_getmethods__["U_OPEN_BLOCK_CYCLE0"] = _nvmectl.SLBT_TLV_TO_NAND_t_U_OPEN_BLOCK_CYCLE0_get
    if _newclass:U_OPEN_BLOCK_CYCLE0 = _swig_property(_nvmectl.SLBT_TLV_TO_NAND_t_U_OPEN_BLOCK_CYCLE0_get, _nvmectl.SLBT_TLV_TO_NAND_t_U_OPEN_BLOCK_CYCLE0_set)
    __swig_setmethods__["U_OPEN_BLOCK_CYCLE1"] = _nvmectl.SLBT_TLV_TO_NAND_t_U_OPEN_BLOCK_CYCLE1_set
    __swig_getmethods__["U_OPEN_BLOCK_CYCLE1"] = _nvmectl.SLBT_TLV_TO_NAND_t_U_OPEN_BLOCK_CYCLE1_get
    if _newclass:U_OPEN_BLOCK_CYCLE1 = _swig_property(_nvmectl.SLBT_TLV_TO_NAND_t_U_OPEN_BLOCK_CYCLE1_get, _nvmectl.SLBT_TLV_TO_NAND_t_U_OPEN_BLOCK_CYCLE1_set)
    __swig_setmethods__["U_SP_DELAY_CYCLE"] = _nvmectl.SLBT_TLV_TO_NAND_t_U_SP_DELAY_CYCLE_set
    __swig_getmethods__["U_SP_DELAY_CYCLE"] = _nvmectl.SLBT_TLV_TO_NAND_t_U_SP_DELAY_CYCLE_get
    if _newclass:U_SP_DELAY_CYCLE = _swig_property(_nvmectl.SLBT_TLV_TO_NAND_t_U_SP_DELAY_CYCLE_get, _nvmectl.SLBT_TLV_TO_NAND_t_U_SP_DELAY_CYCLE_set)
    __swig_setmethods__["U_CYCLE_PCT"] = _nvmectl.SLBT_TLV_TO_NAND_t_U_CYCLE_PCT_set
    __swig_getmethods__["U_CYCLE_PCT"] = _nvmectl.SLBT_TLV_TO_NAND_t_U_CYCLE_PCT_get
    if _newclass:U_CYCLE_PCT = _swig_property(_nvmectl.SLBT_TLV_TO_NAND_t_U_CYCLE_PCT_get, _nvmectl.SLBT_TLV_TO_NAND_t_U_CYCLE_PCT_set)
    __swig_setmethods__["U_START_BLOCK"] = _nvmectl.SLBT_TLV_TO_NAND_t_U_START_BLOCK_set
    __swig_getmethods__["U_START_BLOCK"] = _nvmectl.SLBT_TLV_TO_NAND_t_U_START_BLOCK_get
    if _newclass:U_START_BLOCK = _swig_property(_nvmectl.SLBT_TLV_TO_NAND_t_U_START_BLOCK_get, _nvmectl.SLBT_TLV_TO_NAND_t_U_START_BLOCK_set)
    __swig_setmethods__["U_END_BLOCK"] = _nvmectl.SLBT_TLV_TO_NAND_t_U_END_BLOCK_set
    __swig_getmethods__["U_END_BLOCK"] = _nvmectl.SLBT_TLV_TO_NAND_t_U_END_BLOCK_get
    if _newclass:U_END_BLOCK = _swig_property(_nvmectl.SLBT_TLV_TO_NAND_t_U_END_BLOCK_get, _nvmectl.SLBT_TLV_TO_NAND_t_U_END_BLOCK_set)
    __swig_setmethods__["CYCLES_STATISTICS_TABLE"] = _nvmectl.SLBT_TLV_TO_NAND_t_CYCLES_STATISTICS_TABLE_set
    __swig_getmethods__["CYCLES_STATISTICS_TABLE"] = _nvmectl.SLBT_TLV_TO_NAND_t_CYCLES_STATISTICS_TABLE_get
    if _newclass:CYCLES_STATISTICS_TABLE = _swig_property(_nvmectl.SLBT_TLV_TO_NAND_t_CYCLES_STATISTICS_TABLE_get, _nvmectl.SLBT_TLV_TO_NAND_t_CYCLES_STATISTICS_TABLE_set)
    __swig_setmethods__["TOTAL_NUMBER_OF_ERRORS_DESCRIBED"] = _nvmectl.SLBT_TLV_TO_NAND_t_TOTAL_NUMBER_OF_ERRORS_DESCRIBED_set
    __swig_getmethods__["TOTAL_NUMBER_OF_ERRORS_DESCRIBED"] = _nvmectl.SLBT_TLV_TO_NAND_t_TOTAL_NUMBER_OF_ERRORS_DESCRIBED_get
    if _newclass:TOTAL_NUMBER_OF_ERRORS_DESCRIBED = _swig_property(_nvmectl.SLBT_TLV_TO_NAND_t_TOTAL_NUMBER_OF_ERRORS_DESCRIBED_get, _nvmectl.SLBT_TLV_TO_NAND_t_TOTAL_NUMBER_OF_ERRORS_DESCRIBED_set)
    __swig_setmethods__["BLOCK_TO_SAVE_SLBT_DATA"] = _nvmectl.SLBT_TLV_TO_NAND_t_BLOCK_TO_SAVE_SLBT_DATA_set
    __swig_getmethods__["BLOCK_TO_SAVE_SLBT_DATA"] = _nvmectl.SLBT_TLV_TO_NAND_t_BLOCK_TO_SAVE_SLBT_DATA_get
    if _newclass:BLOCK_TO_SAVE_SLBT_DATA = _swig_property(_nvmectl.SLBT_TLV_TO_NAND_t_BLOCK_TO_SAVE_SLBT_DATA_get, _nvmectl.SLBT_TLV_TO_NAND_t_BLOCK_TO_SAVE_SLBT_DATA_set)
    __swig_setmethods__["ERRORS_LIST"] = _nvmectl.SLBT_TLV_TO_NAND_t_ERRORS_LIST_set
    __swig_getmethods__["ERRORS_LIST"] = _nvmectl.SLBT_TLV_TO_NAND_t_ERRORS_LIST_get
    if _newclass:ERRORS_LIST = _swig_property(_nvmectl.SLBT_TLV_TO_NAND_t_ERRORS_LIST_get, _nvmectl.SLBT_TLV_TO_NAND_t_ERRORS_LIST_set)
    __swig_setmethods__["TEMP_DATA"] = _nvmectl.SLBT_TLV_TO_NAND_t_TEMP_DATA_set
    __swig_getmethods__["TEMP_DATA"] = _nvmectl.SLBT_TLV_TO_NAND_t_TEMP_DATA_get
    if _newclass:TEMP_DATA = _swig_property(_nvmectl.SLBT_TLV_TO_NAND_t_TEMP_DATA_get, _nvmectl.SLBT_TLV_TO_NAND_t_TEMP_DATA_set)
    __swig_setmethods__["RESERVED1"] = _nvmectl.SLBT_TLV_TO_NAND_t_RESERVED1_set
    __swig_getmethods__["RESERVED1"] = _nvmectl.SLBT_TLV_TO_NAND_t_RESERVED1_get
    if _newclass:RESERVED1 = _swig_property(_nvmectl.SLBT_TLV_TO_NAND_t_RESERVED1_get, _nvmectl.SLBT_TLV_TO_NAND_t_RESERVED1_set)
    __swig_setmethods__["RESERVED2"] = _nvmectl.SLBT_TLV_TO_NAND_t_RESERVED2_set
    __swig_getmethods__["RESERVED2"] = _nvmectl.SLBT_TLV_TO_NAND_t_RESERVED2_get
    if _newclass:RESERVED2 = _swig_property(_nvmectl.SLBT_TLV_TO_NAND_t_RESERVED2_get, _nvmectl.SLBT_TLV_TO_NAND_t_RESERVED2_set)
    def __init__(self): 
        this = _nvmectl.new_SLBT_TLV_TO_NAND_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_SLBT_TLV_TO_NAND_t
    __del__ = lambda self : None;
SLBT_TLV_TO_NAND_t_swigregister = _nvmectl.SLBT_TLV_TO_NAND_t_swigregister
SLBT_TLV_TO_NAND_t_swigregister(SLBT_TLV_TO_NAND_t)

class NVMeRWCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NVMeRWCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NVMeRWCommand, name)
    __repr__ = _swig_repr
    __swig_setmethods__["queueID"] = _nvmectl.NVMeRWCommand_queueID_set
    __swig_getmethods__["queueID"] = _nvmectl.NVMeRWCommand_queueID_get
    if _newclass:queueID = _swig_property(_nvmectl.NVMeRWCommand_queueID_get, _nvmectl.NVMeRWCommand_queueID_set)
    __swig_setmethods__["buffer"] = _nvmectl.NVMeRWCommand_buffer_set
    __swig_getmethods__["buffer"] = _nvmectl.NVMeRWCommand_buffer_get
    if _newclass:buffer = _swig_property(_nvmectl.NVMeRWCommand_buffer_get, _nvmectl.NVMeRWCommand_buffer_set)
    __swig_setmethods__["nameSpace"] = _nvmectl.NVMeRWCommand_nameSpace_set
    __swig_getmethods__["nameSpace"] = _nvmectl.NVMeRWCommand_nameSpace_get
    if _newclass:nameSpace = _swig_property(_nvmectl.NVMeRWCommand_nameSpace_get, _nvmectl.NVMeRWCommand_nameSpace_set)
    __swig_setmethods__["startLBA"] = _nvmectl.NVMeRWCommand_startLBA_set
    __swig_getmethods__["startLBA"] = _nvmectl.NVMeRWCommand_startLBA_get
    if _newclass:startLBA = _swig_property(_nvmectl.NVMeRWCommand_startLBA_get, _nvmectl.NVMeRWCommand_startLBA_set)
    __swig_setmethods__["numBlocks"] = _nvmectl.NVMeRWCommand_numBlocks_set
    __swig_getmethods__["numBlocks"] = _nvmectl.NVMeRWCommand_numBlocks_get
    if _newclass:numBlocks = _swig_property(_nvmectl.NVMeRWCommand_numBlocks_get, _nvmectl.NVMeRWCommand_numBlocks_set)
    __swig_setmethods__["priority"] = _nvmectl.NVMeRWCommand_priority_set
    __swig_getmethods__["priority"] = _nvmectl.NVMeRWCommand_priority_get
    if _newclass:priority = _swig_property(_nvmectl.NVMeRWCommand_priority_get, _nvmectl.NVMeRWCommand_priority_set)
    __swig_setmethods__["passive"] = _nvmectl.NVMeRWCommand_passive_set
    __swig_getmethods__["passive"] = _nvmectl.NVMeRWCommand_passive_get
    if _newclass:passive = _swig_property(_nvmectl.NVMeRWCommand_passive_get, _nvmectl.NVMeRWCommand_passive_set)
    __swig_setmethods__["synchronous"] = _nvmectl.NVMeRWCommand_synchronous_set
    __swig_getmethods__["synchronous"] = _nvmectl.NVMeRWCommand_synchronous_get
    if _newclass:synchronous = _swig_property(_nvmectl.NVMeRWCommand_synchronous_get, _nvmectl.NVMeRWCommand_synchronous_set)
    __swig_setmethods__["accessFrequency"] = _nvmectl.NVMeRWCommand_accessFrequency_set
    __swig_getmethods__["accessFrequency"] = _nvmectl.NVMeRWCommand_accessFrequency_get
    if _newclass:accessFrequency = _swig_property(_nvmectl.NVMeRWCommand_accessFrequency_get, _nvmectl.NVMeRWCommand_accessFrequency_set)
    __swig_setmethods__["accessLatency"] = _nvmectl.NVMeRWCommand_accessLatency_set
    __swig_getmethods__["accessLatency"] = _nvmectl.NVMeRWCommand_accessLatency_get
    if _newclass:accessLatency = _swig_property(_nvmectl.NVMeRWCommand_accessLatency_get, _nvmectl.NVMeRWCommand_accessLatency_set)
    __swig_setmethods__["key"] = _nvmectl.NVMeRWCommand_key_set
    __swig_getmethods__["key"] = _nvmectl.NVMeRWCommand_key_get
    if _newclass:key = _swig_property(_nvmectl.NVMeRWCommand_key_get, _nvmectl.NVMeRWCommand_key_set)
    __swig_setmethods__["keyLength"] = _nvmectl.NVMeRWCommand_keyLength_set
    __swig_getmethods__["keyLength"] = _nvmectl.NVMeRWCommand_keyLength_get
    if _newclass:keyLength = _swig_property(_nvmectl.NVMeRWCommand_keyLength_get, _nvmectl.NVMeRWCommand_keyLength_set)
    __swig_setmethods__["wrapped"] = _nvmectl.NVMeRWCommand_wrapped_set
    __swig_getmethods__["wrapped"] = _nvmectl.NVMeRWCommand_wrapped_get
    if _newclass:wrapped = _swig_property(_nvmectl.NVMeRWCommand_wrapped_get, _nvmectl.NVMeRWCommand_wrapped_set)
    __swig_setmethods__["initVector"] = _nvmectl.NVMeRWCommand_initVector_set
    __swig_getmethods__["initVector"] = _nvmectl.NVMeRWCommand_initVector_get
    if _newclass:initVector = _swig_property(_nvmectl.NVMeRWCommand_initVector_get, _nvmectl.NVMeRWCommand_initVector_set)
    __swig_setmethods__["securityMode"] = _nvmectl.NVMeRWCommand_securityMode_set
    __swig_getmethods__["securityMode"] = _nvmectl.NVMeRWCommand_securityMode_get
    if _newclass:securityMode = _swig_property(_nvmectl.NVMeRWCommand_securityMode_get, _nvmectl.NVMeRWCommand_securityMode_set)
    def __init__(self): 
        this = _nvmectl.new_NVMeRWCommand()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_NVMeRWCommand
    __del__ = lambda self : None;
NVMeRWCommand_swigregister = _nvmectl.NVMeRWCommand_swigregister
NVMeRWCommand_swigregister(NVMeRWCommand)

kMaxConfigurableMSP = _nvmectl.kMaxConfigurableMSP
kMaxConfigurableBuses = _nvmectl.kMaxConfigurableBuses
kMaxConfigurableDiesPerChannel = _nvmectl.kMaxConfigurableDiesPerChannel
class NANDGeomV2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NANDGeomV2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NANDGeomV2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["GEOM_VER"] = _nvmectl.NANDGeomV2_GEOM_VER_set
    __swig_getmethods__["GEOM_VER"] = _nvmectl.NANDGeomV2_GEOM_VER_get
    if _newclass:GEOM_VER = _swig_property(_nvmectl.NANDGeomV2_GEOM_VER_get, _nvmectl.NANDGeomV2_GEOM_VER_set)
    __swig_setmethods__["CAU_PER_DIE"] = _nvmectl.NANDGeomV2_CAU_PER_DIE_set
    __swig_getmethods__["CAU_PER_DIE"] = _nvmectl.NANDGeomV2_CAU_PER_DIE_get
    if _newclass:CAU_PER_DIE = _swig_property(_nvmectl.NANDGeomV2_CAU_PER_DIE_get, _nvmectl.NANDGeomV2_CAU_PER_DIE_set)
    __swig_setmethods__["NUM_BUS"] = _nvmectl.NANDGeomV2_NUM_BUS_set
    __swig_getmethods__["NUM_BUS"] = _nvmectl.NANDGeomV2_NUM_BUS_get
    if _newclass:NUM_BUS = _swig_property(_nvmectl.NANDGeomV2_NUM_BUS_get, _nvmectl.NANDGeomV2_NUM_BUS_set)
    __swig_setmethods__["NUM_DIP"] = _nvmectl.NANDGeomV2_NUM_DIP_set
    __swig_getmethods__["NUM_DIP"] = _nvmectl.NANDGeomV2_NUM_DIP_get
    if _newclass:NUM_DIP = _swig_property(_nvmectl.NANDGeomV2_NUM_DIP_get, _nvmectl.NANDGeomV2_NUM_DIP_set)
    __swig_setmethods__["NUM_BANDS"] = _nvmectl.NANDGeomV2_NUM_BANDS_set
    __swig_getmethods__["NUM_BANDS"] = _nvmectl.NANDGeomV2_NUM_BANDS_get
    if _newclass:NUM_BANDS = _swig_property(_nvmectl.NANDGeomV2_NUM_BANDS_get, _nvmectl.NANDGeomV2_NUM_BANDS_set)
    __swig_setmethods__["SEC_PER_PAGE"] = _nvmectl.NANDGeomV2_SEC_PER_PAGE_set
    __swig_getmethods__["SEC_PER_PAGE"] = _nvmectl.NANDGeomV2_SEC_PER_PAGE_get
    if _newclass:SEC_PER_PAGE = _swig_property(_nvmectl.NANDGeomV2_SEC_PER_PAGE_get, _nvmectl.NANDGeomV2_SEC_PER_PAGE_set)
    __swig_setmethods__["SEC_PER_FULL_BAND"] = _nvmectl.NANDGeomV2_SEC_PER_FULL_BAND_set
    __swig_getmethods__["SEC_PER_FULL_BAND"] = _nvmectl.NANDGeomV2_SEC_PER_FULL_BAND_get
    if _newclass:SEC_PER_FULL_BAND = _swig_property(_nvmectl.NANDGeomV2_SEC_PER_FULL_BAND_get, _nvmectl.NANDGeomV2_SEC_PER_FULL_BAND_set)
    __swig_setmethods__["SEC_PER_FULL_BAND_SLC"] = _nvmectl.NANDGeomV2_SEC_PER_FULL_BAND_SLC_set
    __swig_getmethods__["SEC_PER_FULL_BAND_SLC"] = _nvmectl.NANDGeomV2_SEC_PER_FULL_BAND_SLC_get
    if _newclass:SEC_PER_FULL_BAND_SLC = _swig_property(_nvmectl.NANDGeomV2_SEC_PER_FULL_BAND_SLC_get, _nvmectl.NANDGeomV2_SEC_PER_FULL_BAND_SLC_set)
    __swig_setmethods__["BYTES_PER_SEC_META"] = _nvmectl.NANDGeomV2_BYTES_PER_SEC_META_set
    __swig_getmethods__["BYTES_PER_SEC_META"] = _nvmectl.NANDGeomV2_BYTES_PER_SEC_META_get
    if _newclass:BYTES_PER_SEC_META = _swig_property(_nvmectl.NANDGeomV2_BYTES_PER_SEC_META_get, _nvmectl.NANDGeomV2_BYTES_PER_SEC_META_set)
    __swig_setmethods__["PAGES_PER_BLOCK"] = _nvmectl.NANDGeomV2_PAGES_PER_BLOCK_set
    __swig_getmethods__["PAGES_PER_BLOCK"] = _nvmectl.NANDGeomV2_PAGES_PER_BLOCK_get
    if _newclass:PAGES_PER_BLOCK = _swig_property(_nvmectl.NANDGeomV2_PAGES_PER_BLOCK_get, _nvmectl.NANDGeomV2_PAGES_PER_BLOCK_set)
    __swig_setmethods__["PAGES_PER_BLOCK_SLC"] = _nvmectl.NANDGeomV2_PAGES_PER_BLOCK_SLC_set
    __swig_getmethods__["PAGES_PER_BLOCK_SLC"] = _nvmectl.NANDGeomV2_PAGES_PER_BLOCK_SLC_get
    if _newclass:PAGES_PER_BLOCK_SLC = _swig_property(_nvmectl.NANDGeomV2_PAGES_PER_BLOCK_SLC_get, _nvmectl.NANDGeomV2_PAGES_PER_BLOCK_SLC_set)
    __swig_setmethods__["PAGES_PER_BLOCK0"] = _nvmectl.NANDGeomV2_PAGES_PER_BLOCK0_set
    __swig_getmethods__["PAGES_PER_BLOCK0"] = _nvmectl.NANDGeomV2_PAGES_PER_BLOCK0_get
    if _newclass:PAGES_PER_BLOCK0 = _swig_property(_nvmectl.NANDGeomV2_PAGES_PER_BLOCK0_get, _nvmectl.NANDGeomV2_PAGES_PER_BLOCK0_set)
    __swig_setmethods__["CELL_TYPE"] = _nvmectl.NANDGeomV2_CELL_TYPE_set
    __swig_getmethods__["CELL_TYPE"] = _nvmectl.NANDGeomV2_CELL_TYPE_get
    if _newclass:CELL_TYPE = _swig_property(_nvmectl.NANDGeomV2_CELL_TYPE_get, _nvmectl.NANDGeomV2_CELL_TYPE_set)
    __swig_setmethods__["PAGES_IN_READ_VERIFY"] = _nvmectl.NANDGeomV2_PAGES_IN_READ_VERIFY_set
    __swig_getmethods__["PAGES_IN_READ_VERIFY"] = _nvmectl.NANDGeomV2_PAGES_IN_READ_VERIFY_get
    if _newclass:PAGES_IN_READ_VERIFY = _swig_property(_nvmectl.NANDGeomV2_PAGES_IN_READ_VERIFY_get, _nvmectl.NANDGeomV2_PAGES_IN_READ_VERIFY_set)
    __swig_setmethods__["EOL_BLOCKS"] = _nvmectl.NANDGeomV2_EOL_BLOCKS_set
    __swig_getmethods__["EOL_BLOCKS"] = _nvmectl.NANDGeomV2_EOL_BLOCKS_get
    if _newclass:EOL_BLOCKS = _swig_property(_nvmectl.NANDGeomV2_EOL_BLOCKS_get, _nvmectl.NANDGeomV2_EOL_BLOCKS_set)
    __swig_setmethods__["BLOCK_PAIRING_SCHEME"] = _nvmectl.NANDGeomV2_BLOCK_PAIRING_SCHEME_set
    __swig_getmethods__["BLOCK_PAIRING_SCHEME"] = _nvmectl.NANDGeomV2_BLOCK_PAIRING_SCHEME_get
    if _newclass:BLOCK_PAIRING_SCHEME = _swig_property(_nvmectl.NANDGeomV2_BLOCK_PAIRING_SCHEME_get, _nvmectl.NANDGeomV2_BLOCK_PAIRING_SCHEME_set)
    __swig_setmethods__["PROGRAM_SCHEME"] = _nvmectl.NANDGeomV2_PROGRAM_SCHEME_set
    __swig_getmethods__["PROGRAM_SCHEME"] = _nvmectl.NANDGeomV2_PROGRAM_SCHEME_get
    if _newclass:PROGRAM_SCHEME = _swig_property(_nvmectl.NANDGeomV2_PROGRAM_SCHEME_get, _nvmectl.NANDGeomV2_PROGRAM_SCHEME_set)
    __swig_setmethods__["PAGES_IN_READ_VERIFY_REDUCED"] = _nvmectl.NANDGeomV2_PAGES_IN_READ_VERIFY_REDUCED_set
    __swig_getmethods__["PAGES_IN_READ_VERIFY_REDUCED"] = _nvmectl.NANDGeomV2_PAGES_IN_READ_VERIFY_REDUCED_get
    if _newclass:PAGES_IN_READ_VERIFY_REDUCED = _swig_property(_nvmectl.NANDGeomV2_PAGES_IN_READ_VERIFY_REDUCED_get, _nvmectl.NANDGeomV2_PAGES_IN_READ_VERIFY_REDUCED_set)
    __swig_setmethods__["SLC_PAGES_IN_READ_VERIFY"] = _nvmectl.NANDGeomV2_SLC_PAGES_IN_READ_VERIFY_set
    __swig_getmethods__["SLC_PAGES_IN_READ_VERIFY"] = _nvmectl.NANDGeomV2_SLC_PAGES_IN_READ_VERIFY_get
    if _newclass:SLC_PAGES_IN_READ_VERIFY = _swig_property(_nvmectl.NANDGeomV2_SLC_PAGES_IN_READ_VERIFY_get, _nvmectl.NANDGeomV2_SLC_PAGES_IN_READ_VERIFY_set)
    __swig_setmethods__["SLC_PAGES_IN_READ_VERIFY_REDUCED"] = _nvmectl.NANDGeomV2_SLC_PAGES_IN_READ_VERIFY_REDUCED_set
    __swig_getmethods__["SLC_PAGES_IN_READ_VERIFY_REDUCED"] = _nvmectl.NANDGeomV2_SLC_PAGES_IN_READ_VERIFY_REDUCED_get
    if _newclass:SLC_PAGES_IN_READ_VERIFY_REDUCED = _swig_property(_nvmectl.NANDGeomV2_SLC_PAGES_IN_READ_VERIFY_REDUCED_get, _nvmectl.NANDGeomV2_SLC_PAGES_IN_READ_VERIFY_REDUCED_set)
    __swig_setmethods__["FIRST_BUS_IN_MSP"] = _nvmectl.NANDGeomV2_FIRST_BUS_IN_MSP_set
    __swig_getmethods__["FIRST_BUS_IN_MSP"] = _nvmectl.NANDGeomV2_FIRST_BUS_IN_MSP_get
    if _newclass:FIRST_BUS_IN_MSP = _swig_property(_nvmectl.NANDGeomV2_FIRST_BUS_IN_MSP_get, _nvmectl.NANDGeomV2_FIRST_BUS_IN_MSP_set)
    __swig_setmethods__["DIES_PER_BUS"] = _nvmectl.NANDGeomV2_DIES_PER_BUS_set
    __swig_getmethods__["DIES_PER_BUS"] = _nvmectl.NANDGeomV2_DIES_PER_BUS_get
    if _newclass:DIES_PER_BUS = _swig_property(_nvmectl.NANDGeomV2_DIES_PER_BUS_get, _nvmectl.NANDGeomV2_DIES_PER_BUS_set)
    __swig_setmethods__["BUS_TO_MSP"] = _nvmectl.NANDGeomV2_BUS_TO_MSP_set
    __swig_getmethods__["BUS_TO_MSP"] = _nvmectl.NANDGeomV2_BUS_TO_MSP_get
    if _newclass:BUS_TO_MSP = _swig_property(_nvmectl.NANDGeomV2_BUS_TO_MSP_get, _nvmectl.NANDGeomV2_BUS_TO_MSP_set)
    __swig_setmethods__["LUN"] = _nvmectl.NANDGeomV2_LUN_set
    __swig_getmethods__["LUN"] = _nvmectl.NANDGeomV2_LUN_get
    if _newclass:LUN = _swig_property(_nvmectl.NANDGeomV2_LUN_get, _nvmectl.NANDGeomV2_LUN_set)
    def __init__(self): 
        this = _nvmectl.new_NANDGeomV2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_NANDGeomV2
    __del__ = lambda self : None;
NANDGeomV2_swigregister = _nvmectl.NANDGeomV2_swigregister
NANDGeomV2_swigregister(NANDGeomV2)

class NANDGeomV2Struct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NANDGeomV2Struct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NANDGeomV2Struct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["GEOM"] = _nvmectl.NANDGeomV2Struct_GEOM_set
    __swig_getmethods__["GEOM"] = _nvmectl.NANDGeomV2Struct_GEOM_get
    if _newclass:GEOM = _swig_property(_nvmectl.NANDGeomV2Struct_GEOM_get, _nvmectl.NANDGeomV2Struct_GEOM_set)
    __swig_setmethods__["PADDING"] = _nvmectl.NANDGeomV2Struct_PADDING_set
    __swig_getmethods__["PADDING"] = _nvmectl.NANDGeomV2Struct_PADDING_get
    if _newclass:PADDING = _swig_property(_nvmectl.NANDGeomV2Struct_PADDING_get, _nvmectl.NANDGeomV2Struct_PADDING_set)
    def __init__(self): 
        this = _nvmectl.new_NANDGeomV2Struct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_NANDGeomV2Struct
    __del__ = lambda self : None;
NANDGeomV2Struct_swigregister = _nvmectl.NANDGeomV2Struct_swigregister
NANDGeomV2Struct_swigregister(NANDGeomV2Struct)

class NVMeCTL(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NVMeCTL, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NVMeCTL, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _nvmectl.new_NVMeCTL(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_NVMeCTL
    __del__ = lambda self : None;
    __swig_getmethods__["GetNVMeDriverVersion"] = lambda x: _nvmectl.NVMeCTL_GetNVMeDriverVersion
    if _newclass:GetNVMeDriverVersion = staticmethod(_nvmectl.NVMeCTL_GetNVMeDriverVersion)
    __swig_getmethods__["GetNVMePassThroughVersion"] = lambda x: _nvmectl.NVMeCTL_GetNVMePassThroughVersion
    if _newclass:GetNVMePassThroughVersion = staticmethod(_nvmectl.NVMeCTL_GetNVMePassThroughVersion)
    __swig_getmethods__["GetIdentifyString"] = lambda x: _nvmectl.NVMeCTL_GetIdentifyString
    if _newclass:GetIdentifyString = staticmethod(_nvmectl.NVMeCTL_GetIdentifyString)
    __swig_getmethods__["NVMeStatusString"] = lambda x: _nvmectl.NVMeCTL_NVMeStatusString
    if _newclass:NVMeStatusString = staticmethod(_nvmectl.NVMeCTL_NVMeStatusString)
    __swig_getmethods__["SystemStatusString"] = lambda x: _nvmectl.NVMeCTL_SystemStatusString
    if _newclass:SystemStatusString = staticmethod(_nvmectl.NVMeCTL_SystemStatusString)
    __swig_getmethods__["GetFieldCounters"] = lambda x: _nvmectl.NVMeCTL_GetFieldCounters
    if _newclass:GetFieldCounters = staticmethod(_nvmectl.NVMeCTL_GetFieldCounters)
    __swig_getmethods__["SetDebug"] = lambda x: _nvmectl.NVMeCTL_SetDebug
    if _newclass:SetDebug = staticmethod(_nvmectl.NVMeCTL_SetDebug)
    def AllocNVMeBuffer(self, *args): return _nvmectl.NVMeCTL_AllocNVMeBuffer(self, *args)
    def ReleaseNVMeBuffer(self, *args): return _nvmectl.NVMeCTL_ReleaseNVMeBuffer(self, *args)
    __swig_getmethods__["GetDevices"] = lambda x: _nvmectl.NVMeCTL_GetDevices
    if _newclass:GetDevices = staticmethod(_nvmectl.NVMeCTL_GetDevices)
    def GetDeviceType(self): return _nvmectl.NVMeCTL_GetDeviceType(self)
    def ReadRegister32(self, *args): return _nvmectl.NVMeCTL_ReadRegister32(self, *args)
    def WriteRegister32(self, *args): return _nvmectl.NVMeCTL_WriteRegister32(self, *args)
    def ConfigRead32(self, *args): return _nvmectl.NVMeCTL_ConfigRead32(self, *args)
    def ConfigWrite32(self, *args): return _nvmectl.NVMeCTL_ConfigWrite32(self, *args)
    def ReadRegister64(self, *args): return _nvmectl.NVMeCTL_ReadRegister64(self, *args)
    def WriteRegister64(self, *args): return _nvmectl.NVMeCTL_WriteRegister64(self, *args)
    def ReadMMIORange(self, *args): return _nvmectl.NVMeCTL_ReadMMIORange(self, *args)
    def WriteMMIORange(self, *args): return _nvmectl.NVMeCTL_WriteMMIORange(self, *args)
    def GetRandomChallenge(self, *args): return _nvmectl.NVMeCTL_GetRandomChallenge(self, *args)
    def DebugUnlock(self, *args): return _nvmectl.NVMeCTL_DebugUnlock(self, *args)
    def S1XSysCountersUnlock(self): return _nvmectl.NVMeCTL_S1XSysCountersUnlock(self)
    def InitController(self): return _nvmectl.NVMeCTL_InitController(self)
    def ShutdownController(self, *args): return _nvmectl.NVMeCTL_ShutdownController(self, *args)
    def SavePCI(self): return _nvmectl.NVMeCTL_SavePCI(self)
    def RestorePCI(self): return _nvmectl.NVMeCTL_RestorePCI(self)
    def InitDriver(self): return _nvmectl.NVMeCTL_InitDriver(self)
    def AbortAllRequests(self): return _nvmectl.NVMeCTL_AbortAllRequests(self)
    def SetQueueFrozen(self, *args): return _nvmectl.NVMeCTL_SetQueueFrozen(self, *args)
    def DeleteSQ(self, *args): return _nvmectl.NVMeCTL_DeleteSQ(self, *args)
    def DeleteCQ(self, *args): return _nvmectl.NVMeCTL_DeleteCQ(self, *args)
    def FirmwareActivate(self, *args): return _nvmectl.NVMeCTL_FirmwareActivate(self, *args)
    def FirmwareDownload(self, *args): return _nvmectl.NVMeCTL_FirmwareDownload(self, *args)
    def Abort(self, *args): return _nvmectl.NVMeCTL_Abort(self, *args)
    def SetArbitration(self, *args): return _nvmectl.NVMeCTL_SetArbitration(self, *args)
    def SetPowerManagement(self, *args): return _nvmectl.NVMeCTL_SetPowerManagement(self, *args)
    def SetTempThreshold(self, *args): return _nvmectl.NVMeCTL_SetTempThreshold(self, *args)
    def SetErrorRecovery(self, *args): return _nvmectl.NVMeCTL_SetErrorRecovery(self, *args)
    def SetVolatileWriteCache(self, *args): return _nvmectl.NVMeCTL_SetVolatileWriteCache(self, *args)
    def SetNumQueues(self, *args): return _nvmectl.NVMeCTL_SetNumQueues(self, *args)
    def SetThrottling(self, *args): return _nvmectl.NVMeCTL_SetThrottling(self, *args)
    def SetAbruptShutdownTimeout(self, *args): return _nvmectl.NVMeCTL_SetAbruptShutdownTimeout(self, *args)
    def SetInterruptCoalescing(self, *args): return _nvmectl.NVMeCTL_SetInterruptCoalescing(self, *args)
    def SetInterruptVectorConfig(self, *args): return _nvmectl.NVMeCTL_SetInterruptVectorConfig(self, *args)
    def SetWriteAtomicity(self, *args): return _nvmectl.NVMeCTL_SetWriteAtomicity(self, *args)
    def SetAsyncEventConfig(self, *args): return _nvmectl.NVMeCTL_SetAsyncEventConfig(self, *args)
    def SetSWProgressMarker(self, *args): return _nvmectl.NVMeCTL_SetSWProgressMarker(self, *args)
    def GetFeature(self, *args): return _nvmectl.NVMeCTL_GetFeature(self, *args)
    def SetFeature(self, *args): return _nvmectl.NVMeCTL_SetFeature(self, *args)
    def SetPowerBudgetIndex(self, *args): return _nvmectl.NVMeCTL_SetPowerBudgetIndex(self, *args)
    def IdentifyController(self, *args): return _nvmectl.NVMeCTL_IdentifyController(self, *args)
    def IdentifyNamespace(self, *args): return _nvmectl.NVMeCTL_IdentifyNamespace(self, *args)
    def GetLogPage(self, *args): return _nvmectl.NVMeCTL_GetLogPage(self, *args)
    def FormatNVM(self, *args): return _nvmectl.NVMeCTL_FormatNVM(self, *args)
    def Deallocate(self, *args): return _nvmectl.NVMeCTL_Deallocate(self, *args)
    def Flush(self, *args): return _nvmectl.NVMeCTL_Flush(self, *args)
    def Barrier(self, *args): return _nvmectl.NVMeCTL_Barrier(self, *args)
    def Read(self, *args): return _nvmectl.NVMeCTL_Read(self, *args)
    def Write(self, *args): return _nvmectl.NVMeCTL_Write(self, *args)
    def EncryptedRead(self, *args): return _nvmectl.NVMeCTL_EncryptedRead(self, *args)
    def EncryptedWrite(self, *args): return _nvmectl.NVMeCTL_EncryptedWrite(self, *args)
    def ReadStruct(self, *args): return _nvmectl.NVMeCTL_ReadStruct(self, *args)
    def WriteStruct(self, *args): return _nvmectl.NVMeCTL_WriteStruct(self, *args)
    def SetEncryptionParams(self, *args): return _nvmectl.NVMeCTL_SetEncryptionParams(self, *args)
    def AsyncEventRequest(self): return _nvmectl.NVMeCTL_AsyncEventRequest(self)
    def DeleteFirmwareSlot(self, *args): return _nvmectl.NVMeCTL_DeleteFirmwareSlot(self, *args)
    def DebugServiceRead(self, *args): return _nvmectl.NVMeCTL_DebugServiceRead(self, *args)
    def DebugServiceWrite(self, *args): return _nvmectl.NVMeCTL_DebugServiceWrite(self, *args)
    def CLIRead(self, *args): return _nvmectl.NVMeCTL_CLIRead(self, *args)
    def CLIWrite(self, *args): return _nvmectl.NVMeCTL_CLIWrite(self, *args)
    def CLIAuthenticate(self, *args): return _nvmectl.NVMeCTL_CLIAuthenticate(self, *args)
    def ReadDebugLog(self, *args): return _nvmectl.NVMeCTL_ReadDebugLog(self, *args)
    def WriteDebugLog(self, *args): return _nvmectl.NVMeCTL_WriteDebugLog(self, *args)
    def ReadDebugData(self, *args): return _nvmectl.NVMeCTL_ReadDebugData(self, *args)
    def WriteDebugData(self, *args): return _nvmectl.NVMeCTL_WriteDebugData(self, *args)
    def GetCurrentAssert(self): return _nvmectl.NVMeCTL_GetCurrentAssert(self)
    def GetPreviousAssert(self): return _nvmectl.NVMeCTL_GetPreviousAssert(self)
    def GetFAMeta(self, *args): return _nvmectl.NVMeCTL_GetFAMeta(self, *args)
    def GetFATOC(self, *args): return _nvmectl.NVMeCTL_GetFATOC(self, *args)
    def GetFAChunkSize(self, *args): return _nvmectl.NVMeCTL_GetFAChunkSize(self, *args)
    def S1XGetFAData(self, *args): return _nvmectl.NVMeCTL_S1XGetFAData(self, *args)
    def S3XGetFAData(self, *args): return _nvmectl.NVMeCTL_S3XGetFAData(self, *args)
    def GetFAData(self, *args): return _nvmectl.NVMeCTL_GetFAData(self, *args)
    def FADataPurge(self): return _nvmectl.NVMeCTL_FADataPurge(self)
    def GetMSPData(self, *args): return _nvmectl.NVMeCTL_GetMSPData(self, *args)
    def GetMSPRMA(self, *args): return _nvmectl.NVMeCTL_GetMSPRMA(self, *args)
    def GetMSPSweep(self, *args): return _nvmectl.NVMeCTL_GetMSPSweep(self, *args)
    def SendMSPControlRecipe(self, *args): return _nvmectl.NVMeCTL_SendMSPControlRecipe(self, *args)
    def GetS3MSPSweep(self, *args): return _nvmectl.NVMeCTL_GetS3MSPSweep(self, *args)
    def GetNANDGeometry(self, *args): return _nvmectl.NVMeCTL_GetNANDGeometry(self, *args)
    def GetANS2MSPSeed(self, *args): return _nvmectl.NVMeCTL_GetANS2MSPSeed(self, *args)
    def GetANS2Sweep(self, *args): return _nvmectl.NVMeCTL_GetANS2Sweep(self, *args)
    def WriteFADescription(self, *args): return _nvmectl.NVMeCTL_WriteFADescription(self, *args)
    def S1XWriteFAFiles(self, *args): return _nvmectl.NVMeCTL_S1XWriteFAFiles(self, *args)
    __swig_getmethods__["S3XWriteFAFiles"] = lambda x: _nvmectl.NVMeCTL_S3XWriteFAFiles
    if _newclass:S3XWriteFAFiles = staticmethod(_nvmectl.NVMeCTL_S3XWriteFAFiles)
    def WriteFAFiles(self, *args): return _nvmectl.NVMeCTL_WriteFAFiles(self, *args)
    def WriteMSPRMAData(self, *args): return _nvmectl.NVMeCTL_WriteMSPRMAData(self, *args)
    def SetTimestamp(self): return _nvmectl.NVMeCTL_SetTimestamp(self)
    def SetFEParams(self, *args): return _nvmectl.NVMeCTL_SetFEParams(self, *args)
    def GetFEParams(self, *args): return _nvmectl.NVMeCTL_GetFEParams(self, *args)
    def Reprioritize(self, *args): return _nvmectl.NVMeCTL_Reprioritize(self, *args)
    def GetDriverParams(self, *args): return _nvmectl.NVMeCTL_GetDriverParams(self, *args)
    def SetDriverParams(self, *args): return _nvmectl.NVMeCTL_SetDriverParams(self, *args)
    def GetDriverData(self, *args): return _nvmectl.NVMeCTL_GetDriverData(self, *args)
    def CreateBlockStorageDevice(self): return _nvmectl.NVMeCTL_CreateBlockStorageDevice(self)
    def DestroyBlockStorageDevice(self): return _nvmectl.NVMeCTL_DestroyBlockStorageDevice(self)
    def GetBWLimit(self): return _nvmectl.NVMeCTL_GetBWLimit(self)
    def SetBWLimit(self, *args): return _nvmectl.NVMeCTL_SetBWLimit(self, *args)
    __swig_getmethods__["AppendNamespace"] = lambda x: _nvmectl.NVMeCTL_AppendNamespace
    if _newclass:AppendNamespace = staticmethod(_nvmectl.NVMeCTL_AppendNamespace)
    def CreateNamespaces(self, *args): return _nvmectl.NVMeCTL_CreateNamespaces(self, *args)
    def Unmap(self, *args): return _nvmectl.NVMeCTL_Unmap(self, *args)
    def ReadLoggerBuffer(self, *args): return _nvmectl.NVMeCTL_ReadLoggerBuffer(self, *args)
    def GetLoggerCores(self, *args): return _nvmectl.NVMeCTL_GetLoggerCores(self, *args)
    def GetLoggerBufferSize(self, *args): return _nvmectl.NVMeCTL_GetLoggerBufferSize(self, *args)
    def SetHostFWSize(self, *args): return _nvmectl.NVMeCTL_SetHostFWSize(self, *args)
    def BonfireTest(self, *args): return _nvmectl.NVMeCTL_BonfireTest(self, *args)
    def IdentifyStorageDevice(self, *args): return _nvmectl.NVMeCTL_IdentifyStorageDevice(self, *args)
    def Tunnel(self, *args): return _nvmectl.NVMeCTL_Tunnel(self, *args)
    def PrepareForShutdown(self): return _nvmectl.NVMeCTL_PrepareForShutdown(self)
    def SecureErase(self): return _nvmectl.NVMeCTL_SecureErase(self)
    def Neuralize(self): return _nvmectl.NVMeCTL_Neuralize(self)
    def FreezeSQs(self, *args): return _nvmectl.NVMeCTL_FreezeSQs(self, *args)
    def ScheduleBG(self): return _nvmectl.NVMeCTL_ScheduleBG(self)
    def SetScratchpad(self, *args): return _nvmectl.NVMeCTL_SetScratchpad(self, *args)
    def SetScratchpadRegisters(self): return _nvmectl.NVMeCTL_SetScratchpadRegisters(self)
    def GetNANDInfo(self, *args): return _nvmectl.NVMeCTL_GetNANDInfo(self, *args)
    def PerformBFH(self, *args): return _nvmectl.NVMeCTL_PerformBFH(self, *args)
    def GetBFHStatus(self): return _nvmectl.NVMeCTL_GetBFHStatus(self)
    def CheckWriteProtection(self): return _nvmectl.NVMeCTL_CheckWriteProtection(self)
    def AllocContigMemory(self, *args): return _nvmectl.NVMeCTL_AllocContigMemory(self, *args)
    def ReleaseContigMemory(self, *args): return _nvmectl.NVMeCTL_ReleaseContigMemory(self, *args)
    def CreateSQ(self, *args): return _nvmectl.NVMeCTL_CreateSQ(self, *args)
    def CreateCQ(self, *args): return _nvmectl.NVMeCTL_CreateCQ(self, *args)
    __swig_getmethods__["string"] = lambda x: _nvmectl.NVMeCTL_string
    if _newclass:string = staticmethod(_nvmectl.NVMeCTL_string)
    __swig_getmethods__["AppendBufferToFile"] = lambda x: _nvmectl.NVMeCTL_AppendBufferToFile
    if _newclass:AppendBufferToFile = staticmethod(_nvmectl.NVMeCTL_AppendBufferToFile)
    __swig_getmethods__["WriteBufferToFile"] = lambda x: _nvmectl.NVMeCTL_WriteBufferToFile
    if _newclass:WriteBufferToFile = staticmethod(_nvmectl.NVMeCTL_WriteBufferToFile)
    __swig_getmethods__["ReadBufferFromFile"] = lambda x: _nvmectl.NVMeCTL_ReadBufferFromFile
    if _newclass:ReadBufferFromFile = staticmethod(_nvmectl.NVMeCTL_ReadBufferFromFile)
    __swig_getmethods__["DeallocSetRange"] = lambda x: _nvmectl.NVMeCTL_DeallocSetRange
    if _newclass:DeallocSetRange = staticmethod(_nvmectl.NVMeCTL_DeallocSetRange)
    __swig_getmethods__["bzero"] = lambda x: _nvmectl.NVMeCTL_bzero
    if _newclass:bzero = staticmethod(_nvmectl.NVMeCTL_bzero)
    __swig_getmethods__["GetEnumString"] = lambda x: _nvmectl.NVMeCTL_GetEnumString
    if _newclass:GetEnumString = staticmethod(_nvmectl.NVMeCTL_GetEnumString)
    __swig_getmethods__["GetBoardTypeString"] = lambda x: _nvmectl.NVMeCTL_GetBoardTypeString
    if _newclass:GetBoardTypeString = staticmethod(_nvmectl.NVMeCTL_GetBoardTypeString)
    __swig_getmethods__["GetNANDTypeString"] = lambda x: _nvmectl.NVMeCTL_GetNANDTypeString
    if _newclass:GetNANDTypeString = staticmethod(_nvmectl.NVMeCTL_GetNANDTypeString)
    __swig_getmethods__["GetNANDVendorString"] = lambda x: _nvmectl.NVMeCTL_GetNANDVendorString
    if _newclass:GetNANDVendorString = staticmethod(_nvmectl.NVMeCTL_GetNANDVendorString)
    __swig_getmethods__["GetDRAMVendorString"] = lambda x: _nvmectl.NVMeCTL_GetDRAMVendorString
    if _newclass:GetDRAMVendorString = staticmethod(_nvmectl.NVMeCTL_GetDRAMVendorString)
    __swig_getmethods__["GetNORVendorString"] = lambda x: _nvmectl.NVMeCTL_GetNORVendorString
    if _newclass:GetNORVendorString = staticmethod(_nvmectl.NVMeCTL_GetNORVendorString)
    __swig_getmethods__["GetCornerTypeString"] = lambda x: _nvmectl.NVMeCTL_GetCornerTypeString
    if _newclass:GetCornerTypeString = staticmethod(_nvmectl.NVMeCTL_GetCornerTypeString)
    __swig_getmethods__["GetBootSourceString"] = lambda x: _nvmectl.NVMeCTL_GetBootSourceString
    if _newclass:GetBootSourceString = staticmethod(_nvmectl.NVMeCTL_GetBootSourceString)
    __swig_getmethods__["GetANS2NANDVendorsString"] = lambda x: _nvmectl.NVMeCTL_GetANS2NANDVendorsString
    if _newclass:GetANS2NANDVendorsString = staticmethod(_nvmectl.NVMeCTL_GetANS2NANDVendorsString)
    __swig_getmethods__["GetANS2NANDLithographyPlanarString"] = lambda x: _nvmectl.NVMeCTL_GetANS2NANDLithographyPlanarString
    if _newclass:GetANS2NANDLithographyPlanarString = staticmethod(_nvmectl.NVMeCTL_GetANS2NANDLithographyPlanarString)
    __swig_getmethods__["GetANS2NANDLithography3DString"] = lambda x: _nvmectl.NVMeCTL_GetANS2NANDLithography3DString
    if _newclass:GetANS2NANDLithography3DString = staticmethod(_nvmectl.NVMeCTL_GetANS2NANDLithography3DString)
    __swig_getmethods__["GetANS2NANDTechnologyString"] = lambda x: _nvmectl.NVMeCTL_GetANS2NANDTechnologyString
    if _newclass:GetANS2NANDTechnologyString = staticmethod(_nvmectl.NVMeCTL_GetANS2NANDTechnologyString)
    __swig_getmethods__["GetANS2NANDRevisionString"] = lambda x: _nvmectl.NVMeCTL_GetANS2NANDRevisionString
    if _newclass:GetANS2NANDRevisionString = staticmethod(_nvmectl.NVMeCTL_GetANS2NANDRevisionString)
    __swig_getmethods__["GetANS2NANDDensityString"] = lambda x: _nvmectl.NVMeCTL_GetANS2NANDDensityString
    if _newclass:GetANS2NANDDensityString = staticmethod(_nvmectl.NVMeCTL_GetANS2NANDDensityString)
    __swig_getmethods__["bufToSMART"] = lambda x: _nvmectl.NVMeCTL_bufToSMART
    if _newclass:bufToSMART = staticmethod(_nvmectl.NVMeCTL_bufToSMART)
    __swig_getmethods__["bufToUchar"] = lambda x: _nvmectl.NVMeCTL_bufToUchar
    if _newclass:bufToUchar = staticmethod(_nvmectl.NVMeCTL_bufToUchar)
    __swig_getmethods__["bufToASIData"] = lambda x: _nvmectl.NVMeCTL_bufToASIData
    if _newclass:bufToASIData = staticmethod(_nvmectl.NVMeCTL_bufToASIData)
    __swig_getmethods__["bufToSLBTData"] = lambda x: _nvmectl.NVMeCTL_bufToSLBTData
    if _newclass:bufToSLBTData = staticmethod(_nvmectl.NVMeCTL_bufToSLBTData)
    __swig_getmethods__["bufToSLBTGBB"] = lambda x: _nvmectl.NVMeCTL_bufToSLBTGBB
    if _newclass:bufToSLBTGBB = staticmethod(_nvmectl.NVMeCTL_bufToSLBTGBB)
    __swig_getmethods__["bufToSLBTCycPerf"] = lambda x: _nvmectl.NVMeCTL_bufToSLBTCycPerf
    if _newclass:bufToSLBTCycPerf = staticmethod(_nvmectl.NVMeCTL_bufToSLBTCycPerf)
    __swig_getmethods__["GetBandinfo"] = lambda x: _nvmectl.NVMeCTL_GetBandinfo
    if _newclass:GetBandinfo = staticmethod(_nvmectl.NVMeCTL_GetBandinfo)
    __swig_getmethods__["GetGBBDefect"] = lambda x: _nvmectl.NVMeCTL_GetGBBDefect
    if _newclass:GetGBBDefect = staticmethod(_nvmectl.NVMeCTL_GetGBBDefect)
    __swig_getmethods__["CheckV2Geom"] = lambda x: _nvmectl.NVMeCTL_CheckV2Geom
    if _newclass:CheckV2Geom = staticmethod(_nvmectl.NVMeCTL_CheckV2Geom)
    __swig_getmethods__["u8ArrayGet"] = lambda x: _nvmectl.NVMeCTL_u8ArrayGet
    if _newclass:u8ArrayGet = staticmethod(_nvmectl.NVMeCTL_u8ArrayGet)
    __swig_getmethods__["u32ArrayGet"] = lambda x: _nvmectl.NVMeCTL_u32ArrayGet
    if _newclass:u32ArrayGet = staticmethod(_nvmectl.NVMeCTL_u32ArrayGet)
    __swig_getmethods__["u64ArrayGet"] = lambda x: _nvmectl.NVMeCTL_u64ArrayGet
    if _newclass:u64ArrayGet = staticmethod(_nvmectl.NVMeCTL_u64ArrayGet)
NVMeCTL_swigregister = _nvmectl.NVMeCTL_swigregister
NVMeCTL_swigregister(NVMeCTL)
cvar = _nvmectl.cvar
NVMeNumBoardTypes = cvar.NVMeNumBoardTypes
NVMeNumNANDTypes = cvar.NVMeNumNANDTypes
NVMeNumNANDVendors = cvar.NVMeNumNANDVendors
NVMeNumDRAMVendors = cvar.NVMeNumDRAMVendors
NVMeNumNORVendors = cvar.NVMeNumNORVendors
NVMeNumCornerTypes = cvar.NVMeNumCornerTypes
NVMeNumBootSources = cvar.NVMeNumBootSources
ANS2NumNANDVendors = cvar.ANS2NumNANDVendors
ANS2NumNANDLithographyPlanar = cvar.ANS2NumNANDLithographyPlanar
ANS2NumNANDLithography3D = cvar.ANS2NumNANDLithography3D
ANS2NumNANDTechnology = cvar.ANS2NumNANDTechnology
ANS2NumNANDRevision = cvar.ANS2NumNANDRevision
ANS2NumNANDDensity = cvar.ANS2NumNANDDensity

def NVMeCTL_GetNVMeDriverVersion(*args):
  return _nvmectl.NVMeCTL_GetNVMeDriverVersion(*args)
NVMeCTL_GetNVMeDriverVersion = _nvmectl.NVMeCTL_GetNVMeDriverVersion

def NVMeCTL_GetNVMePassThroughVersion(*args):
  return _nvmectl.NVMeCTL_GetNVMePassThroughVersion(*args)
NVMeCTL_GetNVMePassThroughVersion = _nvmectl.NVMeCTL_GetNVMePassThroughVersion

def NVMeCTL_GetIdentifyString(*args):
  return _nvmectl.NVMeCTL_GetIdentifyString(*args)
NVMeCTL_GetIdentifyString = _nvmectl.NVMeCTL_GetIdentifyString

def NVMeCTL_NVMeStatusString(*args):
  return _nvmectl.NVMeCTL_NVMeStatusString(*args)
NVMeCTL_NVMeStatusString = _nvmectl.NVMeCTL_NVMeStatusString

def NVMeCTL_SystemStatusString(*args):
  return _nvmectl.NVMeCTL_SystemStatusString(*args)
NVMeCTL_SystemStatusString = _nvmectl.NVMeCTL_SystemStatusString

def NVMeCTL_GetFieldCounters(*args):
  return _nvmectl.NVMeCTL_GetFieldCounters(*args)
NVMeCTL_GetFieldCounters = _nvmectl.NVMeCTL_GetFieldCounters

def NVMeCTL_SetDebug(*args):
  return _nvmectl.NVMeCTL_SetDebug(*args)
NVMeCTL_SetDebug = _nvmectl.NVMeCTL_SetDebug

def NVMeCTL_GetDevices(*args):
  return _nvmectl.NVMeCTL_GetDevices(*args)
NVMeCTL_GetDevices = _nvmectl.NVMeCTL_GetDevices

def NVMeCTL_S3XWriteFAFiles(*args):
  return _nvmectl.NVMeCTL_S3XWriteFAFiles(*args)
NVMeCTL_S3XWriteFAFiles = _nvmectl.NVMeCTL_S3XWriteFAFiles

def NVMeCTL_AppendNamespace(*args):
  return _nvmectl.NVMeCTL_AppendNamespace(*args)
NVMeCTL_AppendNamespace = _nvmectl.NVMeCTL_AppendNamespace

def NVMeCTL_string(*args):
  return _nvmectl.NVMeCTL_string(*args)
NVMeCTL_string = _nvmectl.NVMeCTL_string

def NVMeCTL_AppendBufferToFile(*args):
  return _nvmectl.NVMeCTL_AppendBufferToFile(*args)
NVMeCTL_AppendBufferToFile = _nvmectl.NVMeCTL_AppendBufferToFile

def NVMeCTL_WriteBufferToFile(*args):
  return _nvmectl.NVMeCTL_WriteBufferToFile(*args)
NVMeCTL_WriteBufferToFile = _nvmectl.NVMeCTL_WriteBufferToFile

def NVMeCTL_ReadBufferFromFile(*args):
  return _nvmectl.NVMeCTL_ReadBufferFromFile(*args)
NVMeCTL_ReadBufferFromFile = _nvmectl.NVMeCTL_ReadBufferFromFile

def NVMeCTL_DeallocSetRange(*args):
  return _nvmectl.NVMeCTL_DeallocSetRange(*args)
NVMeCTL_DeallocSetRange = _nvmectl.NVMeCTL_DeallocSetRange

def NVMeCTL_bzero(*args):
  return _nvmectl.NVMeCTL_bzero(*args)
NVMeCTL_bzero = _nvmectl.NVMeCTL_bzero

def NVMeCTL_GetEnumString(*args):
  return _nvmectl.NVMeCTL_GetEnumString(*args)
NVMeCTL_GetEnumString = _nvmectl.NVMeCTL_GetEnumString

def NVMeCTL_GetBoardTypeString(*args):
  return _nvmectl.NVMeCTL_GetBoardTypeString(*args)
NVMeCTL_GetBoardTypeString = _nvmectl.NVMeCTL_GetBoardTypeString

def NVMeCTL_GetNANDTypeString(*args):
  return _nvmectl.NVMeCTL_GetNANDTypeString(*args)
NVMeCTL_GetNANDTypeString = _nvmectl.NVMeCTL_GetNANDTypeString

def NVMeCTL_GetNANDVendorString(*args):
  return _nvmectl.NVMeCTL_GetNANDVendorString(*args)
NVMeCTL_GetNANDVendorString = _nvmectl.NVMeCTL_GetNANDVendorString

def NVMeCTL_GetDRAMVendorString(*args):
  return _nvmectl.NVMeCTL_GetDRAMVendorString(*args)
NVMeCTL_GetDRAMVendorString = _nvmectl.NVMeCTL_GetDRAMVendorString

def NVMeCTL_GetNORVendorString(*args):
  return _nvmectl.NVMeCTL_GetNORVendorString(*args)
NVMeCTL_GetNORVendorString = _nvmectl.NVMeCTL_GetNORVendorString

def NVMeCTL_GetCornerTypeString(*args):
  return _nvmectl.NVMeCTL_GetCornerTypeString(*args)
NVMeCTL_GetCornerTypeString = _nvmectl.NVMeCTL_GetCornerTypeString

def NVMeCTL_GetBootSourceString(*args):
  return _nvmectl.NVMeCTL_GetBootSourceString(*args)
NVMeCTL_GetBootSourceString = _nvmectl.NVMeCTL_GetBootSourceString

def NVMeCTL_GetANS2NANDVendorsString(*args):
  return _nvmectl.NVMeCTL_GetANS2NANDVendorsString(*args)
NVMeCTL_GetANS2NANDVendorsString = _nvmectl.NVMeCTL_GetANS2NANDVendorsString

def NVMeCTL_GetANS2NANDLithographyPlanarString(*args):
  return _nvmectl.NVMeCTL_GetANS2NANDLithographyPlanarString(*args)
NVMeCTL_GetANS2NANDLithographyPlanarString = _nvmectl.NVMeCTL_GetANS2NANDLithographyPlanarString

def NVMeCTL_GetANS2NANDLithography3DString(*args):
  return _nvmectl.NVMeCTL_GetANS2NANDLithography3DString(*args)
NVMeCTL_GetANS2NANDLithography3DString = _nvmectl.NVMeCTL_GetANS2NANDLithography3DString

def NVMeCTL_GetANS2NANDTechnologyString(*args):
  return _nvmectl.NVMeCTL_GetANS2NANDTechnologyString(*args)
NVMeCTL_GetANS2NANDTechnologyString = _nvmectl.NVMeCTL_GetANS2NANDTechnologyString

def NVMeCTL_GetANS2NANDRevisionString(*args):
  return _nvmectl.NVMeCTL_GetANS2NANDRevisionString(*args)
NVMeCTL_GetANS2NANDRevisionString = _nvmectl.NVMeCTL_GetANS2NANDRevisionString

def NVMeCTL_GetANS2NANDDensityString(*args):
  return _nvmectl.NVMeCTL_GetANS2NANDDensityString(*args)
NVMeCTL_GetANS2NANDDensityString = _nvmectl.NVMeCTL_GetANS2NANDDensityString

def NVMeCTL_bufToSMART(*args):
  return _nvmectl.NVMeCTL_bufToSMART(*args)
NVMeCTL_bufToSMART = _nvmectl.NVMeCTL_bufToSMART

def NVMeCTL_bufToUchar(*args):
  return _nvmectl.NVMeCTL_bufToUchar(*args)
NVMeCTL_bufToUchar = _nvmectl.NVMeCTL_bufToUchar

def NVMeCTL_bufToASIData(*args):
  return _nvmectl.NVMeCTL_bufToASIData(*args)
NVMeCTL_bufToASIData = _nvmectl.NVMeCTL_bufToASIData

def NVMeCTL_bufToSLBTData(*args):
  return _nvmectl.NVMeCTL_bufToSLBTData(*args)
NVMeCTL_bufToSLBTData = _nvmectl.NVMeCTL_bufToSLBTData

def NVMeCTL_bufToSLBTGBB(*args):
  return _nvmectl.NVMeCTL_bufToSLBTGBB(*args)
NVMeCTL_bufToSLBTGBB = _nvmectl.NVMeCTL_bufToSLBTGBB

def NVMeCTL_bufToSLBTCycPerf(*args):
  return _nvmectl.NVMeCTL_bufToSLBTCycPerf(*args)
NVMeCTL_bufToSLBTCycPerf = _nvmectl.NVMeCTL_bufToSLBTCycPerf

def NVMeCTL_GetBandinfo(*args):
  return _nvmectl.NVMeCTL_GetBandinfo(*args)
NVMeCTL_GetBandinfo = _nvmectl.NVMeCTL_GetBandinfo

def NVMeCTL_GetGBBDefect(*args):
  return _nvmectl.NVMeCTL_GetGBBDefect(*args)
NVMeCTL_GetGBBDefect = _nvmectl.NVMeCTL_GetGBBDefect

def NVMeCTL_CheckV2Geom(*args):
  return _nvmectl.NVMeCTL_CheckV2Geom(*args)
NVMeCTL_CheckV2Geom = _nvmectl.NVMeCTL_CheckV2Geom

def NVMeCTL_u8ArrayGet(*args):
  return _nvmectl.NVMeCTL_u8ArrayGet(*args)
NVMeCTL_u8ArrayGet = _nvmectl.NVMeCTL_u8ArrayGet

def NVMeCTL_u32ArrayGet(*args):
  return _nvmectl.NVMeCTL_u32ArrayGet(*args)
NVMeCTL_u32ArrayGet = _nvmectl.NVMeCTL_u32ArrayGet

def NVMeCTL_u64ArrayGet(*args):
  return _nvmectl.NVMeCTL_u64ArrayGet(*args)
NVMeCTL_u64ArrayGet = _nvmectl.NVMeCTL_u64ArrayGet


def NewNVMeCTL(*args):
  return _nvmectl.NewNVMeCTL(*args)
NewNVMeCTL = _nvmectl.NewNVMeCTL

def NewPciNVMeCTL(*args):
  return _nvmectl.NewPciNVMeCTL(*args)
NewPciNVMeCTL = _nvmectl.NewPciNVMeCTL

def NewSerialNVMeCTL(*args):
  return _nvmectl.NewSerialNVMeCTL(*args)
NewSerialNVMeCTL = _nvmectl.NewSerialNVMeCTL

def NewNVMeCTLFirst():
  return _nvmectl.NewNVMeCTLFirst()
NewNVMeCTLFirst = _nvmectl.NewNVMeCTLFirst

def DeleteNVMeCTL(*args):
  return _nvmectl.DeleteNVMeCTL(*args)
DeleteNVMeCTL = _nvmectl.DeleteNVMeCTL

def NVMeCTLGetDevices(*args):
  return _nvmectl.NVMeCTLGetDevices(*args)
NVMeCTLGetDevices = _nvmectl.NVMeCTLGetDevices
kNVMeMemoryPageSizeScaleFactor = _nvmectl.kNVMeMemoryPageSizeScaleFactor
kNVMeAdminSubmissionQueueID = _nvmectl.kNVMeAdminSubmissionQueueID
kMinSubmissionQueue = _nvmectl.kMinSubmissionQueue
kNVMeMinNamespaces = _nvmectl.kNVMeMinNamespaces
kNVMeModelPropertyKey = _nvmectl.kNVMeModelPropertyKey
kNVMeRevisionPropertyKey = _nvmectl.kNVMeRevisionPropertyKey
kNVMeSerialNumberPropertyKey = _nvmectl.kNVMeSerialNumberPropertyKey
kNVMeSupportedFeaturesKey = _nvmectl.kNVMeSupportedFeaturesKey
kNVMeQueueManagerTerminateReasonKey = _nvmectl.kNVMeQueueManagerTerminateReasonKey
kNVMeFatalErrorCodeKey = _nvmectl.kNVMeFatalErrorCodeKey
kNVMeMaxPendingCommands = _nvmectl.kNVMeMaxPendingCommands
kNVMeS1XDeviceID = _nvmectl.kNVMeS1XDeviceID
kNVMeS3XDeviceID = _nvmectl.kNVMeS3XDeviceID
kNVMeUCXDeviceID = _nvmectl.kNVMeUCXDeviceID
NVME_PAGE_SHIFT = _nvmectl.NVME_PAGE_SHIFT
NVME_PAGE_SIZE = _nvmectl.NVME_PAGE_SIZE
NVME_PAGE_MASK = _nvmectl.NVME_PAGE_MASK
kNVME_512_LBA_Data = _nvmectl.kNVME_512_LBA_Data
kNVME_4K_LBA_Data = _nvmectl.kNVME_4K_LBA_Data
kNVME_Max_LBA_Data = _nvmectl.kNVME_Max_LBA_Data
kNVME_512_LogicalBlockSize = _nvmectl.kNVME_512_LogicalBlockSize
kNVME_4K_LogicalBlockSize = _nvmectl.kNVME_4K_LogicalBlockSize
kNVMe_CAP_Offset = _nvmectl.kNVMe_CAP_Offset
kNVMe_VS_Offset = _nvmectl.kNVMe_VS_Offset
kNVMe_INTMS_Offset = _nvmectl.kNVMe_INTMS_Offset
kNVMe_INTMC_Offset = _nvmectl.kNVMe_INTMC_Offset
kNVMe_CC_Offset = _nvmectl.kNVMe_CC_Offset
kNVMe_CSTS_Offset = _nvmectl.kNVMe_CSTS_Offset
kNVMe_AQA_Offset = _nvmectl.kNVMe_AQA_Offset
kNVMe_ASQ_Offset = _nvmectl.kNVMe_ASQ_Offset
kNVMe_ACQ_Offset = _nvmectl.kNVMe_ACQ_Offset
kNVMe_SQTBL_Base_Offset = _nvmectl.kNVMe_SQTBL_Base_Offset
kNVMe_MODESEL_Offset = _nvmectl.kNVMe_MODESEL_Offset
kNVMe_MODESTAT_Offset = _nvmectl.kNVMe_MODESTAT_Offset
kNVMe_DDRREQSIZE_Offset = _nvmectl.kNVMe_DDRREQSIZE_Offset
kNVMe_DDRREQALIGN_Offset = _nvmectl.kNVMe_DDRREQALIGN_Offset
kNVMe_DDRBASE_Offset = _nvmectl.kNVMe_DDRBASE_Offset
kNVMe_DDRSIZE_Offset = _nvmectl.kNVMe_DDRSIZE_Offset
kNVMe_Force_Assert_Offset = _nvmectl.kNVMe_Force_Assert_Offset
kNVMe_LOGCORE_Offset = _nvmectl.kNVMe_LOGCORE_Offset
kNVMe_LOGBUFSIZE_Offset = _nvmectl.kNVMe_LOGBUFSIZE_Offset
kNVMe_LOGTICK1_Offset = _nvmectl.kNVMe_LOGTICK1_Offset
kNVMe_LOGTICK2_Offset = _nvmectl.kNVMe_LOGTICK2_Offset
kNVMe_BWLIM_Offset = _nvmectl.kNVMe_BWLIM_Offset
kNVMe_Current_Assert_Offset = _nvmectl.kNVMe_Current_Assert_Offset
kNVMe_Current_Assert_Arg1 = _nvmectl.kNVMe_Current_Assert_Arg1
kNVMe_Current_Assert_Arg2 = _nvmectl.kNVMe_Current_Assert_Arg2
kNVMe_Current_Assert_Arg3 = _nvmectl.kNVMe_Current_Assert_Arg3
kNVMe_Previous_Assert_Offset = _nvmectl.kNVMe_Previous_Assert_Offset
kNVMe_Previous_Assert_Arg1 = _nvmectl.kNVMe_Previous_Assert_Arg1
kNVMe_Previous_Assert_Arg2 = _nvmectl.kNVMe_Previous_Assert_Arg2
kNVMe_Previous_Assert_Arg3 = _nvmectl.kNVMe_Previous_Assert_Arg3
kNVMe_PM_Config = _nvmectl.kNVMe_PM_Config
kNVMe_Current_Assert_EDD0 = _nvmectl.kNVMe_Current_Assert_EDD0
kNVMe_Current_Assert_EDD1 = _nvmectl.kNVMe_Current_Assert_EDD1
kNVMe_Current_Assert_EDD2 = _nvmectl.kNVMe_Current_Assert_EDD2
kNVMe_Current_Assert_EDD3 = _nvmectl.kNVMe_Current_Assert_EDD3
kNVMe_Current_Assert_EDD4 = _nvmectl.kNVMe_Current_Assert_EDD4
kNVMe_Current_Assert_EDD5 = _nvmectl.kNVMe_Current_Assert_EDD5
kNVMe_Current_Assert_EDD6 = _nvmectl.kNVMe_Current_Assert_EDD6
kNVMe_Current_Assert_EDD7 = _nvmectl.kNVMe_Current_Assert_EDD7
kNVMe_Read_Challenge_Start = _nvmectl.kNVMe_Read_Challenge_Start
kNVMe_Write_Signature_Start = _nvmectl.kNVMe_Write_Signature_Start
kNVMe_S3E_FA_Action_Offset = _nvmectl.kNVMe_S3E_FA_Action_Offset
kNVMe_S3E_FA_Status_Offset = _nvmectl.kNVMe_S3E_FA_Status_Offset
kNVMe_S3E_FA_Length_Offset = _nvmectl.kNVMe_S3E_FA_Length_Offset
kNVMe_Assert_Num_Args = _nvmectl.kNVMe_Assert_Num_Args
kNVMeChallengeNumDwords = _nvmectl.kNVMeChallengeNumDwords
kNVMeChallengeSignatureNumDwords = _nvmectl.kNVMeChallengeSignatureNumDwords
class NVMeBandwidthLimit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NVMeBandwidthLimit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NVMeBandwidthLimit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BW_LIMIT_TIER0"] = _nvmectl.NVMeBandwidthLimit_BW_LIMIT_TIER0_set
    __swig_getmethods__["BW_LIMIT_TIER0"] = _nvmectl.NVMeBandwidthLimit_BW_LIMIT_TIER0_get
    if _newclass:BW_LIMIT_TIER0 = _swig_property(_nvmectl.NVMeBandwidthLimit_BW_LIMIT_TIER0_get, _nvmectl.NVMeBandwidthLimit_BW_LIMIT_TIER0_set)
    __swig_setmethods__["BW_LIMIT_TIER1"] = _nvmectl.NVMeBandwidthLimit_BW_LIMIT_TIER1_set
    __swig_getmethods__["BW_LIMIT_TIER1"] = _nvmectl.NVMeBandwidthLimit_BW_LIMIT_TIER1_get
    if _newclass:BW_LIMIT_TIER1 = _swig_property(_nvmectl.NVMeBandwidthLimit_BW_LIMIT_TIER1_get, _nvmectl.NVMeBandwidthLimit_BW_LIMIT_TIER1_set)
    __swig_setmethods__["BW_LIMIT_TIER2"] = _nvmectl.NVMeBandwidthLimit_BW_LIMIT_TIER2_set
    __swig_getmethods__["BW_LIMIT_TIER2"] = _nvmectl.NVMeBandwidthLimit_BW_LIMIT_TIER2_get
    if _newclass:BW_LIMIT_TIER2 = _swig_property(_nvmectl.NVMeBandwidthLimit_BW_LIMIT_TIER2_get, _nvmectl.NVMeBandwidthLimit_BW_LIMIT_TIER2_set)
    __swig_setmethods__["BW_LIMIT_TIER3"] = _nvmectl.NVMeBandwidthLimit_BW_LIMIT_TIER3_set
    __swig_getmethods__["BW_LIMIT_TIER3"] = _nvmectl.NVMeBandwidthLimit_BW_LIMIT_TIER3_get
    if _newclass:BW_LIMIT_TIER3 = _swig_property(_nvmectl.NVMeBandwidthLimit_BW_LIMIT_TIER3_get, _nvmectl.NVMeBandwidthLimit_BW_LIMIT_TIER3_set)
    def __init__(self): 
        this = _nvmectl.new_NVMeBandwidthLimit()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_NVMeBandwidthLimit
    __del__ = lambda self : None;
NVMeBandwidthLimit_swigregister = _nvmectl.NVMeBandwidthLimit_swigregister
NVMeBandwidthLimit_swigregister(NVMeBandwidthLimit)

kNVMe_BFH_FW_IMAGE_ADDRESS = _nvmectl.kNVMe_BFH_FW_IMAGE_ADDRESS
kNVMe_BFH_FW_IMAGE_SIZE = _nvmectl.kNVMe_BFH_FW_IMAGE_SIZE
kNVMe_BFH_ACTION = _nvmectl.kNVMe_BFH_ACTION
kNVMe_BFH_STATUS = _nvmectl.kNVMe_BFH_STATUS
kNVMe_BFH_REQUIRED = _nvmectl.kNVMe_BFH_REQUIRED
kNVMe_BFH_NAND_INFO = _nvmectl.kNVMe_BFH_NAND_INFO
kNVMe_BFH_NAND_INFO2 = _nvmectl.kNVMe_BFH_NAND_INFO2
kNVMeBFHActionStartTransfer = _nvmectl.kNVMeBFHActionStartTransfer
kNVMeBFHActionFWActivate = _nvmectl.kNVMeBFHActionFWActivate
kNVMeBFHGeneralError = _nvmectl.kNVMeBFHGeneralError
kNVMeBFHSignatureError = _nvmectl.kNVMeBFHSignatureError
kNVMeBFHTransferinProgress = _nvmectl.kNVMeBFHTransferinProgress
kNVMeBFHTransferDone = _nvmectl.kNVMeBFHTransferDone
kNVMeBFHDone = _nvmectl.kNVMeBFHDone
kNVMeBFHRequiredMagic = _nvmectl.kNVMeBFHRequiredMagic
kNVMeBFHTimeout = _nvmectl.kNVMeBFHTimeout
kNVMeDeviceIDS1X = _nvmectl.kNVMeDeviceIDS1X
kNVMeDeviceIDS3E = _nvmectl.kNVMeDeviceIDS3E
kNVMeDeviceIDS3X = _nvmectl.kNVMeDeviceIDS3X
kNVMeDeviceIDANS2 = _nvmectl.kNVMeDeviceIDANS2
kNVMeDeviceIDANS2QB = _nvmectl.kNVMeDeviceIDANS2QB
kNVMe_VS_MNR_Bit = _nvmectl.kNVMe_VS_MNR_Bit
kNVMe_VS_MJR_Bit = _nvmectl.kNVMe_VS_MJR_Bit
kNVMe_VS_MNR_Mask = _nvmectl.kNVMe_VS_MNR_Mask
kNVMe_VS_MJR_Mask = _nvmectl.kNVMe_VS_MJR_Mask
kNVMe_AQA_ASQS_Offset = _nvmectl.kNVMe_AQA_ASQS_Offset
kNVMe_AQA_ACQS_Offset = _nvmectl.kNVMe_AQA_ACQS_Offset
kNVMe_CC_EN_Offset = _nvmectl.kNVMe_CC_EN_Offset
kNVMe_CC_CSS_Offset = _nvmectl.kNVMe_CC_CSS_Offset
kNVMe_CC_MPS_Offset = _nvmectl.kNVMe_CC_MPS_Offset
kNVMe_CC_AMS_Offset = _nvmectl.kNVMe_CC_AMS_Offset
kNVMe_CC_SHN_Offset = _nvmectl.kNVMe_CC_SHN_Offset
kNVMe_CC_IOSQES_Offset = _nvmectl.kNVMe_CC_IOSQES_Offset
kNVMe_CC_IOCQES_Offset = _nvmectl.kNVMe_CC_IOCQES_Offset
kNVMe_CC_EN_Disabled = _nvmectl.kNVMe_CC_EN_Disabled
kNVMe_CC_EN_Enabled = _nvmectl.kNVMe_CC_EN_Enabled
kNVMe_CC_CSS_NVMe = _nvmectl.kNVMe_CC_CSS_NVMe
kNVMe_CC_AMS_RR = _nvmectl.kNVMe_CC_AMS_RR
kNVMe_CC_AMS_WRR = _nvmectl.kNVMe_CC_AMS_WRR
kNVMe_CC_SHN_None = _nvmectl.kNVMe_CC_SHN_None
kNVMe_CC_SHN_Normal = _nvmectl.kNVMe_CC_SHN_Normal
kNVMe_CC_SHN_Abrupt = _nvmectl.kNVMe_CC_SHN_Abrupt
kNVMe_CC_SHN_Self_Refresh = _nvmectl.kNVMe_CC_SHN_Self_Refresh
kNVMe_CC_SHN_Mask = _nvmectl.kNVMe_CC_SHN_Mask
kNVMe_CSTS_RDY_Bit = _nvmectl.kNVMe_CSTS_RDY_Bit
kNVMe_CSTS_RDY_Mask = _nvmectl.kNVMe_CSTS_RDY_Mask
kNVMe_CSTS_CFS_Bit = _nvmectl.kNVMe_CSTS_CFS_Bit
kNVMe_CSTS_CFS_Mask = _nvmectl.kNVMe_CSTS_CFS_Mask
kNVMe_CSTS_SHST_Offset = _nvmectl.kNVMe_CSTS_SHST_Offset
kNVMe_CSTS_SHST_Mask = _nvmectl.kNVMe_CSTS_SHST_Mask
kNVMe_CSTS_SHST_Normal = _nvmectl.kNVMe_CSTS_SHST_Normal
kNVMe_CSTS_SHST_ShutdownInProgress = _nvmectl.kNVMe_CSTS_SHST_ShutdownInProgress
kNVMe_CSTS_SHST_ShutdownComplete = _nvmectl.kNVMe_CSTS_SHST_ShutdownComplete
kNVMe_LOGTICK_Core_Bitmask_Offset = _nvmectl.kNVMe_LOGTICK_Core_Bitmask_Offset
kNVMe_LOGTICK_Core_Bitmask_Len = _nvmectl.kNVMe_LOGTICK_Core_Bitmask_Len
kNVMe_LOGTICK_Core_Bitmask_Mask = _nvmectl.kNVMe_LOGTICK_Core_Bitmask_Mask
kNVMe_LOGTICK_Scaler_Offset = _nvmectl.kNVMe_LOGTICK_Scaler_Offset
kNVMe_LOGTICK_Scaler_Len = _nvmectl.kNVMe_LOGTICK_Scaler_Len
kNVMe_LOGTICK_Scaler_Mask = _nvmectl.kNVMe_LOGTICK_Scaler_Mask
kNVMeDefaultIOSQES = _nvmectl.kNVMeDefaultIOSQES
kNVMeDefaultSQEntrySize = _nvmectl.kNVMeDefaultSQEntrySize
class NVMeSubmissionQueueEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NVMeSubmissionQueueEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NVMeSubmissionQueueEntry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CID_FUSE_OPC"] = _nvmectl.NVMeSubmissionQueueEntry_CID_FUSE_OPC_set
    __swig_getmethods__["CID_FUSE_OPC"] = _nvmectl.NVMeSubmissionQueueEntry_CID_FUSE_OPC_get
    if _newclass:CID_FUSE_OPC = _swig_property(_nvmectl.NVMeSubmissionQueueEntry_CID_FUSE_OPC_get, _nvmectl.NVMeSubmissionQueueEntry_CID_FUSE_OPC_set)
    __swig_setmethods__["NSID"] = _nvmectl.NVMeSubmissionQueueEntry_NSID_set
    __swig_getmethods__["NSID"] = _nvmectl.NVMeSubmissionQueueEntry_NSID_get
    if _newclass:NSID = _swig_property(_nvmectl.NVMeSubmissionQueueEntry_NSID_get, _nvmectl.NVMeSubmissionQueueEntry_NSID_set)
    __swig_setmethods__["RESERVED"] = _nvmectl.NVMeSubmissionQueueEntry_RESERVED_set
    __swig_getmethods__["RESERVED"] = _nvmectl.NVMeSubmissionQueueEntry_RESERVED_get
    if _newclass:RESERVED = _swig_property(_nvmectl.NVMeSubmissionQueueEntry_RESERVED_get, _nvmectl.NVMeSubmissionQueueEntry_RESERVED_set)
    __swig_setmethods__["MPTR"] = _nvmectl.NVMeSubmissionQueueEntry_MPTR_set
    __swig_getmethods__["MPTR"] = _nvmectl.NVMeSubmissionQueueEntry_MPTR_get
    if _newclass:MPTR = _swig_property(_nvmectl.NVMeSubmissionQueueEntry_MPTR_get, _nvmectl.NVMeSubmissionQueueEntry_MPTR_set)
    __swig_setmethods__["PRP1"] = _nvmectl.NVMeSubmissionQueueEntry_PRP1_set
    __swig_getmethods__["PRP1"] = _nvmectl.NVMeSubmissionQueueEntry_PRP1_get
    if _newclass:PRP1 = _swig_property(_nvmectl.NVMeSubmissionQueueEntry_PRP1_get, _nvmectl.NVMeSubmissionQueueEntry_PRP1_set)
    __swig_setmethods__["PRP2"] = _nvmectl.NVMeSubmissionQueueEntry_PRP2_set
    __swig_getmethods__["PRP2"] = _nvmectl.NVMeSubmissionQueueEntry_PRP2_get
    if _newclass:PRP2 = _swig_property(_nvmectl.NVMeSubmissionQueueEntry_PRP2_get, _nvmectl.NVMeSubmissionQueueEntry_PRP2_set)
    __swig_setmethods__["DWORD10"] = _nvmectl.NVMeSubmissionQueueEntry_DWORD10_set
    __swig_getmethods__["DWORD10"] = _nvmectl.NVMeSubmissionQueueEntry_DWORD10_get
    if _newclass:DWORD10 = _swig_property(_nvmectl.NVMeSubmissionQueueEntry_DWORD10_get, _nvmectl.NVMeSubmissionQueueEntry_DWORD10_set)
    __swig_setmethods__["DWORD11"] = _nvmectl.NVMeSubmissionQueueEntry_DWORD11_set
    __swig_getmethods__["DWORD11"] = _nvmectl.NVMeSubmissionQueueEntry_DWORD11_get
    if _newclass:DWORD11 = _swig_property(_nvmectl.NVMeSubmissionQueueEntry_DWORD11_get, _nvmectl.NVMeSubmissionQueueEntry_DWORD11_set)
    __swig_setmethods__["DWORD12"] = _nvmectl.NVMeSubmissionQueueEntry_DWORD12_set
    __swig_getmethods__["DWORD12"] = _nvmectl.NVMeSubmissionQueueEntry_DWORD12_get
    if _newclass:DWORD12 = _swig_property(_nvmectl.NVMeSubmissionQueueEntry_DWORD12_get, _nvmectl.NVMeSubmissionQueueEntry_DWORD12_set)
    __swig_setmethods__["DWORD13"] = _nvmectl.NVMeSubmissionQueueEntry_DWORD13_set
    __swig_getmethods__["DWORD13"] = _nvmectl.NVMeSubmissionQueueEntry_DWORD13_get
    if _newclass:DWORD13 = _swig_property(_nvmectl.NVMeSubmissionQueueEntry_DWORD13_get, _nvmectl.NVMeSubmissionQueueEntry_DWORD13_set)
    __swig_setmethods__["DWORD14"] = _nvmectl.NVMeSubmissionQueueEntry_DWORD14_set
    __swig_getmethods__["DWORD14"] = _nvmectl.NVMeSubmissionQueueEntry_DWORD14_get
    if _newclass:DWORD14 = _swig_property(_nvmectl.NVMeSubmissionQueueEntry_DWORD14_get, _nvmectl.NVMeSubmissionQueueEntry_DWORD14_set)
    __swig_setmethods__["DWORD15"] = _nvmectl.NVMeSubmissionQueueEntry_DWORD15_set
    __swig_getmethods__["DWORD15"] = _nvmectl.NVMeSubmissionQueueEntry_DWORD15_get
    if _newclass:DWORD15 = _swig_property(_nvmectl.NVMeSubmissionQueueEntry_DWORD15_get, _nvmectl.NVMeSubmissionQueueEntry_DWORD15_set)
    def __init__(self): 
        this = _nvmectl.new_NVMeSubmissionQueueEntry()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_NVMeSubmissionQueueEntry
    __del__ = lambda self : None;
NVMeSubmissionQueueEntry_swigregister = _nvmectl.NVMeSubmissionQueueEntry_swigregister
NVMeSubmissionQueueEntry_swigregister(NVMeSubmissionQueueEntry)

kNVMeDefaultIOCQES = _nvmectl.kNVMeDefaultIOCQES
kNVMeDefaultCQEntrySize = _nvmectl.kNVMeDefaultCQEntrySize
class NVMeCompletionQueueEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NVMeCompletionQueueEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NVMeCompletionQueueEntry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["COMMAND_SPECIFIC"] = _nvmectl.NVMeCompletionQueueEntry_COMMAND_SPECIFIC_set
    __swig_getmethods__["COMMAND_SPECIFIC"] = _nvmectl.NVMeCompletionQueueEntry_COMMAND_SPECIFIC_get
    if _newclass:COMMAND_SPECIFIC = _swig_property(_nvmectl.NVMeCompletionQueueEntry_COMMAND_SPECIFIC_get, _nvmectl.NVMeCompletionQueueEntry_COMMAND_SPECIFIC_set)
    __swig_setmethods__["RESERVED"] = _nvmectl.NVMeCompletionQueueEntry_RESERVED_set
    __swig_getmethods__["RESERVED"] = _nvmectl.NVMeCompletionQueueEntry_RESERVED_get
    if _newclass:RESERVED = _swig_property(_nvmectl.NVMeCompletionQueueEntry_RESERVED_get, _nvmectl.NVMeCompletionQueueEntry_RESERVED_set)
    __swig_setmethods__["SQID_SQHD"] = _nvmectl.NVMeCompletionQueueEntry_SQID_SQHD_set
    __swig_getmethods__["SQID_SQHD"] = _nvmectl.NVMeCompletionQueueEntry_SQID_SQHD_get
    if _newclass:SQID_SQHD = _swig_property(_nvmectl.NVMeCompletionQueueEntry_SQID_SQHD_get, _nvmectl.NVMeCompletionQueueEntry_SQID_SQHD_set)
    __swig_setmethods__["SF_P_CID"] = _nvmectl.NVMeCompletionQueueEntry_SF_P_CID_set
    __swig_getmethods__["SF_P_CID"] = _nvmectl.NVMeCompletionQueueEntry_SF_P_CID_get
    if _newclass:SF_P_CID = _swig_property(_nvmectl.NVMeCompletionQueueEntry_SF_P_CID_get, _nvmectl.NVMeCompletionQueueEntry_SF_P_CID_set)
    def __init__(self): 
        this = _nvmectl.new_NVMeCompletionQueueEntry()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_NVMeCompletionQueueEntry
    __del__ = lambda self : None;
NVMeCompletionQueueEntry_swigregister = _nvmectl.NVMeCompletionQueueEntry_swigregister
NVMeCompletionQueueEntry_swigregister(NVMeCompletionQueueEntry)

class NVMeEncryptedSubmissionQueueEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NVMeEncryptedSubmissionQueueEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NVMeEncryptedSubmissionQueueEntry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fEntry"] = _nvmectl.NVMeEncryptedSubmissionQueueEntry_fEntry_set
    __swig_getmethods__["fEntry"] = _nvmectl.NVMeEncryptedSubmissionQueueEntry_fEntry_get
    if _newclass:fEntry = _swig_property(_nvmectl.NVMeEncryptedSubmissionQueueEntry_fEntry_get, _nvmectl.NVMeEncryptedSubmissionQueueEntry_fEntry_set)
    __swig_setmethods__["fKey"] = _nvmectl.NVMeEncryptedSubmissionQueueEntry_fKey_set
    __swig_getmethods__["fKey"] = _nvmectl.NVMeEncryptedSubmissionQueueEntry_fKey_get
    if _newclass:fKey = _swig_property(_nvmectl.NVMeEncryptedSubmissionQueueEntry_fKey_get, _nvmectl.NVMeEncryptedSubmissionQueueEntry_fKey_set)
    def __init__(self): 
        this = _nvmectl.new_NVMeEncryptedSubmissionQueueEntry()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_NVMeEncryptedSubmissionQueueEntry
    __del__ = lambda self : None;
NVMeEncryptedSubmissionQueueEntry_swigregister = _nvmectl.NVMeEncryptedSubmissionQueueEntry_swigregister
NVMeEncryptedSubmissionQueueEntry_swigregister(NVMeEncryptedSubmissionQueueEntry)

class NVMeLBARangeEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NVMeLBARangeEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NVMeLBARangeEntry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CONTEXT_ATTRIBUTES"] = _nvmectl.NVMeLBARangeEntry_CONTEXT_ATTRIBUTES_set
    __swig_getmethods__["CONTEXT_ATTRIBUTES"] = _nvmectl.NVMeLBARangeEntry_CONTEXT_ATTRIBUTES_get
    if _newclass:CONTEXT_ATTRIBUTES = _swig_property(_nvmectl.NVMeLBARangeEntry_CONTEXT_ATTRIBUTES_get, _nvmectl.NVMeLBARangeEntry_CONTEXT_ATTRIBUTES_set)
    __swig_setmethods__["BLOCK_COUNT"] = _nvmectl.NVMeLBARangeEntry_BLOCK_COUNT_set
    __swig_getmethods__["BLOCK_COUNT"] = _nvmectl.NVMeLBARangeEntry_BLOCK_COUNT_get
    if _newclass:BLOCK_COUNT = _swig_property(_nvmectl.NVMeLBARangeEntry_BLOCK_COUNT_get, _nvmectl.NVMeLBARangeEntry_BLOCK_COUNT_set)
    __swig_setmethods__["BLOCK_START"] = _nvmectl.NVMeLBARangeEntry_BLOCK_START_set
    __swig_getmethods__["BLOCK_START"] = _nvmectl.NVMeLBARangeEntry_BLOCK_START_get
    if _newclass:BLOCK_START = _swig_property(_nvmectl.NVMeLBARangeEntry_BLOCK_START_get, _nvmectl.NVMeLBARangeEntry_BLOCK_START_set)
    def __init__(self): 
        this = _nvmectl.new_NVMeLBARangeEntry()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_NVMeLBARangeEntry
    __del__ = lambda self : None;
NVMeLBARangeEntry_swigregister = _nvmectl.NVMeLBARangeEntry_swigregister
NVMeLBARangeEntry_swigregister(NVMeLBARangeEntry)

kNVMeMaxDataSetManagementEntryCount = _nvmectl.kNVMeMaxDataSetManagementEntryCount
kNVMeIdentifyDataSize = _nvmectl.kNVMeIdentifyDataSize
kPowerStateDescRReadThroughputMask = _nvmectl.kPowerStateDescRReadThroughputMask
kPowerStateDescRReadLatencyMask = _nvmectl.kPowerStateDescRReadLatencyMask
kPowerStateDescRWriteThroughputMask = _nvmectl.kPowerStateDescRWriteThroughputMask
kPowerStateDescRWriteLatencyMask = _nvmectl.kPowerStateDescRWriteLatencyMask
class NVMePowerStateDescriptor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NVMePowerStateDescriptor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NVMePowerStateDescriptor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["MAXIMUM_POWER"] = _nvmectl.NVMePowerStateDescriptor_MAXIMUM_POWER_set
    __swig_getmethods__["MAXIMUM_POWER"] = _nvmectl.NVMePowerStateDescriptor_MAXIMUM_POWER_get
    if _newclass:MAXIMUM_POWER = _swig_property(_nvmectl.NVMePowerStateDescriptor_MAXIMUM_POWER_get, _nvmectl.NVMePowerStateDescriptor_MAXIMUM_POWER_set)
    __swig_setmethods__["RESERVED1"] = _nvmectl.NVMePowerStateDescriptor_RESERVED1_set
    __swig_getmethods__["RESERVED1"] = _nvmectl.NVMePowerStateDescriptor_RESERVED1_get
    if _newclass:RESERVED1 = _swig_property(_nvmectl.NVMePowerStateDescriptor_RESERVED1_get, _nvmectl.NVMePowerStateDescriptor_RESERVED1_set)
    __swig_setmethods__["ENTRY_LATENCY"] = _nvmectl.NVMePowerStateDescriptor_ENTRY_LATENCY_set
    __swig_getmethods__["ENTRY_LATENCY"] = _nvmectl.NVMePowerStateDescriptor_ENTRY_LATENCY_get
    if _newclass:ENTRY_LATENCY = _swig_property(_nvmectl.NVMePowerStateDescriptor_ENTRY_LATENCY_get, _nvmectl.NVMePowerStateDescriptor_ENTRY_LATENCY_set)
    __swig_setmethods__["EXIT_LATENCY"] = _nvmectl.NVMePowerStateDescriptor_EXIT_LATENCY_set
    __swig_getmethods__["EXIT_LATENCY"] = _nvmectl.NVMePowerStateDescriptor_EXIT_LATENCY_get
    if _newclass:EXIT_LATENCY = _swig_property(_nvmectl.NVMePowerStateDescriptor_EXIT_LATENCY_get, _nvmectl.NVMePowerStateDescriptor_EXIT_LATENCY_set)
    __swig_setmethods__["RELATIVE_READ_THROUGHPUT"] = _nvmectl.NVMePowerStateDescriptor_RELATIVE_READ_THROUGHPUT_set
    __swig_getmethods__["RELATIVE_READ_THROUGHPUT"] = _nvmectl.NVMePowerStateDescriptor_RELATIVE_READ_THROUGHPUT_get
    if _newclass:RELATIVE_READ_THROUGHPUT = _swig_property(_nvmectl.NVMePowerStateDescriptor_RELATIVE_READ_THROUGHPUT_get, _nvmectl.NVMePowerStateDescriptor_RELATIVE_READ_THROUGHPUT_set)
    __swig_setmethods__["RELATIVE_READ_LATENCY"] = _nvmectl.NVMePowerStateDescriptor_RELATIVE_READ_LATENCY_set
    __swig_getmethods__["RELATIVE_READ_LATENCY"] = _nvmectl.NVMePowerStateDescriptor_RELATIVE_READ_LATENCY_get
    if _newclass:RELATIVE_READ_LATENCY = _swig_property(_nvmectl.NVMePowerStateDescriptor_RELATIVE_READ_LATENCY_get, _nvmectl.NVMePowerStateDescriptor_RELATIVE_READ_LATENCY_set)
    __swig_setmethods__["RELATIVE_WRITE_THROUGHPUT"] = _nvmectl.NVMePowerStateDescriptor_RELATIVE_WRITE_THROUGHPUT_set
    __swig_getmethods__["RELATIVE_WRITE_THROUGHPUT"] = _nvmectl.NVMePowerStateDescriptor_RELATIVE_WRITE_THROUGHPUT_get
    if _newclass:RELATIVE_WRITE_THROUGHPUT = _swig_property(_nvmectl.NVMePowerStateDescriptor_RELATIVE_WRITE_THROUGHPUT_get, _nvmectl.NVMePowerStateDescriptor_RELATIVE_WRITE_THROUGHPUT_set)
    __swig_setmethods__["RELATIVE_WRITE_LATENCY"] = _nvmectl.NVMePowerStateDescriptor_RELATIVE_WRITE_LATENCY_set
    __swig_getmethods__["RELATIVE_WRITE_LATENCY"] = _nvmectl.NVMePowerStateDescriptor_RELATIVE_WRITE_LATENCY_get
    if _newclass:RELATIVE_WRITE_LATENCY = _swig_property(_nvmectl.NVMePowerStateDescriptor_RELATIVE_WRITE_LATENCY_get, _nvmectl.NVMePowerStateDescriptor_RELATIVE_WRITE_LATENCY_set)
    __swig_setmethods__["RESERVED2"] = _nvmectl.NVMePowerStateDescriptor_RESERVED2_set
    __swig_getmethods__["RESERVED2"] = _nvmectl.NVMePowerStateDescriptor_RESERVED2_get
    if _newclass:RESERVED2 = _swig_property(_nvmectl.NVMePowerStateDescriptor_RESERVED2_get, _nvmectl.NVMePowerStateDescriptor_RESERVED2_set)
    def __init__(self): 
        this = _nvmectl.new_NVMePowerStateDescriptor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_NVMePowerStateDescriptor
    __del__ = lambda self : None;
NVMePowerStateDescriptor_swigregister = _nvmectl.NVMePowerStateDescriptor_swigregister
NVMePowerStateDescriptor_swigregister(NVMePowerStateDescriptor)

kNVMeIdentifyControllerSerialNumberLen = _nvmectl.kNVMeIdentifyControllerSerialNumberLen
kNVMeIdentifyControllerModelNumberLen = _nvmectl.kNVMeIdentifyControllerModelNumberLen
kNVMeIdentifyControllerFirmwareRevisionLen = _nvmectl.kNVMeIdentifyControllerFirmwareRevisionLen
kNVMeIdentifyControllerIEEEOUIIDLen = _nvmectl.kNVMeIdentifyControllerIEEEOUIIDLen
kNVMeIdentifyControllerMSPRevisionLen = _nvmectl.kNVMeIdentifyControllerMSPRevisionLen
kNVMeIdentifyControllerPTSRevisionLen = _nvmectl.kNVMeIdentifyControllerPTSRevisionLen
kNVMeIdentifyControllerBuildTrainLen = _nvmectl.kNVMeIdentifyControllerBuildTrainLen
kNVMeIdentifyControllerNANDTypeLen = _nvmectl.kNVMeIdentifyControllerNANDTypeLen
kNVMeIdentifyControllerNANDVendorLen = _nvmectl.kNVMeIdentifyControllerNANDVendorLen
kNVMeIdentifyControllerNumFuses = _nvmectl.kNVMeIdentifyControllerNumFuses
class NVMeIdentifyControllerStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NVMeIdentifyControllerStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NVMeIdentifyControllerStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["PCI_VID"] = _nvmectl.NVMeIdentifyControllerStruct_PCI_VID_set
    __swig_getmethods__["PCI_VID"] = _nvmectl.NVMeIdentifyControllerStruct_PCI_VID_get
    if _newclass:PCI_VID = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_PCI_VID_get, _nvmectl.NVMeIdentifyControllerStruct_PCI_VID_set)
    __swig_setmethods__["PCI_SSVID"] = _nvmectl.NVMeIdentifyControllerStruct_PCI_SSVID_set
    __swig_getmethods__["PCI_SSVID"] = _nvmectl.NVMeIdentifyControllerStruct_PCI_SSVID_get
    if _newclass:PCI_SSVID = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_PCI_SSVID_get, _nvmectl.NVMeIdentifyControllerStruct_PCI_SSVID_set)
    __swig_setmethods__["SERIAL_NUMBER"] = _nvmectl.NVMeIdentifyControllerStruct_SERIAL_NUMBER_set
    __swig_getmethods__["SERIAL_NUMBER"] = _nvmectl.NVMeIdentifyControllerStruct_SERIAL_NUMBER_get
    if _newclass:SERIAL_NUMBER = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_SERIAL_NUMBER_get, _nvmectl.NVMeIdentifyControllerStruct_SERIAL_NUMBER_set)
    __swig_setmethods__["MODEL_NUMBER"] = _nvmectl.NVMeIdentifyControllerStruct_MODEL_NUMBER_set
    __swig_getmethods__["MODEL_NUMBER"] = _nvmectl.NVMeIdentifyControllerStruct_MODEL_NUMBER_get
    if _newclass:MODEL_NUMBER = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_MODEL_NUMBER_get, _nvmectl.NVMeIdentifyControllerStruct_MODEL_NUMBER_set)
    __swig_setmethods__["FW_REVISION"] = _nvmectl.NVMeIdentifyControllerStruct_FW_REVISION_set
    __swig_getmethods__["FW_REVISION"] = _nvmectl.NVMeIdentifyControllerStruct_FW_REVISION_get
    if _newclass:FW_REVISION = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_FW_REVISION_get, _nvmectl.NVMeIdentifyControllerStruct_FW_REVISION_set)
    __swig_setmethods__["RECOMMENDED_ARBITRATION_BURST"] = _nvmectl.NVMeIdentifyControllerStruct_RECOMMENDED_ARBITRATION_BURST_set
    __swig_getmethods__["RECOMMENDED_ARBITRATION_BURST"] = _nvmectl.NVMeIdentifyControllerStruct_RECOMMENDED_ARBITRATION_BURST_get
    if _newclass:RECOMMENDED_ARBITRATION_BURST = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_RECOMMENDED_ARBITRATION_BURST_get, _nvmectl.NVMeIdentifyControllerStruct_RECOMMENDED_ARBITRATION_BURST_set)
    __swig_setmethods__["IEEE_OUI_ID"] = _nvmectl.NVMeIdentifyControllerStruct_IEEE_OUI_ID_set
    __swig_getmethods__["IEEE_OUI_ID"] = _nvmectl.NVMeIdentifyControllerStruct_IEEE_OUI_ID_get
    if _newclass:IEEE_OUI_ID = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_IEEE_OUI_ID_get, _nvmectl.NVMeIdentifyControllerStruct_IEEE_OUI_ID_set)
    __swig_setmethods__["MIC"] = _nvmectl.NVMeIdentifyControllerStruct_MIC_set
    __swig_getmethods__["MIC"] = _nvmectl.NVMeIdentifyControllerStruct_MIC_get
    if _newclass:MIC = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_MIC_get, _nvmectl.NVMeIdentifyControllerStruct_MIC_set)
    __swig_setmethods__["MAX_DATA_TRANSFER_SIZE"] = _nvmectl.NVMeIdentifyControllerStruct_MAX_DATA_TRANSFER_SIZE_set
    __swig_getmethods__["MAX_DATA_TRANSFER_SIZE"] = _nvmectl.NVMeIdentifyControllerStruct_MAX_DATA_TRANSFER_SIZE_get
    if _newclass:MAX_DATA_TRANSFER_SIZE = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_MAX_DATA_TRANSFER_SIZE_get, _nvmectl.NVMeIdentifyControllerStruct_MAX_DATA_TRANSFER_SIZE_set)
    __swig_setmethods__["CONTROLLER_ID"] = _nvmectl.NVMeIdentifyControllerStruct_CONTROLLER_ID_set
    __swig_getmethods__["CONTROLLER_ID"] = _nvmectl.NVMeIdentifyControllerStruct_CONTROLLER_ID_get
    if _newclass:CONTROLLER_ID = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_CONTROLLER_ID_get, _nvmectl.NVMeIdentifyControllerStruct_CONTROLLER_ID_set)
    __swig_setmethods__["RESERVED1"] = _nvmectl.NVMeIdentifyControllerStruct_RESERVED1_set
    __swig_getmethods__["RESERVED1"] = _nvmectl.NVMeIdentifyControllerStruct_RESERVED1_get
    if _newclass:RESERVED1 = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_RESERVED1_get, _nvmectl.NVMeIdentifyControllerStruct_RESERVED1_set)
    __swig_setmethods__["OPTIONAL_ADMIN_COMMAND_SUPPORT"] = _nvmectl.NVMeIdentifyControllerStruct_OPTIONAL_ADMIN_COMMAND_SUPPORT_set
    __swig_getmethods__["OPTIONAL_ADMIN_COMMAND_SUPPORT"] = _nvmectl.NVMeIdentifyControllerStruct_OPTIONAL_ADMIN_COMMAND_SUPPORT_get
    if _newclass:OPTIONAL_ADMIN_COMMAND_SUPPORT = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_OPTIONAL_ADMIN_COMMAND_SUPPORT_get, _nvmectl.NVMeIdentifyControllerStruct_OPTIONAL_ADMIN_COMMAND_SUPPORT_set)
    __swig_setmethods__["ABORT_COMMAND_LIMIT"] = _nvmectl.NVMeIdentifyControllerStruct_ABORT_COMMAND_LIMIT_set
    __swig_getmethods__["ABORT_COMMAND_LIMIT"] = _nvmectl.NVMeIdentifyControllerStruct_ABORT_COMMAND_LIMIT_get
    if _newclass:ABORT_COMMAND_LIMIT = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_ABORT_COMMAND_LIMIT_get, _nvmectl.NVMeIdentifyControllerStruct_ABORT_COMMAND_LIMIT_set)
    __swig_setmethods__["ASYNC_EVENT_REQUEST_LIMIT"] = _nvmectl.NVMeIdentifyControllerStruct_ASYNC_EVENT_REQUEST_LIMIT_set
    __swig_getmethods__["ASYNC_EVENT_REQUEST_LIMIT"] = _nvmectl.NVMeIdentifyControllerStruct_ASYNC_EVENT_REQUEST_LIMIT_get
    if _newclass:ASYNC_EVENT_REQUEST_LIMIT = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_ASYNC_EVENT_REQUEST_LIMIT_get, _nvmectl.NVMeIdentifyControllerStruct_ASYNC_EVENT_REQUEST_LIMIT_set)
    __swig_setmethods__["FW_UPDATES"] = _nvmectl.NVMeIdentifyControllerStruct_FW_UPDATES_set
    __swig_getmethods__["FW_UPDATES"] = _nvmectl.NVMeIdentifyControllerStruct_FW_UPDATES_get
    if _newclass:FW_UPDATES = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_FW_UPDATES_get, _nvmectl.NVMeIdentifyControllerStruct_FW_UPDATES_set)
    __swig_setmethods__["LOG_PAGE_ATTR"] = _nvmectl.NVMeIdentifyControllerStruct_LOG_PAGE_ATTR_set
    __swig_getmethods__["LOG_PAGE_ATTR"] = _nvmectl.NVMeIdentifyControllerStruct_LOG_PAGE_ATTR_get
    if _newclass:LOG_PAGE_ATTR = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_LOG_PAGE_ATTR_get, _nvmectl.NVMeIdentifyControllerStruct_LOG_PAGE_ATTR_set)
    __swig_setmethods__["ERROR_LOG_PAGE_ENTRIES"] = _nvmectl.NVMeIdentifyControllerStruct_ERROR_LOG_PAGE_ENTRIES_set
    __swig_getmethods__["ERROR_LOG_PAGE_ENTRIES"] = _nvmectl.NVMeIdentifyControllerStruct_ERROR_LOG_PAGE_ENTRIES_get
    if _newclass:ERROR_LOG_PAGE_ENTRIES = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_ERROR_LOG_PAGE_ENTRIES_get, _nvmectl.NVMeIdentifyControllerStruct_ERROR_LOG_PAGE_ENTRIES_set)
    __swig_setmethods__["NUM_OF_POWER_STATE_SUPPORT"] = _nvmectl.NVMeIdentifyControllerStruct_NUM_OF_POWER_STATE_SUPPORT_set
    __swig_getmethods__["NUM_OF_POWER_STATE_SUPPORT"] = _nvmectl.NVMeIdentifyControllerStruct_NUM_OF_POWER_STATE_SUPPORT_get
    if _newclass:NUM_OF_POWER_STATE_SUPPORT = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_NUM_OF_POWER_STATE_SUPPORT_get, _nvmectl.NVMeIdentifyControllerStruct_NUM_OF_POWER_STATE_SUPPORT_set)
    __swig_setmethods__["ADMIN_VENDOR_SPECIFIC_COMMAND_CONFIG"] = _nvmectl.NVMeIdentifyControllerStruct_ADMIN_VENDOR_SPECIFIC_COMMAND_CONFIG_set
    __swig_getmethods__["ADMIN_VENDOR_SPECIFIC_COMMAND_CONFIG"] = _nvmectl.NVMeIdentifyControllerStruct_ADMIN_VENDOR_SPECIFIC_COMMAND_CONFIG_get
    if _newclass:ADMIN_VENDOR_SPECIFIC_COMMAND_CONFIG = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_ADMIN_VENDOR_SPECIFIC_COMMAND_CONFIG_get, _nvmectl.NVMeIdentifyControllerStruct_ADMIN_VENDOR_SPECIFIC_COMMAND_CONFIG_set)
    __swig_setmethods__["AUTONOMOUS_POWER_STATE_TRANSITION_ATTR"] = _nvmectl.NVMeIdentifyControllerStruct_AUTONOMOUS_POWER_STATE_TRANSITION_ATTR_set
    __swig_getmethods__["AUTONOMOUS_POWER_STATE_TRANSITION_ATTR"] = _nvmectl.NVMeIdentifyControllerStruct_AUTONOMOUS_POWER_STATE_TRANSITION_ATTR_get
    if _newclass:AUTONOMOUS_POWER_STATE_TRANSITION_ATTR = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_AUTONOMOUS_POWER_STATE_TRANSITION_ATTR_get, _nvmectl.NVMeIdentifyControllerStruct_AUTONOMOUS_POWER_STATE_TRANSITION_ATTR_set)
    __swig_setmethods__["RESERVED2"] = _nvmectl.NVMeIdentifyControllerStruct_RESERVED2_set
    __swig_getmethods__["RESERVED2"] = _nvmectl.NVMeIdentifyControllerStruct_RESERVED2_get
    if _newclass:RESERVED2 = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_RESERVED2_get, _nvmectl.NVMeIdentifyControllerStruct_RESERVED2_set)
    __swig_setmethods__["SQ_ENTRY_SIZE"] = _nvmectl.NVMeIdentifyControllerStruct_SQ_ENTRY_SIZE_set
    __swig_getmethods__["SQ_ENTRY_SIZE"] = _nvmectl.NVMeIdentifyControllerStruct_SQ_ENTRY_SIZE_get
    if _newclass:SQ_ENTRY_SIZE = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_SQ_ENTRY_SIZE_get, _nvmectl.NVMeIdentifyControllerStruct_SQ_ENTRY_SIZE_set)
    __swig_setmethods__["CQ_ENTRY_SIZE"] = _nvmectl.NVMeIdentifyControllerStruct_CQ_ENTRY_SIZE_set
    __swig_getmethods__["CQ_ENTRY_SIZE"] = _nvmectl.NVMeIdentifyControllerStruct_CQ_ENTRY_SIZE_get
    if _newclass:CQ_ENTRY_SIZE = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_CQ_ENTRY_SIZE_get, _nvmectl.NVMeIdentifyControllerStruct_CQ_ENTRY_SIZE_set)
    __swig_setmethods__["RESERVED3"] = _nvmectl.NVMeIdentifyControllerStruct_RESERVED3_set
    __swig_getmethods__["RESERVED3"] = _nvmectl.NVMeIdentifyControllerStruct_RESERVED3_get
    if _newclass:RESERVED3 = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_RESERVED3_get, _nvmectl.NVMeIdentifyControllerStruct_RESERVED3_set)
    __swig_setmethods__["NUM_OF_NAMESPACES"] = _nvmectl.NVMeIdentifyControllerStruct_NUM_OF_NAMESPACES_set
    __swig_getmethods__["NUM_OF_NAMESPACES"] = _nvmectl.NVMeIdentifyControllerStruct_NUM_OF_NAMESPACES_get
    if _newclass:NUM_OF_NAMESPACES = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_NUM_OF_NAMESPACES_get, _nvmectl.NVMeIdentifyControllerStruct_NUM_OF_NAMESPACES_set)
    __swig_setmethods__["OPTIONAL_NVM_COMMAND_SUPPORT"] = _nvmectl.NVMeIdentifyControllerStruct_OPTIONAL_NVM_COMMAND_SUPPORT_set
    __swig_getmethods__["OPTIONAL_NVM_COMMAND_SUPPORT"] = _nvmectl.NVMeIdentifyControllerStruct_OPTIONAL_NVM_COMMAND_SUPPORT_get
    if _newclass:OPTIONAL_NVM_COMMAND_SUPPORT = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_OPTIONAL_NVM_COMMAND_SUPPORT_get, _nvmectl.NVMeIdentifyControllerStruct_OPTIONAL_NVM_COMMAND_SUPPORT_set)
    __swig_setmethods__["FUSE_OP_SUPPORT"] = _nvmectl.NVMeIdentifyControllerStruct_FUSE_OP_SUPPORT_set
    __swig_getmethods__["FUSE_OP_SUPPORT"] = _nvmectl.NVMeIdentifyControllerStruct_FUSE_OP_SUPPORT_get
    if _newclass:FUSE_OP_SUPPORT = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_FUSE_OP_SUPPORT_get, _nvmectl.NVMeIdentifyControllerStruct_FUSE_OP_SUPPORT_set)
    __swig_setmethods__["FORMAT_NVM_ATTR"] = _nvmectl.NVMeIdentifyControllerStruct_FORMAT_NVM_ATTR_set
    __swig_getmethods__["FORMAT_NVM_ATTR"] = _nvmectl.NVMeIdentifyControllerStruct_FORMAT_NVM_ATTR_get
    if _newclass:FORMAT_NVM_ATTR = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_FORMAT_NVM_ATTR_get, _nvmectl.NVMeIdentifyControllerStruct_FORMAT_NVM_ATTR_set)
    __swig_setmethods__["VOLATILE_WRITE_CACHE"] = _nvmectl.NVMeIdentifyControllerStruct_VOLATILE_WRITE_CACHE_set
    __swig_getmethods__["VOLATILE_WRITE_CACHE"] = _nvmectl.NVMeIdentifyControllerStruct_VOLATILE_WRITE_CACHE_get
    if _newclass:VOLATILE_WRITE_CACHE = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_VOLATILE_WRITE_CACHE_get, _nvmectl.NVMeIdentifyControllerStruct_VOLATILE_WRITE_CACHE_set)
    __swig_setmethods__["ATOMIC_WRITE_UNIT_NORMAL"] = _nvmectl.NVMeIdentifyControllerStruct_ATOMIC_WRITE_UNIT_NORMAL_set
    __swig_getmethods__["ATOMIC_WRITE_UNIT_NORMAL"] = _nvmectl.NVMeIdentifyControllerStruct_ATOMIC_WRITE_UNIT_NORMAL_get
    if _newclass:ATOMIC_WRITE_UNIT_NORMAL = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_ATOMIC_WRITE_UNIT_NORMAL_get, _nvmectl.NVMeIdentifyControllerStruct_ATOMIC_WRITE_UNIT_NORMAL_set)
    __swig_setmethods__["ATOMIC_WRITE_UNIT_POWER_FAIL"] = _nvmectl.NVMeIdentifyControllerStruct_ATOMIC_WRITE_UNIT_POWER_FAIL_set
    __swig_getmethods__["ATOMIC_WRITE_UNIT_POWER_FAIL"] = _nvmectl.NVMeIdentifyControllerStruct_ATOMIC_WRITE_UNIT_POWER_FAIL_get
    if _newclass:ATOMIC_WRITE_UNIT_POWER_FAIL = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_ATOMIC_WRITE_UNIT_POWER_FAIL_get, _nvmectl.NVMeIdentifyControllerStruct_ATOMIC_WRITE_UNIT_POWER_FAIL_set)
    __swig_setmethods__["NVM_VENDOR_SPECIFIC_COMMAND_CONFIG"] = _nvmectl.NVMeIdentifyControllerStruct_NVM_VENDOR_SPECIFIC_COMMAND_CONFIG_set
    __swig_getmethods__["NVM_VENDOR_SPECIFIC_COMMAND_CONFIG"] = _nvmectl.NVMeIdentifyControllerStruct_NVM_VENDOR_SPECIFIC_COMMAND_CONFIG_get
    if _newclass:NVM_VENDOR_SPECIFIC_COMMAND_CONFIG = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_NVM_VENDOR_SPECIFIC_COMMAND_CONFIG_get, _nvmectl.NVMeIdentifyControllerStruct_NVM_VENDOR_SPECIFIC_COMMAND_CONFIG_set)
    __swig_setmethods__["RESERVED4"] = _nvmectl.NVMeIdentifyControllerStruct_RESERVED4_set
    __swig_getmethods__["RESERVED4"] = _nvmectl.NVMeIdentifyControllerStruct_RESERVED4_get
    if _newclass:RESERVED4 = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_RESERVED4_get, _nvmectl.NVMeIdentifyControllerStruct_RESERVED4_set)
    __swig_setmethods__["ATOMIC_COMPARE_AND_WRITE_UNIT"] = _nvmectl.NVMeIdentifyControllerStruct_ATOMIC_COMPARE_AND_WRITE_UNIT_set
    __swig_getmethods__["ATOMIC_COMPARE_AND_WRITE_UNIT"] = _nvmectl.NVMeIdentifyControllerStruct_ATOMIC_COMPARE_AND_WRITE_UNIT_get
    if _newclass:ATOMIC_COMPARE_AND_WRITE_UNIT = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_ATOMIC_COMPARE_AND_WRITE_UNIT_get, _nvmectl.NVMeIdentifyControllerStruct_ATOMIC_COMPARE_AND_WRITE_UNIT_set)
    __swig_setmethods__["RESERVED5"] = _nvmectl.NVMeIdentifyControllerStruct_RESERVED5_set
    __swig_getmethods__["RESERVED5"] = _nvmectl.NVMeIdentifyControllerStruct_RESERVED5_get
    if _newclass:RESERVED5 = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_RESERVED5_get, _nvmectl.NVMeIdentifyControllerStruct_RESERVED5_set)
    __swig_setmethods__["SGL_SUPPORT"] = _nvmectl.NVMeIdentifyControllerStruct_SGL_SUPPORT_set
    __swig_getmethods__["SGL_SUPPORT"] = _nvmectl.NVMeIdentifyControllerStruct_SGL_SUPPORT_get
    if _newclass:SGL_SUPPORT = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_SGL_SUPPORT_get, _nvmectl.NVMeIdentifyControllerStruct_SGL_SUPPORT_set)
    __swig_setmethods__["RESERVED6"] = _nvmectl.NVMeIdentifyControllerStruct_RESERVED6_set
    __swig_getmethods__["RESERVED6"] = _nvmectl.NVMeIdentifyControllerStruct_RESERVED6_get
    if _newclass:RESERVED6 = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_RESERVED6_get, _nvmectl.NVMeIdentifyControllerStruct_RESERVED6_set)
    __swig_setmethods__["RESERVED7"] = _nvmectl.NVMeIdentifyControllerStruct_RESERVED7_set
    __swig_getmethods__["RESERVED7"] = _nvmectl.NVMeIdentifyControllerStruct_RESERVED7_get
    if _newclass:RESERVED7 = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_RESERVED7_get, _nvmectl.NVMeIdentifyControllerStruct_RESERVED7_set)
    __swig_setmethods__["POWER_STATE_DESCRIPTORS"] = _nvmectl.NVMeIdentifyControllerStruct_POWER_STATE_DESCRIPTORS_set
    __swig_getmethods__["POWER_STATE_DESCRIPTORS"] = _nvmectl.NVMeIdentifyControllerStruct_POWER_STATE_DESCRIPTORS_get
    if _newclass:POWER_STATE_DESCRIPTORS = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_POWER_STATE_DESCRIPTORS_get, _nvmectl.NVMeIdentifyControllerStruct_POWER_STATE_DESCRIPTORS_set)
    __swig_setmethods__["MSP_REVISION"] = _nvmectl.NVMeIdentifyControllerStruct_MSP_REVISION_set
    __swig_getmethods__["MSP_REVISION"] = _nvmectl.NVMeIdentifyControllerStruct_MSP_REVISION_get
    if _newclass:MSP_REVISION = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_MSP_REVISION_get, _nvmectl.NVMeIdentifyControllerStruct_MSP_REVISION_set)
    __swig_setmethods__["TIME_TO_READY"] = _nvmectl.NVMeIdentifyControllerStruct_TIME_TO_READY_set
    __swig_getmethods__["TIME_TO_READY"] = _nvmectl.NVMeIdentifyControllerStruct_TIME_TO_READY_get
    if _newclass:TIME_TO_READY = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_TIME_TO_READY_get, _nvmectl.NVMeIdentifyControllerStruct_TIME_TO_READY_set)
    __swig_setmethods__["TRIMMER_STATUS"] = _nvmectl.NVMeIdentifyControllerStruct_TRIMMER_STATUS_set
    __swig_getmethods__["TRIMMER_STATUS"] = _nvmectl.NVMeIdentifyControllerStruct_TRIMMER_STATUS_get
    if _newclass:TRIMMER_STATUS = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_TRIMMER_STATUS_get, _nvmectl.NVMeIdentifyControllerStruct_TRIMMER_STATUS_set)
    __swig_setmethods__["BOOT_SOURCE"] = _nvmectl.NVMeIdentifyControllerStruct_BOOT_SOURCE_set
    __swig_getmethods__["BOOT_SOURCE"] = _nvmectl.NVMeIdentifyControllerStruct_BOOT_SOURCE_get
    if _newclass:BOOT_SOURCE = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_BOOT_SOURCE_get, _nvmectl.NVMeIdentifyControllerStruct_BOOT_SOURCE_set)
    __swig_setmethods__["BOOT_BLOCK_INDEX"] = _nvmectl.NVMeIdentifyControllerStruct_BOOT_BLOCK_INDEX_set
    __swig_getmethods__["BOOT_BLOCK_INDEX"] = _nvmectl.NVMeIdentifyControllerStruct_BOOT_BLOCK_INDEX_get
    if _newclass:BOOT_BLOCK_INDEX = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_BOOT_BLOCK_INDEX_get, _nvmectl.NVMeIdentifyControllerStruct_BOOT_BLOCK_INDEX_set)
    __swig_setmethods__["NUM_STORAGE_DEVICES"] = _nvmectl.NVMeIdentifyControllerStruct_NUM_STORAGE_DEVICES_set
    __swig_getmethods__["NUM_STORAGE_DEVICES"] = _nvmectl.NVMeIdentifyControllerStruct_NUM_STORAGE_DEVICES_get
    if _newclass:NUM_STORAGE_DEVICES = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_NUM_STORAGE_DEVICES_get, _nvmectl.NVMeIdentifyControllerStruct_NUM_STORAGE_DEVICES_set)
    __swig_setmethods__["RESERVED8"] = _nvmectl.NVMeIdentifyControllerStruct_RESERVED8_set
    __swig_getmethods__["RESERVED8"] = _nvmectl.NVMeIdentifyControllerStruct_RESERVED8_get
    if _newclass:RESERVED8 = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_RESERVED8_get, _nvmectl.NVMeIdentifyControllerStruct_RESERVED8_set)
    __swig_setmethods__["S3_CHIP_ID"] = _nvmectl.NVMeIdentifyControllerStruct_S3_CHIP_ID_set
    __swig_getmethods__["S3_CHIP_ID"] = _nvmectl.NVMeIdentifyControllerStruct_S3_CHIP_ID_get
    if _newclass:S3_CHIP_ID = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_S3_CHIP_ID_get, _nvmectl.NVMeIdentifyControllerStruct_S3_CHIP_ID_set)
    __swig_setmethods__["S3_CHIP_REVISION"] = _nvmectl.NVMeIdentifyControllerStruct_S3_CHIP_REVISION_set
    __swig_getmethods__["S3_CHIP_REVISION"] = _nvmectl.NVMeIdentifyControllerStruct_S3_CHIP_REVISION_get
    if _newclass:S3_CHIP_REVISION = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_S3_CHIP_REVISION_get, _nvmectl.NVMeIdentifyControllerStruct_S3_CHIP_REVISION_set)
    __swig_setmethods__["S3_DEVICE_DESCRIPTOR"] = _nvmectl.NVMeIdentifyControllerStruct_S3_DEVICE_DESCRIPTOR_set
    __swig_getmethods__["S3_DEVICE_DESCRIPTOR"] = _nvmectl.NVMeIdentifyControllerStruct_S3_DEVICE_DESCRIPTOR_get
    if _newclass:S3_DEVICE_DESCRIPTOR = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_S3_DEVICE_DESCRIPTOR_get, _nvmectl.NVMeIdentifyControllerStruct_S3_DEVICE_DESCRIPTOR_set)
    __swig_setmethods__["S3_ECC_VERSION_NAND_REVISION"] = _nvmectl.NVMeIdentifyControllerStruct_S3_ECC_VERSION_NAND_REVISION_set
    __swig_getmethods__["S3_ECC_VERSION_NAND_REVISION"] = _nvmectl.NVMeIdentifyControllerStruct_S3_ECC_VERSION_NAND_REVISION_get
    if _newclass:S3_ECC_VERSION_NAND_REVISION = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_S3_ECC_VERSION_NAND_REVISION_get, _nvmectl.NVMeIdentifyControllerStruct_S3_ECC_VERSION_NAND_REVISION_set)
    __swig_setmethods__["S3_FTL_MAJOR_VERSION"] = _nvmectl.NVMeIdentifyControllerStruct_S3_FTL_MAJOR_VERSION_set
    __swig_getmethods__["S3_FTL_MAJOR_VERSION"] = _nvmectl.NVMeIdentifyControllerStruct_S3_FTL_MAJOR_VERSION_get
    if _newclass:S3_FTL_MAJOR_VERSION = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_S3_FTL_MAJOR_VERSION_get, _nvmectl.NVMeIdentifyControllerStruct_S3_FTL_MAJOR_VERSION_set)
    __swig_setmethods__["S3_FTL_MINOR_VERSION"] = _nvmectl.NVMeIdentifyControllerStruct_S3_FTL_MINOR_VERSION_set
    __swig_getmethods__["S3_FTL_MINOR_VERSION"] = _nvmectl.NVMeIdentifyControllerStruct_S3_FTL_MINOR_VERSION_get
    if _newclass:S3_FTL_MINOR_VERSION = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_S3_FTL_MINOR_VERSION_get, _nvmectl.NVMeIdentifyControllerStruct_S3_FTL_MINOR_VERSION_set)
    __swig_setmethods__["S3_DM_VERSION"] = _nvmectl.NVMeIdentifyControllerStruct_S3_DM_VERSION_set
    __swig_getmethods__["S3_DM_VERSION"] = _nvmectl.NVMeIdentifyControllerStruct_S3_DM_VERSION_get
    if _newclass:S3_DM_VERSION = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_S3_DM_VERSION_get, _nvmectl.NVMeIdentifyControllerStruct_S3_DM_VERSION_set)
    __swig_setmethods__["S3_CONFIG_VERSION"] = _nvmectl.NVMeIdentifyControllerStruct_S3_CONFIG_VERSION_set
    __swig_getmethods__["S3_CONFIG_VERSION"] = _nvmectl.NVMeIdentifyControllerStruct_S3_CONFIG_VERSION_get
    if _newclass:S3_CONFIG_VERSION = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_S3_CONFIG_VERSION_get, _nvmectl.NVMeIdentifyControllerStruct_S3_CONFIG_VERSION_set)
    __swig_setmethods__["S3_FORMAT_UTIL_MAJOR_VERSION"] = _nvmectl.NVMeIdentifyControllerStruct_S3_FORMAT_UTIL_MAJOR_VERSION_set
    __swig_getmethods__["S3_FORMAT_UTIL_MAJOR_VERSION"] = _nvmectl.NVMeIdentifyControllerStruct_S3_FORMAT_UTIL_MAJOR_VERSION_get
    if _newclass:S3_FORMAT_UTIL_MAJOR_VERSION = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_S3_FORMAT_UTIL_MAJOR_VERSION_get, _nvmectl.NVMeIdentifyControllerStruct_S3_FORMAT_UTIL_MAJOR_VERSION_set)
    __swig_setmethods__["RESERVED9"] = _nvmectl.NVMeIdentifyControllerStruct_RESERVED9_set
    __swig_getmethods__["RESERVED9"] = _nvmectl.NVMeIdentifyControllerStruct_RESERVED9_get
    if _newclass:RESERVED9 = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_RESERVED9_get, _nvmectl.NVMeIdentifyControllerStruct_RESERVED9_set)
    __swig_setmethods__["ASP_BUILD_TRAIN"] = _nvmectl.NVMeIdentifyControllerStruct_ASP_BUILD_TRAIN_set
    __swig_getmethods__["ASP_BUILD_TRAIN"] = _nvmectl.NVMeIdentifyControllerStruct_ASP_BUILD_TRAIN_get
    if _newclass:ASP_BUILD_TRAIN = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_ASP_BUILD_TRAIN_get, _nvmectl.NVMeIdentifyControllerStruct_ASP_BUILD_TRAIN_set)
    __swig_setmethods__["MSP_BUILD_TRAIN"] = _nvmectl.NVMeIdentifyControllerStruct_MSP_BUILD_TRAIN_set
    __swig_getmethods__["MSP_BUILD_TRAIN"] = _nvmectl.NVMeIdentifyControllerStruct_MSP_BUILD_TRAIN_get
    if _newclass:MSP_BUILD_TRAIN = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_MSP_BUILD_TRAIN_get, _nvmectl.NVMeIdentifyControllerStruct_MSP_BUILD_TRAIN_set)
    __swig_setmethods__["RESERVED10"] = _nvmectl.NVMeIdentifyControllerStruct_RESERVED10_set
    __swig_getmethods__["RESERVED10"] = _nvmectl.NVMeIdentifyControllerStruct_RESERVED10_get
    if _newclass:RESERVED10 = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_RESERVED10_get, _nvmectl.NVMeIdentifyControllerStruct_RESERVED10_set)
    __swig_setmethods__["BOARD_TYPE"] = _nvmectl.NVMeIdentifyControllerStruct_BOARD_TYPE_set
    __swig_getmethods__["BOARD_TYPE"] = _nvmectl.NVMeIdentifyControllerStruct_BOARD_TYPE_get
    if _newclass:BOARD_TYPE = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_BOARD_TYPE_get, _nvmectl.NVMeIdentifyControllerStruct_BOARD_TYPE_set)
    __swig_setmethods__["NAND_TYPE"] = _nvmectl.NVMeIdentifyControllerStruct_NAND_TYPE_set
    __swig_getmethods__["NAND_TYPE"] = _nvmectl.NVMeIdentifyControllerStruct_NAND_TYPE_get
    if _newclass:NAND_TYPE = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_NAND_TYPE_get, _nvmectl.NVMeIdentifyControllerStruct_NAND_TYPE_set)
    __swig_setmethods__["NAND_VENDOR"] = _nvmectl.NVMeIdentifyControllerStruct_NAND_VENDOR_set
    __swig_getmethods__["NAND_VENDOR"] = _nvmectl.NVMeIdentifyControllerStruct_NAND_VENDOR_get
    if _newclass:NAND_VENDOR = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_NAND_VENDOR_get, _nvmectl.NVMeIdentifyControllerStruct_NAND_VENDOR_set)
    __swig_setmethods__["DRAM_VENDOR"] = _nvmectl.NVMeIdentifyControllerStruct_DRAM_VENDOR_set
    __swig_getmethods__["DRAM_VENDOR"] = _nvmectl.NVMeIdentifyControllerStruct_DRAM_VENDOR_get
    if _newclass:DRAM_VENDOR = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_DRAM_VENDOR_get, _nvmectl.NVMeIdentifyControllerStruct_DRAM_VENDOR_set)
    __swig_setmethods__["NOR_VENDOR"] = _nvmectl.NVMeIdentifyControllerStruct_NOR_VENDOR_set
    __swig_getmethods__["NOR_VENDOR"] = _nvmectl.NVMeIdentifyControllerStruct_NOR_VENDOR_get
    if _newclass:NOR_VENDOR = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_NOR_VENDOR_get, _nvmectl.NVMeIdentifyControllerStruct_NOR_VENDOR_set)
    __swig_setmethods__["CHANNELS_BITMAP"] = _nvmectl.NVMeIdentifyControllerStruct_CHANNELS_BITMAP_set
    __swig_getmethods__["CHANNELS_BITMAP"] = _nvmectl.NVMeIdentifyControllerStruct_CHANNELS_BITMAP_get
    if _newclass:CHANNELS_BITMAP = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_CHANNELS_BITMAP_get, _nvmectl.NVMeIdentifyControllerStruct_CHANNELS_BITMAP_set)
    __swig_setmethods__["SSD_CAPACITY"] = _nvmectl.NVMeIdentifyControllerStruct_SSD_CAPACITY_set
    __swig_getmethods__["SSD_CAPACITY"] = _nvmectl.NVMeIdentifyControllerStruct_SSD_CAPACITY_get
    if _newclass:SSD_CAPACITY = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_SSD_CAPACITY_get, _nvmectl.NVMeIdentifyControllerStruct_SSD_CAPACITY_set)
    __swig_setmethods__["CORNER_TYPE"] = _nvmectl.NVMeIdentifyControllerStruct_CORNER_TYPE_set
    __swig_getmethods__["CORNER_TYPE"] = _nvmectl.NVMeIdentifyControllerStruct_CORNER_TYPE_get
    if _newclass:CORNER_TYPE = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_CORNER_TYPE_get, _nvmectl.NVMeIdentifyControllerStruct_CORNER_TYPE_set)
    __swig_setmethods__["ROM_VERSION"] = _nvmectl.NVMeIdentifyControllerStruct_ROM_VERSION_set
    __swig_getmethods__["ROM_VERSION"] = _nvmectl.NVMeIdentifyControllerStruct_ROM_VERSION_get
    if _newclass:ROM_VERSION = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_ROM_VERSION_get, _nvmectl.NVMeIdentifyControllerStruct_ROM_VERSION_set)
    __swig_setmethods__["PTS_REVISION"] = _nvmectl.NVMeIdentifyControllerStruct_PTS_REVISION_set
    __swig_getmethods__["PTS_REVISION"] = _nvmectl.NVMeIdentifyControllerStruct_PTS_REVISION_get
    if _newclass:PTS_REVISION = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_PTS_REVISION_get, _nvmectl.NVMeIdentifyControllerStruct_PTS_REVISION_set)
    __swig_setmethods__["PTS_STATUS_BITMAP"] = _nvmectl.NVMeIdentifyControllerStruct_PTS_STATUS_BITMAP_set
    __swig_getmethods__["PTS_STATUS_BITMAP"] = _nvmectl.NVMeIdentifyControllerStruct_PTS_STATUS_BITMAP_get
    if _newclass:PTS_STATUS_BITMAP = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_PTS_STATUS_BITMAP_get, _nvmectl.NVMeIdentifyControllerStruct_PTS_STATUS_BITMAP_set)
    __swig_setmethods__["NAND_TYPE_STRING"] = _nvmectl.NVMeIdentifyControllerStruct_NAND_TYPE_STRING_set
    __swig_getmethods__["NAND_TYPE_STRING"] = _nvmectl.NVMeIdentifyControllerStruct_NAND_TYPE_STRING_get
    if _newclass:NAND_TYPE_STRING = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_NAND_TYPE_STRING_get, _nvmectl.NVMeIdentifyControllerStruct_NAND_TYPE_STRING_set)
    __swig_setmethods__["NAND_VENDOR_STRING"] = _nvmectl.NVMeIdentifyControllerStruct_NAND_VENDOR_STRING_set
    __swig_getmethods__["NAND_VENDOR_STRING"] = _nvmectl.NVMeIdentifyControllerStruct_NAND_VENDOR_STRING_get
    if _newclass:NAND_VENDOR_STRING = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_NAND_VENDOR_STRING_get, _nvmectl.NVMeIdentifyControllerStruct_NAND_VENDOR_STRING_set)
    __swig_setmethods__["MAXIMUM_PRIMARY_NS_SIZE"] = _nvmectl.NVMeIdentifyControllerStruct_MAXIMUM_PRIMARY_NS_SIZE_set
    __swig_getmethods__["MAXIMUM_PRIMARY_NS_SIZE"] = _nvmectl.NVMeIdentifyControllerStruct_MAXIMUM_PRIMARY_NS_SIZE_get
    if _newclass:MAXIMUM_PRIMARY_NS_SIZE = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_MAXIMUM_PRIMARY_NS_SIZE_get, _nvmectl.NVMeIdentifyControllerStruct_MAXIMUM_PRIMARY_NS_SIZE_set)
    __swig_setmethods__["NUM_OF_LANDINGS"] = _nvmectl.NVMeIdentifyControllerStruct_NUM_OF_LANDINGS_set
    __swig_getmethods__["NUM_OF_LANDINGS"] = _nvmectl.NVMeIdentifyControllerStruct_NUM_OF_LANDINGS_get
    if _newclass:NUM_OF_LANDINGS = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_NUM_OF_LANDINGS_get, _nvmectl.NVMeIdentifyControllerStruct_NUM_OF_LANDINGS_set)
    __swig_setmethods__["RESERVED11"] = _nvmectl.NVMeIdentifyControllerStruct_RESERVED11_set
    __swig_getmethods__["RESERVED11"] = _nvmectl.NVMeIdentifyControllerStruct_RESERVED11_get
    if _newclass:RESERVED11 = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_RESERVED11_get, _nvmectl.NVMeIdentifyControllerStruct_RESERVED11_set)
    __swig_setmethods__["RAW_FUSES"] = _nvmectl.NVMeIdentifyControllerStruct_RAW_FUSES_set
    __swig_getmethods__["RAW_FUSES"] = _nvmectl.NVMeIdentifyControllerStruct_RAW_FUSES_get
    if _newclass:RAW_FUSES = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_RAW_FUSES_get, _nvmectl.NVMeIdentifyControllerStruct_RAW_FUSES_set)
    __swig_setmethods__["RESERVED12"] = _nvmectl.NVMeIdentifyControllerStruct_RESERVED12_set
    __swig_getmethods__["RESERVED12"] = _nvmectl.NVMeIdentifyControllerStruct_RESERVED12_get
    if _newclass:RESERVED12 = _swig_property(_nvmectl.NVMeIdentifyControllerStruct_RESERVED12_get, _nvmectl.NVMeIdentifyControllerStruct_RESERVED12_set)
    def __init__(self): 
        this = _nvmectl.new_NVMeIdentifyControllerStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_NVMeIdentifyControllerStruct
    __del__ = lambda self : None;
NVMeIdentifyControllerStruct_swigregister = _nvmectl.NVMeIdentifyControllerStruct_swigregister
NVMeIdentifyControllerStruct_swigregister(NVMeIdentifyControllerStruct)

kSMARTCriticalSpareOffset = _nvmectl.kSMARTCriticalSpareOffset
kSMARTCriticalSpareLen = _nvmectl.kSMARTCriticalSpareLen
kSMARTCriticalSpareMask = _nvmectl.kSMARTCriticalSpareMask
kSMARTCriticalTempOffset = _nvmectl.kSMARTCriticalTempOffset
kSMARTCriticalTempLen = _nvmectl.kSMARTCriticalTempLen
kSMARTCriticalTempMask = _nvmectl.kSMARTCriticalTempMask
kSMARTCriticalReliabilityOffset = _nvmectl.kSMARTCriticalReliabilityOffset
kSMARTCriticalReliabilityLen = _nvmectl.kSMARTCriticalReliabilityLen
kSMARTCriticalReliabilityMask = _nvmectl.kSMARTCriticalReliabilityMask
kSMARTCriticalReadOnlyOffset = _nvmectl.kSMARTCriticalReadOnlyOffset
kSMARTCriticalReadOnlyLen = _nvmectl.kSMARTCriticalReadOnlyLen
kSMARTCriticalReadOnlyMask = _nvmectl.kSMARTCriticalReadOnlyMask
kSMARTCriticalBackupOffset = _nvmectl.kSMARTCriticalBackupOffset
kSMARTCriticalBackupLen = _nvmectl.kSMARTCriticalBackupLen
kSMARTCriticalBackupMask = _nvmectl.kSMARTCriticalBackupMask
kNVMeLogIDReserved = _nvmectl.kNVMeLogIDReserved
kNVMeLogIDErrorInfo = _nvmectl.kNVMeLogIDErrorInfo
kNVMeLogIDSMART = _nvmectl.kNVMeLogIDSMART
kNVMeLogIDFWSlotInfo = _nvmectl.kNVMeLogIDFWSlotInfo
kNVMeErrorInfoLogDataSize = _nvmectl.kNVMeErrorInfoLogDataSize
class NVMeErrorInfoLog(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NVMeErrorInfoLog, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NVMeErrorInfoLog, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ERROR_COUNT"] = _nvmectl.NVMeErrorInfoLog_ERROR_COUNT_set
    __swig_getmethods__["ERROR_COUNT"] = _nvmectl.NVMeErrorInfoLog_ERROR_COUNT_get
    if _newclass:ERROR_COUNT = _swig_property(_nvmectl.NVMeErrorInfoLog_ERROR_COUNT_get, _nvmectl.NVMeErrorInfoLog_ERROR_COUNT_set)
    __swig_setmethods__["SUBMISSION_QUEUE_ID"] = _nvmectl.NVMeErrorInfoLog_SUBMISSION_QUEUE_ID_set
    __swig_getmethods__["SUBMISSION_QUEUE_ID"] = _nvmectl.NVMeErrorInfoLog_SUBMISSION_QUEUE_ID_get
    if _newclass:SUBMISSION_QUEUE_ID = _swig_property(_nvmectl.NVMeErrorInfoLog_SUBMISSION_QUEUE_ID_get, _nvmectl.NVMeErrorInfoLog_SUBMISSION_QUEUE_ID_set)
    __swig_setmethods__["COMMAND_ID"] = _nvmectl.NVMeErrorInfoLog_COMMAND_ID_set
    __swig_getmethods__["COMMAND_ID"] = _nvmectl.NVMeErrorInfoLog_COMMAND_ID_get
    if _newclass:COMMAND_ID = _swig_property(_nvmectl.NVMeErrorInfoLog_COMMAND_ID_get, _nvmectl.NVMeErrorInfoLog_COMMAND_ID_set)
    __swig_setmethods__["PHASE_STATUS"] = _nvmectl.NVMeErrorInfoLog_PHASE_STATUS_set
    __swig_getmethods__["PHASE_STATUS"] = _nvmectl.NVMeErrorInfoLog_PHASE_STATUS_get
    if _newclass:PHASE_STATUS = _swig_property(_nvmectl.NVMeErrorInfoLog_PHASE_STATUS_get, _nvmectl.NVMeErrorInfoLog_PHASE_STATUS_set)
    __swig_setmethods__["PARAMETER_ERROR_LOCATION"] = _nvmectl.NVMeErrorInfoLog_PARAMETER_ERROR_LOCATION_set
    __swig_getmethods__["PARAMETER_ERROR_LOCATION"] = _nvmectl.NVMeErrorInfoLog_PARAMETER_ERROR_LOCATION_get
    if _newclass:PARAMETER_ERROR_LOCATION = _swig_property(_nvmectl.NVMeErrorInfoLog_PARAMETER_ERROR_LOCATION_get, _nvmectl.NVMeErrorInfoLog_PARAMETER_ERROR_LOCATION_set)
    __swig_setmethods__["LBA"] = _nvmectl.NVMeErrorInfoLog_LBA_set
    __swig_getmethods__["LBA"] = _nvmectl.NVMeErrorInfoLog_LBA_get
    if _newclass:LBA = _swig_property(_nvmectl.NVMeErrorInfoLog_LBA_get, _nvmectl.NVMeErrorInfoLog_LBA_set)
    __swig_setmethods__["NAMESPACE"] = _nvmectl.NVMeErrorInfoLog_NAMESPACE_set
    __swig_getmethods__["NAMESPACE"] = _nvmectl.NVMeErrorInfoLog_NAMESPACE_get
    if _newclass:NAMESPACE = _swig_property(_nvmectl.NVMeErrorInfoLog_NAMESPACE_get, _nvmectl.NVMeErrorInfoLog_NAMESPACE_set)
    __swig_setmethods__["VS_INFO_AVAILABLE"] = _nvmectl.NVMeErrorInfoLog_VS_INFO_AVAILABLE_set
    __swig_getmethods__["VS_INFO_AVAILABLE"] = _nvmectl.NVMeErrorInfoLog_VS_INFO_AVAILABLE_get
    if _newclass:VS_INFO_AVAILABLE = _swig_property(_nvmectl.NVMeErrorInfoLog_VS_INFO_AVAILABLE_get, _nvmectl.NVMeErrorInfoLog_VS_INFO_AVAILABLE_set)
    __swig_setmethods__["RESERVED"] = _nvmectl.NVMeErrorInfoLog_RESERVED_set
    __swig_getmethods__["RESERVED"] = _nvmectl.NVMeErrorInfoLog_RESERVED_get
    if _newclass:RESERVED = _swig_property(_nvmectl.NVMeErrorInfoLog_RESERVED_get, _nvmectl.NVMeErrorInfoLog_RESERVED_set)
    def __init__(self): 
        this = _nvmectl.new_NVMeErrorInfoLog()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_NVMeErrorInfoLog
    __del__ = lambda self : None;
NVMeErrorInfoLog_swigregister = _nvmectl.NVMeErrorInfoLog_swigregister
NVMeErrorInfoLog_swigregister(NVMeErrorInfoLog)

kNVMeSMARTLogDataSize = _nvmectl.kNVMeSMARTLogDataSize
kNVMeSMARTLogDataDWords = _nvmectl.kNVMeSMARTLogDataDWords
class NVMeSMARTData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NVMeSMARTData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NVMeSMARTData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CRITICAL_WARNING"] = _nvmectl.NVMeSMARTData_CRITICAL_WARNING_set
    __swig_getmethods__["CRITICAL_WARNING"] = _nvmectl.NVMeSMARTData_CRITICAL_WARNING_get
    if _newclass:CRITICAL_WARNING = _swig_property(_nvmectl.NVMeSMARTData_CRITICAL_WARNING_get, _nvmectl.NVMeSMARTData_CRITICAL_WARNING_set)
    __swig_setmethods__["TEMPERATURE"] = _nvmectl.NVMeSMARTData_TEMPERATURE_set
    __swig_getmethods__["TEMPERATURE"] = _nvmectl.NVMeSMARTData_TEMPERATURE_get
    if _newclass:TEMPERATURE = _swig_property(_nvmectl.NVMeSMARTData_TEMPERATURE_get, _nvmectl.NVMeSMARTData_TEMPERATURE_set)
    __swig_setmethods__["AVAILABLE_SPARE"] = _nvmectl.NVMeSMARTData_AVAILABLE_SPARE_set
    __swig_getmethods__["AVAILABLE_SPARE"] = _nvmectl.NVMeSMARTData_AVAILABLE_SPARE_get
    if _newclass:AVAILABLE_SPARE = _swig_property(_nvmectl.NVMeSMARTData_AVAILABLE_SPARE_get, _nvmectl.NVMeSMARTData_AVAILABLE_SPARE_set)
    __swig_setmethods__["AVAILABLE_SPARE_THRESHOLD"] = _nvmectl.NVMeSMARTData_AVAILABLE_SPARE_THRESHOLD_set
    __swig_getmethods__["AVAILABLE_SPARE_THRESHOLD"] = _nvmectl.NVMeSMARTData_AVAILABLE_SPARE_THRESHOLD_get
    if _newclass:AVAILABLE_SPARE_THRESHOLD = _swig_property(_nvmectl.NVMeSMARTData_AVAILABLE_SPARE_THRESHOLD_get, _nvmectl.NVMeSMARTData_AVAILABLE_SPARE_THRESHOLD_set)
    __swig_setmethods__["PERCENTAGE_USED"] = _nvmectl.NVMeSMARTData_PERCENTAGE_USED_set
    __swig_getmethods__["PERCENTAGE_USED"] = _nvmectl.NVMeSMARTData_PERCENTAGE_USED_get
    if _newclass:PERCENTAGE_USED = _swig_property(_nvmectl.NVMeSMARTData_PERCENTAGE_USED_get, _nvmectl.NVMeSMARTData_PERCENTAGE_USED_set)
    __swig_setmethods__["RESERVED1"] = _nvmectl.NVMeSMARTData_RESERVED1_set
    __swig_getmethods__["RESERVED1"] = _nvmectl.NVMeSMARTData_RESERVED1_get
    if _newclass:RESERVED1 = _swig_property(_nvmectl.NVMeSMARTData_RESERVED1_get, _nvmectl.NVMeSMARTData_RESERVED1_set)
    __swig_setmethods__["DATA_UNITS_READ"] = _nvmectl.NVMeSMARTData_DATA_UNITS_READ_set
    __swig_getmethods__["DATA_UNITS_READ"] = _nvmectl.NVMeSMARTData_DATA_UNITS_READ_get
    if _newclass:DATA_UNITS_READ = _swig_property(_nvmectl.NVMeSMARTData_DATA_UNITS_READ_get, _nvmectl.NVMeSMARTData_DATA_UNITS_READ_set)
    __swig_setmethods__["DATA_UNITS_WRITTEN"] = _nvmectl.NVMeSMARTData_DATA_UNITS_WRITTEN_set
    __swig_getmethods__["DATA_UNITS_WRITTEN"] = _nvmectl.NVMeSMARTData_DATA_UNITS_WRITTEN_get
    if _newclass:DATA_UNITS_WRITTEN = _swig_property(_nvmectl.NVMeSMARTData_DATA_UNITS_WRITTEN_get, _nvmectl.NVMeSMARTData_DATA_UNITS_WRITTEN_set)
    __swig_setmethods__["HOST_READ_COMMANDS"] = _nvmectl.NVMeSMARTData_HOST_READ_COMMANDS_set
    __swig_getmethods__["HOST_READ_COMMANDS"] = _nvmectl.NVMeSMARTData_HOST_READ_COMMANDS_get
    if _newclass:HOST_READ_COMMANDS = _swig_property(_nvmectl.NVMeSMARTData_HOST_READ_COMMANDS_get, _nvmectl.NVMeSMARTData_HOST_READ_COMMANDS_set)
    __swig_setmethods__["HOST_WRITE_COMMANDS"] = _nvmectl.NVMeSMARTData_HOST_WRITE_COMMANDS_set
    __swig_getmethods__["HOST_WRITE_COMMANDS"] = _nvmectl.NVMeSMARTData_HOST_WRITE_COMMANDS_get
    if _newclass:HOST_WRITE_COMMANDS = _swig_property(_nvmectl.NVMeSMARTData_HOST_WRITE_COMMANDS_get, _nvmectl.NVMeSMARTData_HOST_WRITE_COMMANDS_set)
    __swig_setmethods__["CONTROLLER_BUSY_TIME"] = _nvmectl.NVMeSMARTData_CONTROLLER_BUSY_TIME_set
    __swig_getmethods__["CONTROLLER_BUSY_TIME"] = _nvmectl.NVMeSMARTData_CONTROLLER_BUSY_TIME_get
    if _newclass:CONTROLLER_BUSY_TIME = _swig_property(_nvmectl.NVMeSMARTData_CONTROLLER_BUSY_TIME_get, _nvmectl.NVMeSMARTData_CONTROLLER_BUSY_TIME_set)
    __swig_setmethods__["POWER_CYCLES"] = _nvmectl.NVMeSMARTData_POWER_CYCLES_set
    __swig_getmethods__["POWER_CYCLES"] = _nvmectl.NVMeSMARTData_POWER_CYCLES_get
    if _newclass:POWER_CYCLES = _swig_property(_nvmectl.NVMeSMARTData_POWER_CYCLES_get, _nvmectl.NVMeSMARTData_POWER_CYCLES_set)
    __swig_setmethods__["POWER_ON_HOURS"] = _nvmectl.NVMeSMARTData_POWER_ON_HOURS_set
    __swig_getmethods__["POWER_ON_HOURS"] = _nvmectl.NVMeSMARTData_POWER_ON_HOURS_get
    if _newclass:POWER_ON_HOURS = _swig_property(_nvmectl.NVMeSMARTData_POWER_ON_HOURS_get, _nvmectl.NVMeSMARTData_POWER_ON_HOURS_set)
    __swig_setmethods__["UNSAFE_SHUTDOWNS"] = _nvmectl.NVMeSMARTData_UNSAFE_SHUTDOWNS_set
    __swig_getmethods__["UNSAFE_SHUTDOWNS"] = _nvmectl.NVMeSMARTData_UNSAFE_SHUTDOWNS_get
    if _newclass:UNSAFE_SHUTDOWNS = _swig_property(_nvmectl.NVMeSMARTData_UNSAFE_SHUTDOWNS_get, _nvmectl.NVMeSMARTData_UNSAFE_SHUTDOWNS_set)
    __swig_setmethods__["MEDIA_ERRORS"] = _nvmectl.NVMeSMARTData_MEDIA_ERRORS_set
    __swig_getmethods__["MEDIA_ERRORS"] = _nvmectl.NVMeSMARTData_MEDIA_ERRORS_get
    if _newclass:MEDIA_ERRORS = _swig_property(_nvmectl.NVMeSMARTData_MEDIA_ERRORS_get, _nvmectl.NVMeSMARTData_MEDIA_ERRORS_set)
    __swig_setmethods__["NUM_ERROR_INFO_LOG_ENTRIES"] = _nvmectl.NVMeSMARTData_NUM_ERROR_INFO_LOG_ENTRIES_set
    __swig_getmethods__["NUM_ERROR_INFO_LOG_ENTRIES"] = _nvmectl.NVMeSMARTData_NUM_ERROR_INFO_LOG_ENTRIES_get
    if _newclass:NUM_ERROR_INFO_LOG_ENTRIES = _swig_property(_nvmectl.NVMeSMARTData_NUM_ERROR_INFO_LOG_ENTRIES_get, _nvmectl.NVMeSMARTData_NUM_ERROR_INFO_LOG_ENTRIES_set)
    __swig_setmethods__["RESERVED2"] = _nvmectl.NVMeSMARTData_RESERVED2_set
    __swig_getmethods__["RESERVED2"] = _nvmectl.NVMeSMARTData_RESERVED2_get
    if _newclass:RESERVED2 = _swig_property(_nvmectl.NVMeSMARTData_RESERVED2_get, _nvmectl.NVMeSMARTData_RESERVED2_set)
    def __init__(self): 
        this = _nvmectl.new_NVMeSMARTData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_NVMeSMARTData
    __del__ = lambda self : None;
NVMeSMARTData_swigregister = _nvmectl.NVMeSMARTData_swigregister
NVMeSMARTData_swigregister(NVMeSMARTData)

kLBADataFormatRPerfrormaceMask = _nvmectl.kLBADataFormatRPerfrormaceMask
class NVMeLBAFormatDataStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NVMeLBAFormatDataStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NVMeLBAFormatDataStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["METADATA_SIZE"] = _nvmectl.NVMeLBAFormatDataStruct_METADATA_SIZE_set
    __swig_getmethods__["METADATA_SIZE"] = _nvmectl.NVMeLBAFormatDataStruct_METADATA_SIZE_get
    if _newclass:METADATA_SIZE = _swig_property(_nvmectl.NVMeLBAFormatDataStruct_METADATA_SIZE_get, _nvmectl.NVMeLBAFormatDataStruct_METADATA_SIZE_set)
    __swig_setmethods__["LBA_DATA_SIZE"] = _nvmectl.NVMeLBAFormatDataStruct_LBA_DATA_SIZE_set
    __swig_getmethods__["LBA_DATA_SIZE"] = _nvmectl.NVMeLBAFormatDataStruct_LBA_DATA_SIZE_get
    if _newclass:LBA_DATA_SIZE = _swig_property(_nvmectl.NVMeLBAFormatDataStruct_LBA_DATA_SIZE_get, _nvmectl.NVMeLBAFormatDataStruct_LBA_DATA_SIZE_set)
    __swig_setmethods__["RELATIVE_PERFORMANCE"] = _nvmectl.NVMeLBAFormatDataStruct_RELATIVE_PERFORMANCE_set
    __swig_getmethods__["RELATIVE_PERFORMANCE"] = _nvmectl.NVMeLBAFormatDataStruct_RELATIVE_PERFORMANCE_get
    if _newclass:RELATIVE_PERFORMANCE = _swig_property(_nvmectl.NVMeLBAFormatDataStruct_RELATIVE_PERFORMANCE_get, _nvmectl.NVMeLBAFormatDataStruct_RELATIVE_PERFORMANCE_set)
    def __init__(self): 
        this = _nvmectl.new_NVMeLBAFormatDataStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_NVMeLBAFormatDataStruct
    __del__ = lambda self : None;
NVMeLBAFormatDataStruct_swigregister = _nvmectl.NVMeLBAFormatDataStruct_swigregister
NVMeLBAFormatDataStruct_swigregister(NVMeLBAFormatDataStruct)

kNVMeFormattedLBASizeFormatIndexOffset = _nvmectl.kNVMeFormattedLBASizeFormatIndexOffset
kNVMeFormattedLBASizeFormatIndexLen = _nvmectl.kNVMeFormattedLBASizeFormatIndexLen
kNVMeFormattedLBASizeFormatIndexMask = _nvmectl.kNVMeFormattedLBASizeFormatIndexMask
kNVMeFormattedLBASizeMetadataExtendedLBAOffset = _nvmectl.kNVMeFormattedLBASizeMetadataExtendedLBAOffset
kNVMeFormattedLBASizeMetadataExtendedLBALen = _nvmectl.kNVMeFormattedLBASizeMetadataExtendedLBALen
kNVMeFormattedLBASizeMetadataExtendedLBAMask = _nvmectl.kNVMeFormattedLBASizeMetadataExtendedLBAMask
class NVMeIdentifyNamespaceStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NVMeIdentifyNamespaceStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NVMeIdentifyNamespaceStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["NAMESPACE_SIZE"] = _nvmectl.NVMeIdentifyNamespaceStruct_NAMESPACE_SIZE_set
    __swig_getmethods__["NAMESPACE_SIZE"] = _nvmectl.NVMeIdentifyNamespaceStruct_NAMESPACE_SIZE_get
    if _newclass:NAMESPACE_SIZE = _swig_property(_nvmectl.NVMeIdentifyNamespaceStruct_NAMESPACE_SIZE_get, _nvmectl.NVMeIdentifyNamespaceStruct_NAMESPACE_SIZE_set)
    __swig_setmethods__["NAMESPACE_CAPACITY"] = _nvmectl.NVMeIdentifyNamespaceStruct_NAMESPACE_CAPACITY_set
    __swig_getmethods__["NAMESPACE_CAPACITY"] = _nvmectl.NVMeIdentifyNamespaceStruct_NAMESPACE_CAPACITY_get
    if _newclass:NAMESPACE_CAPACITY = _swig_property(_nvmectl.NVMeIdentifyNamespaceStruct_NAMESPACE_CAPACITY_get, _nvmectl.NVMeIdentifyNamespaceStruct_NAMESPACE_CAPACITY_set)
    __swig_setmethods__["NAMESPACE_UTILIZATION"] = _nvmectl.NVMeIdentifyNamespaceStruct_NAMESPACE_UTILIZATION_set
    __swig_getmethods__["NAMESPACE_UTILIZATION"] = _nvmectl.NVMeIdentifyNamespaceStruct_NAMESPACE_UTILIZATION_get
    if _newclass:NAMESPACE_UTILIZATION = _swig_property(_nvmectl.NVMeIdentifyNamespaceStruct_NAMESPACE_UTILIZATION_get, _nvmectl.NVMeIdentifyNamespaceStruct_NAMESPACE_UTILIZATION_set)
    __swig_setmethods__["NAMESPACE_FEATURES"] = _nvmectl.NVMeIdentifyNamespaceStruct_NAMESPACE_FEATURES_set
    __swig_getmethods__["NAMESPACE_FEATURES"] = _nvmectl.NVMeIdentifyNamespaceStruct_NAMESPACE_FEATURES_get
    if _newclass:NAMESPACE_FEATURES = _swig_property(_nvmectl.NVMeIdentifyNamespaceStruct_NAMESPACE_FEATURES_get, _nvmectl.NVMeIdentifyNamespaceStruct_NAMESPACE_FEATURES_set)
    __swig_setmethods__["NUM_OF_LBA_FORMATS"] = _nvmectl.NVMeIdentifyNamespaceStruct_NUM_OF_LBA_FORMATS_set
    __swig_getmethods__["NUM_OF_LBA_FORMATS"] = _nvmectl.NVMeIdentifyNamespaceStruct_NUM_OF_LBA_FORMATS_get
    if _newclass:NUM_OF_LBA_FORMATS = _swig_property(_nvmectl.NVMeIdentifyNamespaceStruct_NUM_OF_LBA_FORMATS_get, _nvmectl.NVMeIdentifyNamespaceStruct_NUM_OF_LBA_FORMATS_set)
    __swig_setmethods__["FORMATTED_LBA_SIZE"] = _nvmectl.NVMeIdentifyNamespaceStruct_FORMATTED_LBA_SIZE_set
    __swig_getmethods__["FORMATTED_LBA_SIZE"] = _nvmectl.NVMeIdentifyNamespaceStruct_FORMATTED_LBA_SIZE_get
    if _newclass:FORMATTED_LBA_SIZE = _swig_property(_nvmectl.NVMeIdentifyNamespaceStruct_FORMATTED_LBA_SIZE_get, _nvmectl.NVMeIdentifyNamespaceStruct_FORMATTED_LBA_SIZE_set)
    __swig_setmethods__["METADATA_CAPS"] = _nvmectl.NVMeIdentifyNamespaceStruct_METADATA_CAPS_set
    __swig_getmethods__["METADATA_CAPS"] = _nvmectl.NVMeIdentifyNamespaceStruct_METADATA_CAPS_get
    if _newclass:METADATA_CAPS = _swig_property(_nvmectl.NVMeIdentifyNamespaceStruct_METADATA_CAPS_get, _nvmectl.NVMeIdentifyNamespaceStruct_METADATA_CAPS_set)
    __swig_setmethods__["E2E_DATA_PROTECTION_CAPS"] = _nvmectl.NVMeIdentifyNamespaceStruct_E2E_DATA_PROTECTION_CAPS_set
    __swig_getmethods__["E2E_DATA_PROTECTION_CAPS"] = _nvmectl.NVMeIdentifyNamespaceStruct_E2E_DATA_PROTECTION_CAPS_get
    if _newclass:E2E_DATA_PROTECTION_CAPS = _swig_property(_nvmectl.NVMeIdentifyNamespaceStruct_E2E_DATA_PROTECTION_CAPS_get, _nvmectl.NVMeIdentifyNamespaceStruct_E2E_DATA_PROTECTION_CAPS_set)
    __swig_setmethods__["E2E_DATA_PROTECTION_TYPE_SETTINGS"] = _nvmectl.NVMeIdentifyNamespaceStruct_E2E_DATA_PROTECTION_TYPE_SETTINGS_set
    __swig_getmethods__["E2E_DATA_PROTECTION_TYPE_SETTINGS"] = _nvmectl.NVMeIdentifyNamespaceStruct_E2E_DATA_PROTECTION_TYPE_SETTINGS_get
    if _newclass:E2E_DATA_PROTECTION_TYPE_SETTINGS = _swig_property(_nvmectl.NVMeIdentifyNamespaceStruct_E2E_DATA_PROTECTION_TYPE_SETTINGS_get, _nvmectl.NVMeIdentifyNamespaceStruct_E2E_DATA_PROTECTION_TYPE_SETTINGS_set)
    __swig_setmethods__["NS_MULTIPATH_IO_AND_NS_SHARING_CAPS"] = _nvmectl.NVMeIdentifyNamespaceStruct_NS_MULTIPATH_IO_AND_NS_SHARING_CAPS_set
    __swig_getmethods__["NS_MULTIPATH_IO_AND_NS_SHARING_CAPS"] = _nvmectl.NVMeIdentifyNamespaceStruct_NS_MULTIPATH_IO_AND_NS_SHARING_CAPS_get
    if _newclass:NS_MULTIPATH_IO_AND_NS_SHARING_CAPS = _swig_property(_nvmectl.NVMeIdentifyNamespaceStruct_NS_MULTIPATH_IO_AND_NS_SHARING_CAPS_get, _nvmectl.NVMeIdentifyNamespaceStruct_NS_MULTIPATH_IO_AND_NS_SHARING_CAPS_set)
    __swig_setmethods__["RESERVATION_CAPABILITIES"] = _nvmectl.NVMeIdentifyNamespaceStruct_RESERVATION_CAPABILITIES_set
    __swig_getmethods__["RESERVATION_CAPABILITIES"] = _nvmectl.NVMeIdentifyNamespaceStruct_RESERVATION_CAPABILITIES_get
    if _newclass:RESERVATION_CAPABILITIES = _swig_property(_nvmectl.NVMeIdentifyNamespaceStruct_RESERVATION_CAPABILITIES_get, _nvmectl.NVMeIdentifyNamespaceStruct_RESERVATION_CAPABILITIES_set)
    __swig_setmethods__["RESERVED1"] = _nvmectl.NVMeIdentifyNamespaceStruct_RESERVED1_set
    __swig_getmethods__["RESERVED1"] = _nvmectl.NVMeIdentifyNamespaceStruct_RESERVED1_get
    if _newclass:RESERVED1 = _swig_property(_nvmectl.NVMeIdentifyNamespaceStruct_RESERVED1_get, _nvmectl.NVMeIdentifyNamespaceStruct_RESERVED1_set)
    __swig_setmethods__["IEEE_EXTENDED_UID"] = _nvmectl.NVMeIdentifyNamespaceStruct_IEEE_EXTENDED_UID_set
    __swig_getmethods__["IEEE_EXTENDED_UID"] = _nvmectl.NVMeIdentifyNamespaceStruct_IEEE_EXTENDED_UID_get
    if _newclass:IEEE_EXTENDED_UID = _swig_property(_nvmectl.NVMeIdentifyNamespaceStruct_IEEE_EXTENDED_UID_get, _nvmectl.NVMeIdentifyNamespaceStruct_IEEE_EXTENDED_UID_set)
    __swig_setmethods__["LBA_FORMATS"] = _nvmectl.NVMeIdentifyNamespaceStruct_LBA_FORMATS_set
    __swig_getmethods__["LBA_FORMATS"] = _nvmectl.NVMeIdentifyNamespaceStruct_LBA_FORMATS_get
    if _newclass:LBA_FORMATS = _swig_property(_nvmectl.NVMeIdentifyNamespaceStruct_LBA_FORMATS_get, _nvmectl.NVMeIdentifyNamespaceStruct_LBA_FORMATS_set)
    __swig_setmethods__["RESERVED2"] = _nvmectl.NVMeIdentifyNamespaceStruct_RESERVED2_set
    __swig_getmethods__["RESERVED2"] = _nvmectl.NVMeIdentifyNamespaceStruct_RESERVED2_get
    if _newclass:RESERVED2 = _swig_property(_nvmectl.NVMeIdentifyNamespaceStruct_RESERVED2_get, _nvmectl.NVMeIdentifyNamespaceStruct_RESERVED2_set)
    __swig_setmethods__["NSTYPE"] = _nvmectl.NVMeIdentifyNamespaceStruct_NSTYPE_set
    __swig_getmethods__["NSTYPE"] = _nvmectl.NVMeIdentifyNamespaceStruct_NSTYPE_get
    if _newclass:NSTYPE = _swig_property(_nvmectl.NVMeIdentifyNamespaceStruct_NSTYPE_get, _nvmectl.NVMeIdentifyNamespaceStruct_NSTYPE_set)
    __swig_setmethods__["VENDOR_SPECIFIC"] = _nvmectl.NVMeIdentifyNamespaceStruct_VENDOR_SPECIFIC_set
    __swig_getmethods__["VENDOR_SPECIFIC"] = _nvmectl.NVMeIdentifyNamespaceStruct_VENDOR_SPECIFIC_get
    if _newclass:VENDOR_SPECIFIC = _swig_property(_nvmectl.NVMeIdentifyNamespaceStruct_VENDOR_SPECIFIC_get, _nvmectl.NVMeIdentifyNamespaceStruct_VENDOR_SPECIFIC_set)
    def __init__(self): 
        this = _nvmectl.new_NVMeIdentifyNamespaceStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_NVMeIdentifyNamespaceStruct
    __del__ = lambda self : None;
NVMeIdentifyNamespaceStruct_swigregister = _nvmectl.NVMeIdentifyNamespaceStruct_swigregister
NVMeIdentifyNamespaceStruct_swigregister(NVMeIdentifyNamespaceStruct)

kNVMeDefaultNamespaceID = _nvmectl.kNVMeDefaultNamespaceID
kNVMeGlobalNamespaceID = _nvmectl.kNVMeGlobalNamespaceID
kNVMeCompletionSQHeadMask = _nvmectl.kNVMeCompletionSQHeadMask
kNVMeCompletionSQIDMask = _nvmectl.kNVMeCompletionSQIDMask
kNVMeCompletionCIDMask = _nvmectl.kNVMeCompletionCIDMask
kNVMeCompletionPMask = _nvmectl.kNVMeCompletionPMask
kNVMeCompletionStatusOffset = _nvmectl.kNVMeCompletionStatusOffset
kNVMeCompletionStatusLen = _nvmectl.kNVMeCompletionStatusLen
kNVMeCompletionStatusMask = _nvmectl.kNVMeCompletionStatusMask
kNVMeCompletionStatusCodeOffset = _nvmectl.kNVMeCompletionStatusCodeOffset
kNVMeCompletionStatusCodeLen = _nvmectl.kNVMeCompletionStatusCodeLen
kNVMeCompletionStatusCodeMask = _nvmectl.kNVMeCompletionStatusCodeMask
kNVMeCompletionStatusCodeTypeOffset = _nvmectl.kNVMeCompletionStatusCodeTypeOffset
kNVMeCompletionStatusCodeTypeLen = _nvmectl.kNVMeCompletionStatusCodeTypeLen
kNVMeCompletionStatusCodeTypeMask = _nvmectl.kNVMeCompletionStatusCodeTypeMask
kNVMeCompletion_Status_M_Mask = _nvmectl.kNVMeCompletion_Status_M_Mask
kNVMeCompletion_Status_DNR_Mask = _nvmectl.kNVMeCompletion_Status_DNR_Mask
kNVMeStatusTypeGeneric = _nvmectl.kNVMeStatusTypeGeneric
kNVMeStatusTypeSpecific = _nvmectl.kNVMeStatusTypeSpecific
kNVMeStatusTypeMediaError = _nvmectl.kNVMeStatusTypeMediaError
kNVMeStatusSuccess = _nvmectl.kNVMeStatusSuccess
kNVMeStatusInvalidOpcode = _nvmectl.kNVMeStatusInvalidOpcode
kNVMeStatusInvalidField = _nvmectl.kNVMeStatusInvalidField
kNVMeStatusCmdIDConflict = _nvmectl.kNVMeStatusCmdIDConflict
kNVMeStatusDataTransferError = _nvmectl.kNVMeStatusDataTransferError
kNVMeStatusPowerLoss = _nvmectl.kNVMeStatusPowerLoss
kNVMeStatusInternalError = _nvmectl.kNVMeStatusInternalError
kNVMeStatusAbortRequested = _nvmectl.kNVMeStatusAbortRequested
kNVMeStatusAbortSQDeletion = _nvmectl.kNVMeStatusAbortSQDeletion
kNVMeStatusAbortFailedFused = _nvmectl.kNVMeStatusAbortFailedFused
kNVMeStatusAbortMissingFused = _nvmectl.kNVMeStatusAbortMissingFused
kNVMeStatusInvalidNamespace = _nvmectl.kNVMeStatusInvalidNamespace
kNVMeStatusCmdSeqError = _nvmectl.kNVMeStatusCmdSeqError
kNVMeStatusLBAOutOfRange = _nvmectl.kNVMeStatusLBAOutOfRange
kNVMeStatusCapacityExceeded = _nvmectl.kNVMeStatusCapacityExceeded
kNVMeStatusNamespaceNotReady = _nvmectl.kNVMeStatusNamespaceNotReady
kNVMeStatusCQInvalid = _nvmectl.kNVMeStatusCQInvalid
kNVMeStatusInvalidQueueID = _nvmectl.kNVMeStatusInvalidQueueID
kNVMeStatusMaxQueueSize = _nvmectl.kNVMeStatusMaxQueueSize
kNVMeStatusAbortLimit = _nvmectl.kNVMeStatusAbortLimit
kNVMeStatusReserved = _nvmectl.kNVMeStatusReserved
kNVMeStatusAsyncEventLimit = _nvmectl.kNVMeStatusAsyncEventLimit
kNVMeStatusInvalidFWSlot = _nvmectl.kNVMeStatusInvalidFWSlot
kNVMeStatusInvalidFWImage = _nvmectl.kNVMeStatusInvalidFWImage
kNVMeStatusInvalidIntVector = _nvmectl.kNVMeStatusInvalidIntVector
kNVMeStatusInvalidLogPage = _nvmectl.kNVMeStatusInvalidLogPage
kNVMeStatusInvalidFormat = _nvmectl.kNVMeStatusInvalidFormat
kNVMeStatusFWResetRequired = _nvmectl.kNVMeStatusFWResetRequired
kNVMeStatusCommandSequenceError = _nvmectl.kNVMeStatusCommandSequenceError
kNVMeStatusConflictingAttributes = _nvmectl.kNVMeStatusConflictingAttributes
kNVMeStatusInvalidProtectionInfo = _nvmectl.kNVMeStatusInvalidProtectionInfo
kNVMeStatusAttemptedWritetoRORange = _nvmectl.kNVMeStatusAttemptedWritetoRORange
kNVMeStatusWriteFault = _nvmectl.kNVMeStatusWriteFault
kNVMeStatusUnrecoveredRead = _nvmectl.kNVMeStatusUnrecoveredRead
kNVMeStatusEndGuardError = _nvmectl.kNVMeStatusEndGuardError
kNVMeStatusEndAppTagError = _nvmectl.kNVMeStatusEndAppTagError
kNVMeStatusEndRefTagError = _nvmectl.kNVMeStatusEndRefTagError
kNVMeStatusComparefailure = _nvmectl.kNVMeStatusComparefailure
kNVMeStatusAccessDenied = _nvmectl.kNVMeStatusAccessDenied
kNVMeOpcodeDeleteIOSubmissionQueue = _nvmectl.kNVMeOpcodeDeleteIOSubmissionQueue
kNVMeOpcodeCreateIOSubmissionQueue = _nvmectl.kNVMeOpcodeCreateIOSubmissionQueue
kNVMeOpcodeGetLogPage = _nvmectl.kNVMeOpcodeGetLogPage
kNVMeOpcodeDeleteIOCompletionQueue = _nvmectl.kNVMeOpcodeDeleteIOCompletionQueue
kNVMeOpcodeCreateIOCompletionQueue = _nvmectl.kNVMeOpcodeCreateIOCompletionQueue
kNVMeOpcodeIdentify = _nvmectl.kNVMeOpcodeIdentify
kNVMeOpcodeAbort = _nvmectl.kNVMeOpcodeAbort
kNVMeOpcodeSetFeatures = _nvmectl.kNVMeOpcodeSetFeatures
kNVMeOpcodeGetFeatures = _nvmectl.kNVMeOpcodeGetFeatures
kNVMeOpcodeAsyncEventRequest = _nvmectl.kNVMeOpcodeAsyncEventRequest
kNVMeOpcodeFirmwareActivate = _nvmectl.kNVMeOpcodeFirmwareActivate
kNVMeOpcodeFirmwareImageDownload = _nvmectl.kNVMeOpcodeFirmwareImageDownload
kNVMeOpcodeFormatNVM = _nvmectl.kNVMeOpcodeFormatNVM
kNVMeOpcodeSecuritySend = _nvmectl.kNVMeOpcodeSecuritySend
kNVMeOpcodeSecurityReceive = _nvmectl.kNVMeOpcodeSecurityReceive
kNVMeOpcodeFlush = _nvmectl.kNVMeOpcodeFlush
kNVMeOpcodeWrite = _nvmectl.kNVMeOpcodeWrite
kNVMeOpcodeRead = _nvmectl.kNVMeOpcodeRead
kNVMeOpcodeWriteUncorrectable = _nvmectl.kNVMeOpcodeWriteUncorrectable
kNVMeOpcodeCompare = _nvmectl.kNVMeOpcodeCompare
kNVMeOpcodeDatasetManagement = _nvmectl.kNVMeOpcodeDatasetManagement
kNVMeAbortSQueueIDOffset = _nvmectl.kNVMeAbortSQueueIDOffset
kNVMeAbortSQueueIDLen = _nvmectl.kNVMeAbortSQueueIDLen
kNVMeAbortCommandIDOffset = _nvmectl.kNVMeAbortCommandIDOffset
kNVMeAbortCommandIDLen = _nvmectl.kNVMeAbortCommandIDLen
kNVMeCreateCQQueueIDOffset = _nvmectl.kNVMeCreateCQQueueIDOffset
kNVMeCreateCQQueueIDLen = _nvmectl.kNVMeCreateCQQueueIDLen
kNVMeCreateCQQueueSizeOffset = _nvmectl.kNVMeCreateCQQueueSizeOffset
kNVMeCreateCQQueueSizeLen = _nvmectl.kNVMeCreateCQQueueSizeLen
kNVMeCreateCQPhysicallyContiguousOffset = _nvmectl.kNVMeCreateCQPhysicallyContiguousOffset
kNVMeCreateCQPhysicallyContiguousLen = _nvmectl.kNVMeCreateCQPhysicallyContiguousLen
kNVMeCreateCQInterruptsEnabledOffset = _nvmectl.kNVMeCreateCQInterruptsEnabledOffset
kNVMeCreateCQInterruptsEnabledLen = _nvmectl.kNVMeCreateCQInterruptsEnabledLen
kNVMeCreateCQReservedOffset = _nvmectl.kNVMeCreateCQReservedOffset
kNVMeCreateCQReservedLen = _nvmectl.kNVMeCreateCQReservedLen
kNVMeCreateCQInterruptVectorOffset = _nvmectl.kNVMeCreateCQInterruptVectorOffset
kNVMeCreateCQInterruptVectorLen = _nvmectl.kNVMeCreateCQInterruptVectorLen
kNVMeDeleteCQQueueIDOffset = _nvmectl.kNVMeDeleteCQQueueIDOffset
kNVMeDeleteCQQueueIDLen = _nvmectl.kNVMeDeleteCQQueueIDLen
kNVMeDeleteCQReservedOffset = _nvmectl.kNVMeDeleteCQReservedOffset
kNVMeDeleteCQReserved = _nvmectl.kNVMeDeleteCQReserved
kNVMeSQPrioUrgent = _nvmectl.kNVMeSQPrioUrgent
kNVMeSQPrioHigh = _nvmectl.kNVMeSQPrioHigh
kNVMeSQPrioMedium = _nvmectl.kNVMeSQPrioMedium
kNVMeSQPrioLow = _nvmectl.kNVMeSQPrioLow
kNVMeSQNumPrios = _nvmectl.kNVMeSQNumPrios
kNVMeCommandOpcodeOffset = _nvmectl.kNVMeCommandOpcodeOffset
kNVMeCommandOpcodeLen = _nvmectl.kNVMeCommandOpcodeLen
kNVMeCommandOpcodeMask = _nvmectl.kNVMeCommandOpcodeMask
kNVMeCommandFusedOffset = _nvmectl.kNVMeCommandFusedOffset
kNVMeCommandFusedLen = _nvmectl.kNVMeCommandFusedLen
kNVMeCommandSecurityModeOffset = _nvmectl.kNVMeCommandSecurityModeOffset
kNVMeCommandSecurityModeLen = _nvmectl.kNVMeCommandSecurityModeLen
kNVMeCommandSecurityModeMask = _nvmectl.kNVMeCommandSecurityModeMask
kNVMeCommandLinearOffset = _nvmectl.kNVMeCommandLinearOffset
kNVMeCommandLinearLen = _nvmectl.kNVMeCommandLinearLen
kNVMeCommandCIDOffset = _nvmectl.kNVMeCommandCIDOffset
kNVMeCommandCIDLen = _nvmectl.kNVMeCommandCIDLen
kNVMeCommandCIDMask = _nvmectl.kNVMeCommandCIDMask
kNVMeCreateSQQueueIDOffset = _nvmectl.kNVMeCreateSQQueueIDOffset
kNVMeCreateSQQueueIDLen = _nvmectl.kNVMeCreateSQQueueIDLen
kNVMeCreateSQQueueSizeOffset = _nvmectl.kNVMeCreateSQQueueSizeOffset
kNVMeCreateSQQueueSizeLen = _nvmectl.kNVMeCreateSQQueueSizeLen
kNVMeCreateSQPhysicallyContiguousOffset = _nvmectl.kNVMeCreateSQPhysicallyContiguousOffset
kNVMeCreateSQPhysicallyContiguousLen = _nvmectl.kNVMeCreateSQPhysicallyContiguousLen
kNVMeCreateSQPriorityOffset = _nvmectl.kNVMeCreateSQPriorityOffset
kNVMeCreateSQPriorityLen = _nvmectl.kNVMeCreateSQPriorityLen
kNVMeCreateSQReservedOffset = _nvmectl.kNVMeCreateSQReservedOffset
kNVMeCreateSQReservedLen = _nvmectl.kNVMeCreateSQReservedLen
kNVMeCreateSQCQIDOffset = _nvmectl.kNVMeCreateSQCQIDOffset
kNVMeCreateSQCQIDLen = _nvmectl.kNVMeCreateSQCQIDLen
kNVMeDeleteSQQueueIDOffset = _nvmectl.kNVMeDeleteSQQueueIDOffset
kNVMeDeleteSQQueueIDLen = _nvmectl.kNVMeDeleteSQQueueIDLen
kNVMeDeleteSQReservedOffset = _nvmectl.kNVMeDeleteSQReservedOffset
kNVMeDeleteSQReserved = _nvmectl.kNVMeDeleteSQReserved
kNVMeIdentifyCNSOffset = _nvmectl.kNVMeIdentifyCNSOffset
kNVMeIdentifyCNSLen = _nvmectl.kNVMeIdentifyCNSLen
kNVMeCompareNumLBlocksOffset = _nvmectl.kNVMeCompareNumLBlocksOffset
kNVMeCompareNumLBlocksLen = _nvmectl.kNVMeCompareNumLBlocksLen
kNVMeComparePRInfoOffset = _nvmectl.kNVMeComparePRInfoOffset
kNVMeComparePRInfoLen = _nvmectl.kNVMeComparePRInfoLen
kNVMeCompareFUAOffset = _nvmectl.kNVMeCompareFUAOffset
kNVMeCompareFUALen = _nvmectl.kNVMeCompareFUALen
kNVMeCompareLimitedRetryOffset = _nvmectl.kNVMeCompareLimitedRetryOffset
kNVMeCompareLimitedRetryLen = _nvmectl.kNVMeCompareLimitedRetryLen
kNVMeCompareEILBRTOffset = _nvmectl.kNVMeCompareEILBRTOffset
kNVMeCompareEILBRTLen = _nvmectl.kNVMeCompareEILBRTLen
kNVMeCompareELBATOffset = _nvmectl.kNVMeCompareELBATOffset
kNVMeCompareELBATLen = _nvmectl.kNVMeCompareELBATLen
kNVMeCompareELBATMaskOffset = _nvmectl.kNVMeCompareELBATMaskOffset
kNVMeCompareELBATMaskLen = _nvmectl.kNVMeCompareELBATMaskLen
kNVMeReadNumLBlocksOffset = _nvmectl.kNVMeReadNumLBlocksOffset
kNVMeReadNumLBlocksLen = _nvmectl.kNVMeReadNumLBlocksLen
kNVMeReadNumLBlocksMask = _nvmectl.kNVMeReadNumLBlocksMask
kNVMeReadPRInfoOffset = _nvmectl.kNVMeReadPRInfoOffset
kNVMeReadPRInfoLen = _nvmectl.kNVMeReadPRInfoLen
kNVMeReadFUAOffset = _nvmectl.kNVMeReadFUAOffset
kNVMeReadFUALen = _nvmectl.kNVMeReadFUALen
kNVMeReadLimitedRetryOffset = _nvmectl.kNVMeReadLimitedRetryOffset
kNVMeReadLimitedRetryLen = _nvmectl.kNVMeReadLimitedRetryLen
kNVMeReadAccessFrequencyOffset = _nvmectl.kNVMeReadAccessFrequencyOffset
kNVMeReadAccessFrequencyLen = _nvmectl.kNVMeReadAccessFrequencyLen
kNVMeReadAccessFrequencyMask = _nvmectl.kNVMeReadAccessFrequencyMask
kNVMeReadPriorityOffset = _nvmectl.kNVMeReadPriorityOffset
kNVMeReadPriorityLen = _nvmectl.kNVMeReadPriorityLen
kNVMeReadPriorityMask = _nvmectl.kNVMeReadPriorityMask
kNVMeReadPassiveHintOffset = _nvmectl.kNVMeReadPassiveHintOffset
kNVMeReadPassiveHintLen = _nvmectl.kNVMeReadPassiveHintLen
kNVMeReadPassiveHintMask = _nvmectl.kNVMeReadPassiveHintMask
kNVMeReadEILBRTOffset = _nvmectl.kNVMeReadEILBRTOffset
kNVMeReadEILBRTLen = _nvmectl.kNVMeReadEILBRTLen
kNVMeReadELBATOffset = _nvmectl.kNVMeReadELBATOffset
kNVMeReadELBATLen = _nvmectl.kNVMeReadELBATLen
kNVMeReadELBATMaskOffset = _nvmectl.kNVMeReadELBATMaskOffset
kNVMeReadELBATMaskLen = _nvmectl.kNVMeReadELBATMaskLen
kNVMeWriteNumLBlocksOffset = _nvmectl.kNVMeWriteNumLBlocksOffset
kNVMeWriteNumLBlocksLen = _nvmectl.kNVMeWriteNumLBlocksLen
kNVMeWritePRInfoOffset = _nvmectl.kNVMeWritePRInfoOffset
kNVMeWritePRInfoLen = _nvmectl.kNVMeWritePRInfoLen
kNVMeWriteFUAOffset = _nvmectl.kNVMeWriteFUAOffset
kNVMeWriteFUALen = _nvmectl.kNVMeWriteFUALen
kNVMeWriteLimitedRetryOffset = _nvmectl.kNVMeWriteLimitedRetryOffset
kNVMeWriteLimitedRetryLen = _nvmectl.kNVMeWriteLimitedRetryLen
kNVMeWriteAccessFrequencyOffset = _nvmectl.kNVMeWriteAccessFrequencyOffset
kNVMeWriteAccessFrequencyLen = _nvmectl.kNVMeWriteAccessFrequencyLen
kNVMeWriteAccessFrequencyMask = _nvmectl.kNVMeWriteAccessFrequencyMask
kNVMeWritePriorityOffset = _nvmectl.kNVMeWritePriorityOffset
kNVMeWritePriorityLen = _nvmectl.kNVMeWritePriorityLen
kNVMeWritePriorityMask = _nvmectl.kNVMeWritePriorityMask
kNVMeWriteSynchronousHintOffset = _nvmectl.kNVMeWriteSynchronousHintOffset
kNVMeWriteSynchronousHintLen = _nvmectl.kNVMeWriteSynchronousHintLen
kNVMeWriteSynchronousHintMask = _nvmectl.kNVMeWriteSynchronousHintMask
kNVMeWritePassiveHintOffset = _nvmectl.kNVMeWritePassiveHintOffset
kNVMeWritePassiveHintLen = _nvmectl.kNVMeWritePassiveHintLen
kNVMeWritePassiveHintMask = _nvmectl.kNVMeWritePassiveHintMask
kNVMeWriteILBRTOffset = _nvmectl.kNVMeWriteILBRTOffset
kNVMeWriteILBRTLen = _nvmectl.kNVMeWriteILBRTLen
kNVMeWriteLBATOffset = _nvmectl.kNVMeWriteLBATOffset
kNVMeWriteLBATLen = _nvmectl.kNVMeWriteLBATLen
kNVMeWriteLBATMaskOffset = _nvmectl.kNVMeWriteLBATMaskOffset
kNVMeWriteLBATMaskLen = _nvmectl.kNVMeWriteLBATMaskLen
kNVMeGetLogPageLogPageIDOffset = _nvmectl.kNVMeGetLogPageLogPageIDOffset
kNVMeGetLogPageLogPageIDLen = _nvmectl.kNVMeGetLogPageLogPageIDLen
kNVMeGetLogPageNumDwordsOffset = _nvmectl.kNVMeGetLogPageNumDwordsOffset
kNVMeGetLogPageNumDwordsLen = _nvmectl.kNVMeGetLogPageNumDwordsLen
kNVMeGetFeaturesFeatureIDOffset = _nvmectl.kNVMeGetFeaturesFeatureIDOffset
kNVMeGetFeaturesFeatureIDLen = _nvmectl.kNVMeGetFeaturesFeatureIDLen
kNVMeGetFeaturesReservedOffset = _nvmectl.kNVMeGetFeaturesReservedOffset
kNVMeGetFeaturesReservedLen = _nvmectl.kNVMeGetFeaturesReservedLen
kNVMeSetFeaturesFeatureIDOffset = _nvmectl.kNVMeSetFeaturesFeatureIDOffset
kNVMeSetFeaturesFeatureIDLen = _nvmectl.kNVMeSetFeaturesFeatureIDLen
kNVMeSetFeaturesReservedOffset = _nvmectl.kNVMeSetFeaturesReservedOffset
kNVMeSetFeaturesReservedLen = _nvmectl.kNVMeSetFeaturesReservedLen
kNVMeFeatureIDReserved1 = _nvmectl.kNVMeFeatureIDReserved1
kNVMeFeatureIDArbitration = _nvmectl.kNVMeFeatureIDArbitration
kNVMeFeatureIDPowerManagement = _nvmectl.kNVMeFeatureIDPowerManagement
kNVMeFeatureIDLBARangeType = _nvmectl.kNVMeFeatureIDLBARangeType
kNVMeFeatureIDTemperatureThreshold = _nvmectl.kNVMeFeatureIDTemperatureThreshold
kNVMeFeatureIDErrorRecovery = _nvmectl.kNVMeFeatureIDErrorRecovery
kNVMeFeatureIDVolatileWriteCache = _nvmectl.kNVMeFeatureIDVolatileWriteCache
kNVMeFeatureIDNumberofQueues = _nvmectl.kNVMeFeatureIDNumberofQueues
kNVMeFeatureIDInterruptCoalescing = _nvmectl.kNVMeFeatureIDInterruptCoalescing
kNVMeFeatureIDInterruptVectorConfiguration = _nvmectl.kNVMeFeatureIDInterruptVectorConfiguration
kNVMeFeatureIDWriteAtomicity = _nvmectl.kNVMeFeatureIDWriteAtomicity
kNVMeFeatureIDAsynchronousEventConfiguration = _nvmectl.kNVMeFeatureIDAsynchronousEventConfiguration
kNVMeFeatureIDSoftwareProgressMarker = _nvmectl.kNVMeFeatureIDSoftwareProgressMarker
kNVMeArbitrationABOffset = _nvmectl.kNVMeArbitrationABOffset
kNVMeArbitrationABLen = _nvmectl.kNVMeArbitrationABLen
kNVMeArbitrationABMask = _nvmectl.kNVMeArbitrationABMask
kNVMeArbitrationReservedOffset = _nvmectl.kNVMeArbitrationReservedOffset
kNVMeArbitrationReservedLen = _nvmectl.kNVMeArbitrationReservedLen
kNVMeArbitrationReservedMask = _nvmectl.kNVMeArbitrationReservedMask
kNVMeArbitrationLPWOffset = _nvmectl.kNVMeArbitrationLPWOffset
kNVMeArbitrationLPWLen = _nvmectl.kNVMeArbitrationLPWLen
kNVMeArbitrationLPWMask = _nvmectl.kNVMeArbitrationLPWMask
kNVMeArbitrationMPWOffset = _nvmectl.kNVMeArbitrationMPWOffset
kNVMeArbitrationMPWLen = _nvmectl.kNVMeArbitrationMPWLen
kNVMeArbitrationMPWMask = _nvmectl.kNVMeArbitrationMPWMask
kNVMeArbitrationHPWOffset = _nvmectl.kNVMeArbitrationHPWOffset
kNVMeArbitrationHPWLen = _nvmectl.kNVMeArbitrationHPWLen
kNVMeArbitrationHPWMask = _nvmectl.kNVMeArbitrationHPWMask
kNVMePowerManagementPSOffset = _nvmectl.kNVMePowerManagementPSOffset
kNVMePowerManagementPSLen = _nvmectl.kNVMePowerManagementPSLen
kNVMePowerManagementPSMask = _nvmectl.kNVMePowerManagementPSMask
kNVMePowerManagementReservedOffset = _nvmectl.kNVMePowerManagementReservedOffset
kNVMePowerManagementReservedLen = _nvmectl.kNVMePowerManagementReservedLen
kNVMePowerManagementReservedMask = _nvmectl.kNVMePowerManagementReservedMask
kNVMeLBARangeTypeNUMOffset = _nvmectl.kNVMeLBARangeTypeNUMOffset
kNVMeLBARangeTypeNUMLen = _nvmectl.kNVMeLBARangeTypeNUMLen
kNVMeLBARangeTypeNUMMask = _nvmectl.kNVMeLBARangeTypeNUMMask
kNVMeLBARangeTypeReservedOffset = _nvmectl.kNVMeLBARangeTypeReservedOffset
kNVMeLBARangeTypeReservedLen = _nvmectl.kNVMeLBARangeTypeReservedLen
kNVMeLBARangeTypeReservedMask = _nvmectl.kNVMeLBARangeTypeReservedMask
kNVMeTempThresholdTMPTHOffset = _nvmectl.kNVMeTempThresholdTMPTHOffset
kNVMeTempThresholdTMPTHLen = _nvmectl.kNVMeTempThresholdTMPTHLen
kNVMeTempThresholdTMPTHMask = _nvmectl.kNVMeTempThresholdTMPTHMask
kNVMeTempThresholdReservedOffset = _nvmectl.kNVMeTempThresholdReservedOffset
kNVMeTempThresholdReservedLen = _nvmectl.kNVMeTempThresholdReservedLen
kNVMeTempThresholdReservedMask = _nvmectl.kNVMeTempThresholdReservedMask
kNVMeErrorRecoveryTLEROffset = _nvmectl.kNVMeErrorRecoveryTLEROffset
kNVMeErrorRecoveryTLERLen = _nvmectl.kNVMeErrorRecoveryTLERLen
kNVMeErrorRecoveryTLERMask = _nvmectl.kNVMeErrorRecoveryTLERMask
kNVMeErrorRecoveryReservedOffset = _nvmectl.kNVMeErrorRecoveryReservedOffset
kNVMeErrorRecoveryReservedLen = _nvmectl.kNVMeErrorRecoveryReservedLen
kNVMeErrorRecoveryReservedMask = _nvmectl.kNVMeErrorRecoveryReservedMask
kNVMeVolatileWRcacheWCEOffset = _nvmectl.kNVMeVolatileWRcacheWCEOffset
kNVMeVolatileWRcacheWCELen = _nvmectl.kNVMeVolatileWRcacheWCELen
kNVMeVolatileWRcacheWCEMask = _nvmectl.kNVMeVolatileWRcacheWCEMask
kNVMeVolatileWRcacheReservedOffset = _nvmectl.kNVMeVolatileWRcacheReservedOffset
kNVMeVolatileWRcacheReservedLen = _nvmectl.kNVMeVolatileWRcacheReservedLen
kNVMeVolatileWRcacheReservedMask = _nvmectl.kNVMeVolatileWRcacheReservedMask
kNVMeNumQueuesNSQROffset = _nvmectl.kNVMeNumQueuesNSQROffset
kNVMeNumQueuesNSQRLen = _nvmectl.kNVMeNumQueuesNSQRLen
kNVMeNumQueuesNSQRMask = _nvmectl.kNVMeNumQueuesNSQRMask
kNVMeNumQueuesNCQROffset = _nvmectl.kNVMeNumQueuesNCQROffset
kNVMeNumQueuesNCQRLen = _nvmectl.kNVMeNumQueuesNCQRLen
kNVMeNumQueuesNCQRMask = _nvmectl.kNVMeNumQueuesNCQRMask
kNVMeNumQueuesNSQAOffset = _nvmectl.kNVMeNumQueuesNSQAOffset
kNVMeNumQueuesNSQALen = _nvmectl.kNVMeNumQueuesNSQALen
kNVMeNumQueuesNSQAMask = _nvmectl.kNVMeNumQueuesNSQAMask
kNVMeNumQueuesNCQAOffset = _nvmectl.kNVMeNumQueuesNCQAOffset
kNVMeNumQueuesNCQALen = _nvmectl.kNVMeNumQueuesNCQALen
kNVMeNumQueuesNCQAMask = _nvmectl.kNVMeNumQueuesNCQAMask
kNVMeIntCoalesceTHROffset = _nvmectl.kNVMeIntCoalesceTHROffset
kNVMeIntCoalesceTHRLen = _nvmectl.kNVMeIntCoalesceTHRLen
kNVMeIntCoalesceTHRMask = _nvmectl.kNVMeIntCoalesceTHRMask
kNVMeIntCoalesceTIMEOffset = _nvmectl.kNVMeIntCoalesceTIMEOffset
kNVMeIntCoalesceTIMELen = _nvmectl.kNVMeIntCoalesceTIMELen
kNVMeIntCoalesceTIMEMask = _nvmectl.kNVMeIntCoalesceTIMEMask
kNVMeIntCoalesceReservedOffset = _nvmectl.kNVMeIntCoalesceReservedOffset
kNVMeIntCoalesceReservedLen = _nvmectl.kNVMeIntCoalesceReservedLen
kNVMeIntCoalesceReservedMask = _nvmectl.kNVMeIntCoalesceReservedMask
kNVMeIVConfigIVOffset = _nvmectl.kNVMeIVConfigIVOffset
kNVMeIVConfigIVLen = _nvmectl.kNVMeIVConfigIVLen
kNVMeIVConfigIVMask = _nvmectl.kNVMeIVConfigIVMask
kNVMeIVConfigCDOffset = _nvmectl.kNVMeIVConfigCDOffset
kNVMeIVConfigCDLen = _nvmectl.kNVMeIVConfigCDLen
kNVMeIVConfigCDMask = _nvmectl.kNVMeIVConfigCDMask
kNVMeIVConfigReservedOffset = _nvmectl.kNVMeIVConfigReservedOffset
kNVMeIVConfigReservedLen = _nvmectl.kNVMeIVConfigReservedLen
kNVMeIVConfigReservedMask = _nvmectl.kNVMeIVConfigReservedMask
kNVMeWriteAtomicityDNOffset = _nvmectl.kNVMeWriteAtomicityDNOffset
kNVMeWriteAtomicityDNLen = _nvmectl.kNVMeWriteAtomicityDNLen
kNVMeWriteAtomicityDNMask = _nvmectl.kNVMeWriteAtomicityDNMask
kNVMeWriteAtomicityReservedOffset = _nvmectl.kNVMeWriteAtomicityReservedOffset
kNVMeWriteAtomicityReservedLen = _nvmectl.kNVMeWriteAtomicityReservedLen
kNVMeWriteAtomicityReservedMask = _nvmectl.kNVMeWriteAtomicityReservedMask
kNVMeAsyncEventConfigSMARTOffset = _nvmectl.kNVMeAsyncEventConfigSMARTOffset
kNVMeAsyncEventConfigSMARTLen = _nvmectl.kNVMeAsyncEventConfigSMARTLen
kNVMeAsyncEventConfigSMARTMask = _nvmectl.kNVMeAsyncEventConfigSMARTMask
kNVMeAsyncEventConfigReservedOffset = _nvmectl.kNVMeAsyncEventConfigReservedOffset
kNVMeAsyncEventConfigReservedLen = _nvmectl.kNVMeAsyncEventConfigReservedLen
kNVMeAsyncEventConfigReservedMask = _nvmectl.kNVMeAsyncEventConfigReservedMask
kNVMeSWProgressPBSLCOffset = _nvmectl.kNVMeSWProgressPBSLCOffset
kNVMeSWProgressPBSLCLen = _nvmectl.kNVMeSWProgressPBSLCLen
kNVMeSWProgressPBSLCMask = _nvmectl.kNVMeSWProgressPBSLCMask
kNVMeSWProgressReservedOffset = _nvmectl.kNVMeSWProgressReservedOffset
kNVMeSWProgressReservedLen = _nvmectl.kNVMeSWProgressReservedLen
kNVMeSWProgressReservedMask = _nvmectl.kNVMeSWProgressReservedMask
kNVMeThrottlingWLOffset = _nvmectl.kNVMeThrottlingWLOffset
kNVMeThrottlingWLLen = _nvmectl.kNVMeThrottlingWLLen
kNVMeThrottlingRLOffset = _nvmectl.kNVMeThrottlingRLOffset
kNVMeThrottlingRLLen = _nvmectl.kNVMeThrottlingRLLen
kNVMeAbruptShutdownTimeoutOffset = _nvmectl.kNVMeAbruptShutdownTimeoutOffset
kNVMeAbruptShutdownTimeoutLen = _nvmectl.kNVMeAbruptShutdownTimeoutLen
kNVMeDataSetManagementNROffset = _nvmectl.kNVMeDataSetManagementNROffset
kNVMeDataSetManagementNRLen = _nvmectl.kNVMeDataSetManagementNRLen
kNVMeDataSetManagementIDROffset = _nvmectl.kNVMeDataSetManagementIDROffset
kNVMeDataSetManagementIDRLen = _nvmectl.kNVMeDataSetManagementIDRLen
kNVMeDataSetManagementIDWOffset = _nvmectl.kNVMeDataSetManagementIDWOffset
kNVMeDataSetManagementIDWLen = _nvmectl.kNVMeDataSetManagementIDWLen
kNVMeDataSetManagementADOffset = _nvmectl.kNVMeDataSetManagementADOffset
kNVMeDataSetManagementADLen = _nvmectl.kNVMeDataSetManagementADLen
class NVMeAsyncEventCompletion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NVMeAsyncEventCompletion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NVMeAsyncEventCompletion, name)
    __repr__ = _swig_repr
    __swig_setmethods__["EVENT_TYPE"] = _nvmectl.NVMeAsyncEventCompletion_EVENT_TYPE_set
    __swig_getmethods__["EVENT_TYPE"] = _nvmectl.NVMeAsyncEventCompletion_EVENT_TYPE_get
    if _newclass:EVENT_TYPE = _swig_property(_nvmectl.NVMeAsyncEventCompletion_EVENT_TYPE_get, _nvmectl.NVMeAsyncEventCompletion_EVENT_TYPE_set)
    __swig_setmethods__["EVENT_INFO"] = _nvmectl.NVMeAsyncEventCompletion_EVENT_INFO_set
    __swig_getmethods__["EVENT_INFO"] = _nvmectl.NVMeAsyncEventCompletion_EVENT_INFO_get
    if _newclass:EVENT_INFO = _swig_property(_nvmectl.NVMeAsyncEventCompletion_EVENT_INFO_get, _nvmectl.NVMeAsyncEventCompletion_EVENT_INFO_set)
    __swig_setmethods__["ASSOCIATED_LOG_PAGE"] = _nvmectl.NVMeAsyncEventCompletion_ASSOCIATED_LOG_PAGE_set
    __swig_getmethods__["ASSOCIATED_LOG_PAGE"] = _nvmectl.NVMeAsyncEventCompletion_ASSOCIATED_LOG_PAGE_get
    if _newclass:ASSOCIATED_LOG_PAGE = _swig_property(_nvmectl.NVMeAsyncEventCompletion_ASSOCIATED_LOG_PAGE_get, _nvmectl.NVMeAsyncEventCompletion_ASSOCIATED_LOG_PAGE_set)
    __swig_setmethods__["RESERVED"] = _nvmectl.NVMeAsyncEventCompletion_RESERVED_set
    __swig_getmethods__["RESERVED"] = _nvmectl.NVMeAsyncEventCompletion_RESERVED_get
    if _newclass:RESERVED = _swig_property(_nvmectl.NVMeAsyncEventCompletion_RESERVED_get, _nvmectl.NVMeAsyncEventCompletion_RESERVED_set)
    def __init__(self): 
        this = _nvmectl.new_NVMeAsyncEventCompletion()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_NVMeAsyncEventCompletion
    __del__ = lambda self : None;
NVMeAsyncEventCompletion_swigregister = _nvmectl.NVMeAsyncEventCompletion_swigregister
NVMeAsyncEventCompletion_swigregister(NVMeAsyncEventCompletion)

kNVMeAsyncEventErrorStatus = _nvmectl.kNVMeAsyncEventErrorStatus
kNVMeAsyncEventSMART = _nvmectl.kNVMeAsyncEventSMART
kNVMeAsyncEventVendorSpecific = _nvmectl.kNVMeAsyncEventVendorSpecific
kNVMeInvalidSQ = _nvmectl.kNVMeInvalidSQ
kNVMeInvalidDoorbellValue = _nvmectl.kNVMeInvalidDoorbellValue
kNVMeDiagnosticFailure = _nvmectl.kNVMeDiagnosticFailure
kNVMePersistentDeviceError = _nvmectl.kNVMePersistentDeviceError
kNVMeTransientDeviceError = _nvmectl.kNVMeTransientDeviceError
kNVMeFirmwareLoadError = _nvmectl.kNVMeFirmwareLoadError
kNVMeSMARTDeviceReliability = _nvmectl.kNVMeSMARTDeviceReliability
kNVMeSMARTTempAbove = _nvmectl.kNVMeSMARTTempAbove
kNVMeSMARTSpareBelow = _nvmectl.kNVMeSMARTSpareBelow
kNVMeFirmwareActivateFSOffset = _nvmectl.kNVMeFirmwareActivateFSOffset
kNVMeFirmwareActivateFSLen = _nvmectl.kNVMeFirmwareActivateFSLen
kNVMeFirmwareActivateAAOffset = _nvmectl.kNVMeFirmwareActivateAAOffset
kNVMeFirmwareActivateAALen = _nvmectl.kNVMeFirmwareActivateAALen
kNVMeFirmwareDownloadOnly = _nvmectl.kNVMeFirmwareDownloadOnly
kNVMeFirmwareDownloadActivate = _nvmectl.kNVMeFirmwareDownloadActivate
kNVMeFirmwareActivateOnly = _nvmectl.kNVMeFirmwareActivateOnly
kNVMeFirmwareDownloadNUMDOffset = _nvmectl.kNVMeFirmwareDownloadNUMDOffset
kNVMeFirmwareDownloadNUMDLen = _nvmectl.kNVMeFirmwareDownloadNUMDLen
kNVMeFirmwareDownloadOFSTOffset = _nvmectl.kNVMeFirmwareDownloadOFSTOffset
kNVMeFirmwareDownloadOFSTLen = _nvmectl.kNVMeFirmwareDownloadOFSTLen
kNVMeEnableLifeboatModePropertyKey = _nvmectl.kNVMeEnableLifeboatModePropertyKey
class NVMeCreateNamespacesEntryStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NVMeCreateNamespacesEntryStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NVMeCreateNamespacesEntryStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["NS_ID"] = _nvmectl.NVMeCreateNamespacesEntryStruct_NS_ID_set
    __swig_getmethods__["NS_ID"] = _nvmectl.NVMeCreateNamespacesEntryStruct_NS_ID_get
    if _newclass:NS_ID = _swig_property(_nvmectl.NVMeCreateNamespacesEntryStruct_NS_ID_get, _nvmectl.NVMeCreateNamespacesEntryStruct_NS_ID_set)
    __swig_setmethods__["NS_TYPE"] = _nvmectl.NVMeCreateNamespacesEntryStruct_NS_TYPE_set
    __swig_getmethods__["NS_TYPE"] = _nvmectl.NVMeCreateNamespacesEntryStruct_NS_TYPE_get
    if _newclass:NS_TYPE = _swig_property(_nvmectl.NVMeCreateNamespacesEntryStruct_NS_TYPE_get, _nvmectl.NVMeCreateNamespacesEntryStruct_NS_TYPE_set)
    __swig_setmethods__["NS_SIZE"] = _nvmectl.NVMeCreateNamespacesEntryStruct_NS_SIZE_set
    __swig_getmethods__["NS_SIZE"] = _nvmectl.NVMeCreateNamespacesEntryStruct_NS_SIZE_get
    if _newclass:NS_SIZE = _swig_property(_nvmectl.NVMeCreateNamespacesEntryStruct_NS_SIZE_get, _nvmectl.NVMeCreateNamespacesEntryStruct_NS_SIZE_set)
    def __init__(self): 
        this = _nvmectl.new_NVMeCreateNamespacesEntryStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_NVMeCreateNamespacesEntryStruct
    __del__ = lambda self : None;
NVMeCreateNamespacesEntryStruct_swigregister = _nvmectl.NVMeCreateNamespacesEntryStruct_swigregister
NVMeCreateNamespacesEntryStruct_swigregister(NVMeCreateNamespacesEntryStruct)

class NVMeCreateNamespacesStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NVMeCreateNamespacesStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NVMeCreateNamespacesStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["NUM_OF_NAMESPACES"] = _nvmectl.NVMeCreateNamespacesStruct_NUM_OF_NAMESPACES_set
    __swig_getmethods__["NUM_OF_NAMESPACES"] = _nvmectl.NVMeCreateNamespacesStruct_NUM_OF_NAMESPACES_get
    if _newclass:NUM_OF_NAMESPACES = _swig_property(_nvmectl.NVMeCreateNamespacesStruct_NUM_OF_NAMESPACES_get, _nvmectl.NVMeCreateNamespacesStruct_NUM_OF_NAMESPACES_set)
    __swig_setmethods__["ENTRIES"] = _nvmectl.NVMeCreateNamespacesStruct_ENTRIES_set
    __swig_getmethods__["ENTRIES"] = _nvmectl.NVMeCreateNamespacesStruct_ENTRIES_get
    if _newclass:ENTRIES = _swig_property(_nvmectl.NVMeCreateNamespacesStruct_ENTRIES_get, _nvmectl.NVMeCreateNamespacesStruct_ENTRIES_set)
    def __init__(self): 
        this = _nvmectl.new_NVMeCreateNamespacesStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_NVMeCreateNamespacesStruct
    __del__ = lambda self : None;
NVMeCreateNamespacesStruct_swigregister = _nvmectl.NVMeCreateNamespacesStruct_swigregister
NVMeCreateNamespacesStruct_swigregister(NVMeCreateNamespacesStruct)

ANS2StorageDeviceTypeASI = _nvmectl.ANS2StorageDeviceTypeASI
ANS2StorageDeviceTypeAHCI = _nvmectl.ANS2StorageDeviceTypeAHCI
ANS2StorageDeviceTypeNVMe = _nvmectl.ANS2StorageDeviceTypeNVMe
ANS2NumStorageDeviceTypes = _nvmectl.ANS2NumStorageDeviceTypes
kMSPSOCTypeS4E = _nvmectl.kMSPSOCTypeS4E
kMSPSOCTypeM9 = _nvmectl.kMSPSOCTypeM9
kMSPSOCTypeS5E = _nvmectl.kMSPSOCTypeS5E
kMSPSOCTypeTurks = _nvmectl.kMSPSOCTypeTurks
kMSPSOCTypeS3E = _nvmectl.kMSPSOCTypeS3E
class IdentifyStorageDeviceHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdentifyStorageDeviceHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IdentifyStorageDeviceHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["DEVICE_TYPE"] = _nvmectl.IdentifyStorageDeviceHeader_DEVICE_TYPE_set
    __swig_getmethods__["DEVICE_TYPE"] = _nvmectl.IdentifyStorageDeviceHeader_DEVICE_TYPE_get
    if _newclass:DEVICE_TYPE = _swig_property(_nvmectl.IdentifyStorageDeviceHeader_DEVICE_TYPE_get, _nvmectl.IdentifyStorageDeviceHeader_DEVICE_TYPE_set)
    __swig_setmethods__["RESERVED1"] = _nvmectl.IdentifyStorageDeviceHeader_RESERVED1_set
    __swig_getmethods__["RESERVED1"] = _nvmectl.IdentifyStorageDeviceHeader_RESERVED1_get
    if _newclass:RESERVED1 = _swig_property(_nvmectl.IdentifyStorageDeviceHeader_RESERVED1_get, _nvmectl.IdentifyStorageDeviceHeader_RESERVED1_set)
    __swig_setmethods__["PCI_VENDOR_ID"] = _nvmectl.IdentifyStorageDeviceHeader_PCI_VENDOR_ID_set
    __swig_getmethods__["PCI_VENDOR_ID"] = _nvmectl.IdentifyStorageDeviceHeader_PCI_VENDOR_ID_get
    if _newclass:PCI_VENDOR_ID = _swig_property(_nvmectl.IdentifyStorageDeviceHeader_PCI_VENDOR_ID_get, _nvmectl.IdentifyStorageDeviceHeader_PCI_VENDOR_ID_set)
    __swig_setmethods__["PCI_DEVICE_ID"] = _nvmectl.IdentifyStorageDeviceHeader_PCI_DEVICE_ID_set
    __swig_getmethods__["PCI_DEVICE_ID"] = _nvmectl.IdentifyStorageDeviceHeader_PCI_DEVICE_ID_get
    if _newclass:PCI_DEVICE_ID = _swig_property(_nvmectl.IdentifyStorageDeviceHeader_PCI_DEVICE_ID_get, _nvmectl.IdentifyStorageDeviceHeader_PCI_DEVICE_ID_set)
    __swig_setmethods__["RESERVED2"] = _nvmectl.IdentifyStorageDeviceHeader_RESERVED2_set
    __swig_getmethods__["RESERVED2"] = _nvmectl.IdentifyStorageDeviceHeader_RESERVED2_get
    if _newclass:RESERVED2 = _swig_property(_nvmectl.IdentifyStorageDeviceHeader_RESERVED2_get, _nvmectl.IdentifyStorageDeviceHeader_RESERVED2_set)
    def __init__(self): 
        this = _nvmectl.new_IdentifyStorageDeviceHeader()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_IdentifyStorageDeviceHeader
    __del__ = lambda self : None;
IdentifyStorageDeviceHeader_swigregister = _nvmectl.IdentifyStorageDeviceHeader_swigregister
IdentifyStorageDeviceHeader_swigregister(IdentifyStorageDeviceHeader)

class IdentifyStorageDeviceStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdentifyStorageDeviceStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IdentifyStorageDeviceStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["HEADER"] = _nvmectl.IdentifyStorageDeviceStruct_HEADER_set
    __swig_getmethods__["HEADER"] = _nvmectl.IdentifyStorageDeviceStruct_HEADER_get
    if _newclass:HEADER = _swig_property(_nvmectl.IdentifyStorageDeviceStruct_HEADER_get, _nvmectl.IdentifyStorageDeviceStruct_HEADER_set)
    __swig_setmethods__["DATA"] = _nvmectl.IdentifyStorageDeviceStruct_DATA_set
    __swig_getmethods__["DATA"] = _nvmectl.IdentifyStorageDeviceStruct_DATA_get
    if _newclass:DATA = _swig_property(_nvmectl.IdentifyStorageDeviceStruct_DATA_get, _nvmectl.IdentifyStorageDeviceStruct_DATA_set)
    def __init__(self): 
        this = _nvmectl.new_IdentifyStorageDeviceStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_IdentifyStorageDeviceStruct
    __del__ = lambda self : None;
IdentifyStorageDeviceStruct_swigregister = _nvmectl.IdentifyStorageDeviceStruct_swigregister
IdentifyStorageDeviceStruct_swigregister(IdentifyStorageDeviceStruct)

class IdentifyASIDeviceData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdentifyASIDeviceData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IdentifyASIDeviceData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ASI_REVISION"] = _nvmectl.IdentifyASIDeviceData_ASI_REVISION_set
    __swig_getmethods__["ASI_REVISION"] = _nvmectl.IdentifyASIDeviceData_ASI_REVISION_get
    if _newclass:ASI_REVISION = _swig_property(_nvmectl.IdentifyASIDeviceData_ASI_REVISION_get, _nvmectl.IdentifyASIDeviceData_ASI_REVISION_set)
    __swig_setmethods__["RESERVED1"] = _nvmectl.IdentifyASIDeviceData_RESERVED1_set
    __swig_getmethods__["RESERVED1"] = _nvmectl.IdentifyASIDeviceData_RESERVED1_get
    if _newclass:RESERVED1 = _swig_property(_nvmectl.IdentifyASIDeviceData_RESERVED1_get, _nvmectl.IdentifyASIDeviceData_RESERVED1_set)
    __swig_setmethods__["FW_VERSION"] = _nvmectl.IdentifyASIDeviceData_FW_VERSION_set
    __swig_getmethods__["FW_VERSION"] = _nvmectl.IdentifyASIDeviceData_FW_VERSION_get
    if _newclass:FW_VERSION = _swig_property(_nvmectl.IdentifyASIDeviceData_FW_VERSION_get, _nvmectl.IdentifyASIDeviceData_FW_VERSION_set)
    __swig_setmethods__["PRODUCTION_FW_VERSION"] = _nvmectl.IdentifyASIDeviceData_PRODUCTION_FW_VERSION_set
    __swig_getmethods__["PRODUCTION_FW_VERSION"] = _nvmectl.IdentifyASIDeviceData_PRODUCTION_FW_VERSION_get
    if _newclass:PRODUCTION_FW_VERSION = _swig_property(_nvmectl.IdentifyASIDeviceData_PRODUCTION_FW_VERSION_get, _nvmectl.IdentifyASIDeviceData_PRODUCTION_FW_VERSION_set)
    __swig_setmethods__["CONTROLLER_UNIQUE_ID"] = _nvmectl.IdentifyASIDeviceData_CONTROLLER_UNIQUE_ID_set
    __swig_getmethods__["CONTROLLER_UNIQUE_ID"] = _nvmectl.IdentifyASIDeviceData_CONTROLLER_UNIQUE_ID_get
    if _newclass:CONTROLLER_UNIQUE_ID = _swig_property(_nvmectl.IdentifyASIDeviceData_CONTROLLER_UNIQUE_ID_get, _nvmectl.IdentifyASIDeviceData_CONTROLLER_UNIQUE_ID_set)
    __swig_setmethods__["CONTROLLER_HW_ID"] = _nvmectl.IdentifyASIDeviceData_CONTROLLER_HW_ID_set
    __swig_getmethods__["CONTROLLER_HW_ID"] = _nvmectl.IdentifyASIDeviceData_CONTROLLER_HW_ID_get
    if _newclass:CONTROLLER_HW_ID = _swig_property(_nvmectl.IdentifyASIDeviceData_CONTROLLER_HW_ID_get, _nvmectl.IdentifyASIDeviceData_CONTROLLER_HW_ID_set)
    __swig_setmethods__["NAND_VENDOR_ID"] = _nvmectl.IdentifyASIDeviceData_NAND_VENDOR_ID_set
    __swig_getmethods__["NAND_VENDOR_ID"] = _nvmectl.IdentifyASIDeviceData_NAND_VENDOR_ID_get
    if _newclass:NAND_VENDOR_ID = _swig_property(_nvmectl.IdentifyASIDeviceData_NAND_VENDOR_ID_get, _nvmectl.IdentifyASIDeviceData_NAND_VENDOR_ID_set)
    __swig_setmethods__["NAND_LITHOGRAPHY"] = _nvmectl.IdentifyASIDeviceData_NAND_LITHOGRAPHY_set
    __swig_getmethods__["NAND_LITHOGRAPHY"] = _nvmectl.IdentifyASIDeviceData_NAND_LITHOGRAPHY_get
    if _newclass:NAND_LITHOGRAPHY = _swig_property(_nvmectl.IdentifyASIDeviceData_NAND_LITHOGRAPHY_get, _nvmectl.IdentifyASIDeviceData_NAND_LITHOGRAPHY_set)
    __swig_setmethods__["NAND_TECHNOLOGY"] = _nvmectl.IdentifyASIDeviceData_NAND_TECHNOLOGY_set
    __swig_getmethods__["NAND_TECHNOLOGY"] = _nvmectl.IdentifyASIDeviceData_NAND_TECHNOLOGY_get
    if _newclass:NAND_TECHNOLOGY = _swig_property(_nvmectl.IdentifyASIDeviceData_NAND_TECHNOLOGY_get, _nvmectl.IdentifyASIDeviceData_NAND_TECHNOLOGY_set)
    __swig_setmethods__["NAND_REVISION"] = _nvmectl.IdentifyASIDeviceData_NAND_REVISION_set
    __swig_getmethods__["NAND_REVISION"] = _nvmectl.IdentifyASIDeviceData_NAND_REVISION_get
    if _newclass:NAND_REVISION = _swig_property(_nvmectl.IdentifyASIDeviceData_NAND_REVISION_get, _nvmectl.IdentifyASIDeviceData_NAND_REVISION_set)
    __swig_setmethods__["DIE_CAPACITY"] = _nvmectl.IdentifyASIDeviceData_DIE_CAPACITY_set
    __swig_getmethods__["DIE_CAPACITY"] = _nvmectl.IdentifyASIDeviceData_DIE_CAPACITY_get
    if _newclass:DIE_CAPACITY = _swig_property(_nvmectl.IdentifyASIDeviceData_DIE_CAPACITY_get, _nvmectl.IdentifyASIDeviceData_DIE_CAPACITY_set)
    __swig_setmethods__["DIE_DENSITY"] = _nvmectl.IdentifyASIDeviceData_DIE_DENSITY_set
    __swig_getmethods__["DIE_DENSITY"] = _nvmectl.IdentifyASIDeviceData_DIE_DENSITY_get
    if _newclass:DIE_DENSITY = _swig_property(_nvmectl.IdentifyASIDeviceData_DIE_DENSITY_get, _nvmectl.IdentifyASIDeviceData_DIE_DENSITY_set)
    __swig_setmethods__["CHANNELS_PER_PACKAGE"] = _nvmectl.IdentifyASIDeviceData_CHANNELS_PER_PACKAGE_set
    __swig_getmethods__["CHANNELS_PER_PACKAGE"] = _nvmectl.IdentifyASIDeviceData_CHANNELS_PER_PACKAGE_get
    if _newclass:CHANNELS_PER_PACKAGE = _swig_property(_nvmectl.IdentifyASIDeviceData_CHANNELS_PER_PACKAGE_get, _nvmectl.IdentifyASIDeviceData_CHANNELS_PER_PACKAGE_set)
    __swig_setmethods__["DIES_PER_CHANNEL"] = _nvmectl.IdentifyASIDeviceData_DIES_PER_CHANNEL_set
    __swig_getmethods__["DIES_PER_CHANNEL"] = _nvmectl.IdentifyASIDeviceData_DIES_PER_CHANNEL_get
    if _newclass:DIES_PER_CHANNEL = _swig_property(_nvmectl.IdentifyASIDeviceData_DIES_PER_CHANNEL_get, _nvmectl.IdentifyASIDeviceData_DIES_PER_CHANNEL_set)
    __swig_setmethods__["PLANES_PER_DIE"] = _nvmectl.IdentifyASIDeviceData_PLANES_PER_DIE_set
    __swig_getmethods__["PLANES_PER_DIE"] = _nvmectl.IdentifyASIDeviceData_PLANES_PER_DIE_get
    if _newclass:PLANES_PER_DIE = _swig_property(_nvmectl.IdentifyASIDeviceData_PLANES_PER_DIE_get, _nvmectl.IdentifyASIDeviceData_PLANES_PER_DIE_set)
    __swig_setmethods__["CE_SHARING"] = _nvmectl.IdentifyASIDeviceData_CE_SHARING_set
    __swig_getmethods__["CE_SHARING"] = _nvmectl.IdentifyASIDeviceData_CE_SHARING_get
    if _newclass:CE_SHARING = _swig_property(_nvmectl.IdentifyASIDeviceData_CE_SHARING_get, _nvmectl.IdentifyASIDeviceData_CE_SHARING_set)
    __swig_setmethods__["RESERVED2"] = _nvmectl.IdentifyASIDeviceData_RESERVED2_set
    __swig_getmethods__["RESERVED2"] = _nvmectl.IdentifyASIDeviceData_RESERVED2_get
    if _newclass:RESERVED2 = _swig_property(_nvmectl.IdentifyASIDeviceData_RESERVED2_get, _nvmectl.IdentifyASIDeviceData_RESERVED2_set)
    __swig_setmethods__["BLOCKS_PER_PLANE"] = _nvmectl.IdentifyASIDeviceData_BLOCKS_PER_PLANE_set
    __swig_getmethods__["BLOCKS_PER_PLANE"] = _nvmectl.IdentifyASIDeviceData_BLOCKS_PER_PLANE_get
    if _newclass:BLOCKS_PER_PLANE = _swig_property(_nvmectl.IdentifyASIDeviceData_BLOCKS_PER_PLANE_get, _nvmectl.IdentifyASIDeviceData_BLOCKS_PER_PLANE_set)
    __swig_setmethods__["PAGES_PER_MLC_BLOCK"] = _nvmectl.IdentifyASIDeviceData_PAGES_PER_MLC_BLOCK_set
    __swig_getmethods__["PAGES_PER_MLC_BLOCK"] = _nvmectl.IdentifyASIDeviceData_PAGES_PER_MLC_BLOCK_get
    if _newclass:PAGES_PER_MLC_BLOCK = _swig_property(_nvmectl.IdentifyASIDeviceData_PAGES_PER_MLC_BLOCK_get, _nvmectl.IdentifyASIDeviceData_PAGES_PER_MLC_BLOCK_set)
    __swig_setmethods__["PAGES_PER_SLC_BLOCK"] = _nvmectl.IdentifyASIDeviceData_PAGES_PER_SLC_BLOCK_set
    __swig_getmethods__["PAGES_PER_SLC_BLOCK"] = _nvmectl.IdentifyASIDeviceData_PAGES_PER_SLC_BLOCK_get
    if _newclass:PAGES_PER_SLC_BLOCK = _swig_property(_nvmectl.IdentifyASIDeviceData_PAGES_PER_SLC_BLOCK_get, _nvmectl.IdentifyASIDeviceData_PAGES_PER_SLC_BLOCK_set)
    __swig_setmethods__["SECTORS_PER_PAGE"] = _nvmectl.IdentifyASIDeviceData_SECTORS_PER_PAGE_set
    __swig_getmethods__["SECTORS_PER_PAGE"] = _nvmectl.IdentifyASIDeviceData_SECTORS_PER_PAGE_get
    if _newclass:SECTORS_PER_PAGE = _swig_property(_nvmectl.IdentifyASIDeviceData_SECTORS_PER_PAGE_get, _nvmectl.IdentifyASIDeviceData_SECTORS_PER_PAGE_set)
    __swig_setmethods__["MAX_INTERFACE_SPEED"] = _nvmectl.IdentifyASIDeviceData_MAX_INTERFACE_SPEED_set
    __swig_getmethods__["MAX_INTERFACE_SPEED"] = _nvmectl.IdentifyASIDeviceData_MAX_INTERFACE_SPEED_get
    if _newclass:MAX_INTERFACE_SPEED = _swig_property(_nvmectl.IdentifyASIDeviceData_MAX_INTERFACE_SPEED_get, _nvmectl.IdentifyASIDeviceData_MAX_INTERFACE_SPEED_set)
    __swig_setmethods__["RESERVED3"] = _nvmectl.IdentifyASIDeviceData_RESERVED3_set
    __swig_getmethods__["RESERVED3"] = _nvmectl.IdentifyASIDeviceData_RESERVED3_get
    if _newclass:RESERVED3 = _swig_property(_nvmectl.IdentifyASIDeviceData_RESERVED3_get, _nvmectl.IdentifyASIDeviceData_RESERVED3_set)
    __swig_setmethods__["NAND_DIE_UNIQUE_ID"] = _nvmectl.IdentifyASIDeviceData_NAND_DIE_UNIQUE_ID_set
    __swig_getmethods__["NAND_DIE_UNIQUE_ID"] = _nvmectl.IdentifyASIDeviceData_NAND_DIE_UNIQUE_ID_get
    if _newclass:NAND_DIE_UNIQUE_ID = _swig_property(_nvmectl.IdentifyASIDeviceData_NAND_DIE_UNIQUE_ID_get, _nvmectl.IdentifyASIDeviceData_NAND_DIE_UNIQUE_ID_set)
    __swig_setmethods__["UUID"] = _nvmectl.IdentifyASIDeviceData_UUID_set
    __swig_getmethods__["UUID"] = _nvmectl.IdentifyASIDeviceData_UUID_get
    if _newclass:UUID = _swig_property(_nvmectl.IdentifyASIDeviceData_UUID_get, _nvmectl.IdentifyASIDeviceData_UUID_set)
    __swig_setmethods__["RESERVED4"] = _nvmectl.IdentifyASIDeviceData_RESERVED4_set
    __swig_getmethods__["RESERVED4"] = _nvmectl.IdentifyASIDeviceData_RESERVED4_get
    if _newclass:RESERVED4 = _swig_property(_nvmectl.IdentifyASIDeviceData_RESERVED4_get, _nvmectl.IdentifyASIDeviceData_RESERVED4_set)
    def __init__(self): 
        this = _nvmectl.new_IdentifyASIDeviceData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_IdentifyASIDeviceData
    __del__ = lambda self : None;
IdentifyASIDeviceData_swigregister = _nvmectl.IdentifyASIDeviceData_swigregister
IdentifyASIDeviceData_swigregister(IdentifyASIDeviceData)

kNVMeStatusNoPermission = _nvmectl.kNVMeStatusNoPermission
kNVMe_MODESEL_NORMAL_RW = _nvmectl.kNVMe_MODESEL_NORMAL_RW
kNVMe_MODESEL_BOOT = _nvmectl.kNVMe_MODESEL_BOOT
kNVMe_MODESEL_NORMAL_RO = _nvmectl.kNVMe_MODESEL_NORMAL_RO
kNVMe_MODESEL_RECOVERY = _nvmectl.kNVMe_MODESEL_RECOVERY
kNVMe_MODESEL_FW_UPDATE = _nvmectl.kNVMe_MODESEL_FW_UPDATE
kNVMeStatusFWUpdateBadPkgFormat = _nvmectl.kNVMeStatusFWUpdateBadPkgFormat
kNVMeStatusFWUpdateAllocBufFailed = _nvmectl.kNVMeStatusFWUpdateAllocBufFailed
kNVMeStatusFWUpdateInternalError = _nvmectl.kNVMeStatusFWUpdateInternalError
kNVMeStatusFWUpdateMediaFailure = _nvmectl.kNVMeStatusFWUpdateMediaFailure
kNVMeStatusFWUpdateSectionIncomplete = _nvmectl.kNVMeStatusFWUpdateSectionIncomplete
kNVMeStatusFWUpdateSectionCrcMismatch = _nvmectl.kNVMeStatusFWUpdateSectionCrcMismatch
kNVMeStatusFWUpdateBadUpdateSequence = _nvmectl.kNVMeStatusFWUpdateBadUpdateSequence
kNVMeStatusFWUpdateBadPackageSignature = _nvmectl.kNVMeStatusFWUpdateBadPackageSignature
kNVMeStatusInvalidLogBufSize = _nvmectl.kNVMeStatusInvalidLogBufSize
kNVMeStatusInvalidLogCoreID = _nvmectl.kNVMeStatusInvalidLogCoreID
kNVMeStatusFWUpdatePkgConfigMismatch = _nvmectl.kNVMeStatusFWUpdatePkgConfigMismatch
kNVMeStatusNumOfNamespacesError = _nvmectl.kNVMeStatusNumOfNamespacesError
kNVMeStatusUnsupportedNamespacesSize = _nvmectl.kNVMeStatusUnsupportedNamespacesSize
kNVMeStatusNamespacesCombinationError = _nvmectl.kNVMeStatusNamespacesCombinationError
kNVMeStatusFWUpdateFailedRetryRequested = _nvmectl.kNVMeStatusFWUpdateFailedRetryRequested
kNVMeOpcodeSetTime = _nvmectl.kNVMeOpcodeSetTime
kNVMeOpcodeDeleteFirmwareSlot = _nvmectl.kNVMeOpcodeDeleteFirmwareSlot
kNVMeOpcodeDebugService = _nvmectl.kNVMeOpcodeDebugService
kNVMeOpcodeSetFEParams = _nvmectl.kNVMeOpcodeSetFEParams
kNVMeOpcodeGetFEParams = _nvmectl.kNVMeOpcodeGetFEParams
kNVMeOpcodeReadDebugLog = _nvmectl.kNVMeOpcodeReadDebugLog
kNVMeOpcodeCreateNamespaces = _nvmectl.kNVMeOpcodeCreateNamespaces
kNVMeOpcodeWriteDebugLog = _nvmectl.kNVMeOpcodeWriteDebugLog
kNVMeOpcodeIdentifyStorageDevice = _nvmectl.kNVMeOpcodeIdentifyStorageDevice
kNVMeOpcodeBonfireTest = _nvmectl.kNVMeOpcodeBonfireTest
kNVMeOpcodeLoggerConfig = _nvmectl.kNVMeOpcodeLoggerConfig
kNVMeOpcodeSetHostFWSize = _nvmectl.kNVMeOpcodeSetHostFWSize
kNVMeOpcodePrepareForShutdown = _nvmectl.kNVMeOpcodePrepareForShutdown
kNVMeOpcodeScheduleBGTask = _nvmectl.kNVMeOpcodeScheduleBGTask
kNVMeOpcodeSecureErase = _nvmectl.kNVMeOpcodeSecureErase
kNVMeOpcodeNeuralize = _nvmectl.kNVMeOpcodeNeuralize
kNVMeOpcodeTunnel = _nvmectl.kNVMeOpcodeTunnel
kNVMeOpcodeFreezeSQs = _nvmectl.kNVMeOpcodeFreezeSQs
kNVMeSamsungDebugLogExtract = _nvmectl.kNVMeSamsungDebugLogExtract
kNVMeOpcodeUnmap = _nvmectl.kNVMeOpcodeUnmap
kNVMeOpcodeReprioritize = _nvmectl.kNVMeOpcodeReprioritize
kNVMeFeatureIDGetNANDInfoLow = _nvmectl.kNVMeFeatureIDGetNANDInfoLow
kNVMeFeatureIDGetNANDInfoHigh = _nvmectl.kNVMeFeatureIDGetNANDInfoHigh
kNVMeFeatureIDMSPSOCID = _nvmectl.kNVMeFeatureIDMSPSOCID
kNVMeFeatureIDPwrBudgetConfigIndex = _nvmectl.kNVMeFeatureIDPwrBudgetConfigIndex
kNVMeFeatureIDNANDFragmentationInfo = _nvmectl.kNVMeFeatureIDNANDFragmentationInfo
kNVMeFeatureIDThrottling = _nvmectl.kNVMeFeatureIDThrottling
kNVMeFeatureIDSMCTemperature = _nvmectl.kNVMeFeatureIDSMCTemperature
kNVMeFeatureIDAbruptShutdownTimeout = _nvmectl.kNVMeFeatureIDAbruptShutdownTimeout
kNVMeMaxEncryptionKeyLen = _nvmectl.kNVMeMaxEncryptionKeyLen
kNVMeAESIOSQES = _nvmectl.kNVMeAESIOSQES
kNVMeSecurityModeNone = _nvmectl.kNVMeSecurityModeNone
kNVMeSecurityModeAES128 = _nvmectl.kNVMeSecurityModeAES128
kNVMeSecurityModeAES192 = _nvmectl.kNVMeSecurityModeAES192
kNVMeSecurityModeAES256 = _nvmectl.kNVMeSecurityModeAES256
kNVMeSecurityNumModes = _nvmectl.kNVMeSecurityNumModes
kNVMeRepriotizeStartLBAOffset = _nvmectl.kNVMeRepriotizeStartLBAOffset
kNVMeRepriotizeStartLBALen = _nvmectl.kNVMeRepriotizeStartLBALen
kNVMeRepriotizeNumLBAsOffset = _nvmectl.kNVMeRepriotizeNumLBAsOffset
kNVMeRepriotizeNumLBAsLen = _nvmectl.kNVMeRepriotizeNumLBAsLen
kNVMeRepriotizePriorityOffset = _nvmectl.kNVMeRepriotizePriorityOffset
kNVMeRepriotizePriorityLen = _nvmectl.kNVMeRepriotizePriorityLen
kNVMeDeleteFirmwareSlotSMOffset = _nvmectl.kNVMeDeleteFirmwareSlotSMOffset
kNVMeDeleteFirmwareSlotSMLen = _nvmectl.kNVMeDeleteFirmwareSlotSMLen
kNVMeDebugServiceOperationOffset = _nvmectl.kNVMeDebugServiceOperationOffset
kNVMeDebugServiceOperationLen = _nvmectl.kNVMeDebugServiceOperationLen
kNVMeDebugServiceOpRead = _nvmectl.kNVMeDebugServiceOpRead
kNVMeDebugServiceOpWrite = _nvmectl.kNVMeDebugServiceOpWrite
kNVMeCLIAddress = _nvmectl.kNVMeCLIAddress
kNVMeLifeboatMode = _nvmectl.kNVMeLifeboatMode
kNVMeFAddress = _nvmectl.kNVMeFAddress
kNVMeFABigDumpEnable = _nvmectl.kNVMeFABigDumpEnable
kNVMePowerGatedMinIdleTime = _nvmectl.kNVMePowerGatedMinIdleTime
kNVMeClockGatedMinIdleTime = _nvmectl.kNVMeClockGatedMinIdleTime
kNVMeLPSRCounterLower = _nvmectl.kNVMeLPSRCounterLower
kNVMeLPSRCounterUpper = _nvmectl.kNVMeLPSRCounterUpper
kNVMeNANDDebugLow = _nvmectl.kNVMeNANDDebugLow
kNVMeNANDDebugHigh = _nvmectl.kNVMeNANDDebugHigh
kNVMeApcieUnusedMap = _nvmectl.kNVMeApcieUnusedMap
kNVMeEnableIOLog = _nvmectl.kNVMeEnableIOLog
kNVMeLPSRCounterUpperOffset = _nvmectl.kNVMeLPSRCounterUpperOffset
kNVMeLPSRCounterUpperLen = _nvmectl.kNVMeLPSRCounterUpperLen
kNVMeLPSRCounterUpperMask = _nvmectl.kNVMeLPSRCounterUpperMask
kNVMeFlushCacheBarrierOnlyOffset = _nvmectl.kNVMeFlushCacheBarrierOnlyOffset
kNVMeFlushCacheBarrierOnlyMask = _nvmectl.kNVMeFlushCacheBarrierOnlyMask
kNVMeCreateNSIgnoreClogFormatOffset = _nvmectl.kNVMeCreateNSIgnoreClogFormatOffset
kNVMeCreateNSIgnoreClogFormatMask = _nvmectl.kNVMeCreateNSIgnoreClogFormatMask
kNVMeReadDebugLogIDOffset = _nvmectl.kNVMeReadDebugLogIDOffset
kNVMeReadDebugLogIDLen = _nvmectl.kNVMeReadDebugLogIDLen
kNVMeReadDebugLogIsFirstOffset = _nvmectl.kNVMeReadDebugLogIsFirstOffset
kNVMeReadDebugLogIsFirstLen = _nvmectl.kNVMeReadDebugLogIsFirstLen
kNVMeReadDebugLogNLBOffset = _nvmectl.kNVMeReadDebugLogNLBOffset
kNVMeReadDebugLogNLBLen = _nvmectl.kNVMeReadDebugLogNLBLen
kNVMeWriteDebugLogIDOffset = _nvmectl.kNVMeWriteDebugLogIDOffset
kNVMeWriteDebugLogIDLen = _nvmectl.kNVMeWriteDebugLogIDLen
kNVMeWriteDebugLogIsLastOffset = _nvmectl.kNVMeWriteDebugLogIsLastOffset
kNVMeWriteDebugLogIsLastLen = _nvmectl.kNVMeWriteDebugLogIsLastLen
kNVMeWriteDebugLogNLBOffset = _nvmectl.kNVMeWriteDebugLogNLBOffset
kNVMeWriteDebugLogNLBLen = _nvmectl.kNVMeWriteDebugLogNLBLen
kNVMeReadDebugLogV2NLBOffset = _nvmectl.kNVMeReadDebugLogV2NLBOffset
kNVMeReadDebugLogV2NLBLen = _nvmectl.kNVMeReadDebugLogV2NLBLen
kNVMeReadDebugLogV2IsFirstOffset = _nvmectl.kNVMeReadDebugLogV2IsFirstOffset
kNVMeReadDebugLogV2IsFirstLen = _nvmectl.kNVMeReadDebugLogV2IsFirstLen
kNVMeReadDebugLogV2IDOffset = _nvmectl.kNVMeReadDebugLogV2IDOffset
kNVMeReadDebugLogV2IDLen = _nvmectl.kNVMeReadDebugLogV2IDLen
kNVMeWriteDebugLogV2NLBOffset = _nvmectl.kNVMeWriteDebugLogV2NLBOffset
kNVMeWriteDebugLogV2NLBLen = _nvmectl.kNVMeWriteDebugLogV2NLBLen
kNVMeWriteDebugLogV2IsLastOffset = _nvmectl.kNVMeWriteDebugLogV2IsLastOffset
kNVMeWriteDebugLogV2IsLastLen = _nvmectl.kNVMeWriteDebugLogV2IsLastLen
kNVMeWriteDebugLogV2IDOffset = _nvmectl.kNVMeWriteDebugLogV2IDOffset
kNVMeWriteDebugLogV2IDLen = _nvmectl.kNVMeWriteDebugLogV2IDLen
kNVMeDebugLogIDStreamLogger = _nvmectl.kNVMeDebugLogIDStreamLogger
kNVMeDebugLogIDLogBuffer = _nvmectl.kNVMeDebugLogIDLogBuffer
kNVMeDebugLogIDCodeCoverage = _nvmectl.kNVMeDebugLogIDCodeCoverage
kNVMeDebugLogIDSystemCounters = _nvmectl.kNVMeDebugLogIDSystemCounters
kNVMeDebugLogIDElog = _nvmectl.kNVMeDebugLogIDElog
kNVMeDebugLogIDAltermanDictionary = _nvmectl.kNVMeDebugLogIDAltermanDictionary
kNVMeDebugLogIDFieldCounters = _nvmectl.kNVMeDebugLogIDFieldCounters
kNVMeDebugLogIDMSPData = _nvmectl.kNVMeDebugLogIDMSPData
kNVMeDebugLogIDMSPControlRecipe = _nvmectl.kNVMeDebugLogIDMSPControlRecipe
kNVMeDebugLogIDBandStats = _nvmectl.kNVMeDebugLogIDBandStats
kNVMeDebugLogIDAlgorithmCounters = _nvmectl.kNVMeDebugLogIDAlgorithmCounters
kNVMeDebugLogIDExportHeader = _nvmectl.kNVMeDebugLogIDExportHeader
kNVMeDebugLogIDExport = _nvmectl.kNVMeDebugLogIDExport
kNVMeDebugLogIDReadStats = _nvmectl.kNVMeDebugLogIDReadStats
kNVMeDebugLogIDExportStats = _nvmectl.kNVMeDebugLogIDExportStats
kNVMeDebugLogIDGBB = _nvmectl.kNVMeDebugLogIDGBB
kNVMeDebugLogPTSData = _nvmectl.kNVMeDebugLogPTSData
kNVMeDebugSetSweepParams = _nvmectl.kNVMeDebugSetSweepParams
kNVMeDebugGetSweepData = _nvmectl.kNVMeDebugGetSweepData
kNVMeDebugGetS4E64BSeed = _nvmectl.kNVMeDebugGetS4E64BSeed
kNVMeDebugGetNandGeom = _nvmectl.kNVMeDebugGetNandGeom
kNVMeDebugLogIDOSIdentifier = _nvmectl.kNVMeDebugLogIDOSIdentifier
kNVMeDebugLogIDFailureAnalysis = _nvmectl.kNVMeDebugLogIDFailureAnalysis
kNVMeDebugLogIDMiniFailureAnalysis = _nvmectl.kNVMeDebugLogIDMiniFailureAnalysis
kNVMeDebugLogIDNANDStats = _nvmectl.kNVMeDebugLogIDNANDStats
kNVMeDebugLogIDDeviceStats = _nvmectl.kNVMeDebugLogIDDeviceStats
kNVMeDebugLogIDGeneralAttributes = _nvmectl.kNVMeDebugLogIDGeneralAttributes
kNVMeDebugLogIDPostResults = _nvmectl.kNVMeDebugLogIDPostResults
kNVMeDebugLogIDProductionData = _nvmectl.kNVMeDebugLogIDProductionData
kNVMeDebugLogIDErrorPayload = _nvmectl.kNVMeDebugLogIDErrorPayload
kMSPDataAlgoSNRData = _nvmectl.kMSPDataAlgoSNRData
kMSPDataAlgoDebugData = _nvmectl.kMSPDataAlgoDebugData
kMSPDataRMANoArgs = _nvmectl.kMSPDataRMANoArgs
kMSPDataCodeCoverageData = _nvmectl.kMSPDataCodeCoverageData
kMSPDataTestResults = _nvmectl.kMSPDataTestResults
kMSPDataCellByCellSweep = _nvmectl.kMSPDataCellByCellSweep
kMSPDataRMAData = _nvmectl.kMSPDataRMAData
kMSPDataAlgoCounters = _nvmectl.kMSPDataAlgoCounters
kMSPDataGetBitflipCounters = _nvmectl.kMSPDataGetBitflipCounters
kMSPDataProductionScanFBB = _nvmectl.kMSPDataProductionScanFBB
kMSPDataProductionReadDevID = _nvmectl.kMSPDataProductionReadDevID
kMSPDataProductionGetWPStatus = _nvmectl.kMSPDataProductionGetWPStatus
kMSPDataIQMLoadStats = _nvmectl.kMSPDataIQMLoadStats
kMSPDataRawRead = _nvmectl.kMSPDataRawRead
class MSPDataCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MSPDataCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MSPDataCommand, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TYPE"] = _nvmectl.MSPDataCommand_TYPE_set
    __swig_getmethods__["TYPE"] = _nvmectl.MSPDataCommand_TYPE_get
    if _newclass:TYPE = _swig_property(_nvmectl.MSPDataCommand_TYPE_get, _nvmectl.MSPDataCommand_TYPE_set)
    __swig_setmethods__["WAY_NUM"] = _nvmectl.MSPDataCommand_WAY_NUM_set
    __swig_getmethods__["WAY_NUM"] = _nvmectl.MSPDataCommand_WAY_NUM_get
    if _newclass:WAY_NUM = _swig_property(_nvmectl.MSPDataCommand_WAY_NUM_get, _nvmectl.MSPDataCommand_WAY_NUM_set)
    __swig_setmethods__["ARG0"] = _nvmectl.MSPDataCommand_ARG0_set
    __swig_getmethods__["ARG0"] = _nvmectl.MSPDataCommand_ARG0_get
    if _newclass:ARG0 = _swig_property(_nvmectl.MSPDataCommand_ARG0_get, _nvmectl.MSPDataCommand_ARG0_set)
    __swig_setmethods__["ARG1"] = _nvmectl.MSPDataCommand_ARG1_set
    __swig_getmethods__["ARG1"] = _nvmectl.MSPDataCommand_ARG1_get
    if _newclass:ARG1 = _swig_property(_nvmectl.MSPDataCommand_ARG1_get, _nvmectl.MSPDataCommand_ARG1_set)
    __swig_setmethods__["ARG2"] = _nvmectl.MSPDataCommand_ARG2_set
    __swig_getmethods__["ARG2"] = _nvmectl.MSPDataCommand_ARG2_get
    if _newclass:ARG2 = _swig_property(_nvmectl.MSPDataCommand_ARG2_get, _nvmectl.MSPDataCommand_ARG2_set)
    __swig_setmethods__["ARG3"] = _nvmectl.MSPDataCommand_ARG3_set
    __swig_getmethods__["ARG3"] = _nvmectl.MSPDataCommand_ARG3_get
    if _newclass:ARG3 = _swig_property(_nvmectl.MSPDataCommand_ARG3_get, _nvmectl.MSPDataCommand_ARG3_set)
    def __init__(self): 
        this = _nvmectl.new_MSPDataCommand()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_MSPDataCommand
    __del__ = lambda self : None;
MSPDataCommand_swigregister = _nvmectl.MSPDataCommand_swigregister
MSPDataCommand_swigregister(MSPDataCommand)

kMSPSweepSLC = _nvmectl.kMSPSweepSLC
kMSPSweepDSP = _nvmectl.kMSPSweepDSP
kMSPControlRecipeDataSize = _nvmectl.kMSPControlRecipeDataSize
class MSPControlRecipe(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MSPControlRecipe, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MSPControlRecipe, name)
    __repr__ = _swig_repr
    __swig_setmethods__["NUM_OF_VALID_ARGS"] = _nvmectl.MSPControlRecipe_NUM_OF_VALID_ARGS_set
    __swig_getmethods__["NUM_OF_VALID_ARGS"] = _nvmectl.MSPControlRecipe_NUM_OF_VALID_ARGS_get
    if _newclass:NUM_OF_VALID_ARGS = _swig_property(_nvmectl.MSPControlRecipe_NUM_OF_VALID_ARGS_get, _nvmectl.MSPControlRecipe_NUM_OF_VALID_ARGS_set)
    __swig_setmethods__["ARG0"] = _nvmectl.MSPControlRecipe_ARG0_set
    __swig_getmethods__["ARG0"] = _nvmectl.MSPControlRecipe_ARG0_get
    if _newclass:ARG0 = _swig_property(_nvmectl.MSPControlRecipe_ARG0_get, _nvmectl.MSPControlRecipe_ARG0_set)
    __swig_setmethods__["ARG1"] = _nvmectl.MSPControlRecipe_ARG1_set
    __swig_getmethods__["ARG1"] = _nvmectl.MSPControlRecipe_ARG1_get
    if _newclass:ARG1 = _swig_property(_nvmectl.MSPControlRecipe_ARG1_get, _nvmectl.MSPControlRecipe_ARG1_set)
    __swig_setmethods__["ARG2"] = _nvmectl.MSPControlRecipe_ARG2_set
    __swig_getmethods__["ARG2"] = _nvmectl.MSPControlRecipe_ARG2_get
    if _newclass:ARG2 = _swig_property(_nvmectl.MSPControlRecipe_ARG2_get, _nvmectl.MSPControlRecipe_ARG2_set)
    __swig_setmethods__["ARG3"] = _nvmectl.MSPControlRecipe_ARG3_set
    __swig_getmethods__["ARG3"] = _nvmectl.MSPControlRecipe_ARG3_get
    if _newclass:ARG3 = _swig_property(_nvmectl.MSPControlRecipe_ARG3_get, _nvmectl.MSPControlRecipe_ARG3_set)
    __swig_setmethods__["ARG4"] = _nvmectl.MSPControlRecipe_ARG4_set
    __swig_getmethods__["ARG4"] = _nvmectl.MSPControlRecipe_ARG4_get
    if _newclass:ARG4 = _swig_property(_nvmectl.MSPControlRecipe_ARG4_get, _nvmectl.MSPControlRecipe_ARG4_set)
    __swig_setmethods__["ARG5"] = _nvmectl.MSPControlRecipe_ARG5_set
    __swig_getmethods__["ARG5"] = _nvmectl.MSPControlRecipe_ARG5_get
    if _newclass:ARG5 = _swig_property(_nvmectl.MSPControlRecipe_ARG5_get, _nvmectl.MSPControlRecipe_ARG5_set)
    __swig_setmethods__["ARG6"] = _nvmectl.MSPControlRecipe_ARG6_set
    __swig_getmethods__["ARG6"] = _nvmectl.MSPControlRecipe_ARG6_get
    if _newclass:ARG6 = _swig_property(_nvmectl.MSPControlRecipe_ARG6_get, _nvmectl.MSPControlRecipe_ARG6_set)
    __swig_setmethods__["ARG7"] = _nvmectl.MSPControlRecipe_ARG7_set
    __swig_getmethods__["ARG7"] = _nvmectl.MSPControlRecipe_ARG7_get
    if _newclass:ARG7 = _swig_property(_nvmectl.MSPControlRecipe_ARG7_get, _nvmectl.MSPControlRecipe_ARG7_set)
    __swig_setmethods__["RESERVED"] = _nvmectl.MSPControlRecipe_RESERVED_set
    __swig_getmethods__["RESERVED"] = _nvmectl.MSPControlRecipe_RESERVED_get
    if _newclass:RESERVED = _swig_property(_nvmectl.MSPControlRecipe_RESERVED_get, _nvmectl.MSPControlRecipe_RESERVED_set)
    def __init__(self): 
        this = _nvmectl.new_MSPControlRecipe()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_MSPControlRecipe
    __del__ = lambda self : None;
MSPControlRecipe_swigregister = _nvmectl.MSPControlRecipe_swigregister
MSPControlRecipe_swigregister(MSPControlRecipe)

kMSPControlRecipeSweepArgs = _nvmectl.kMSPControlRecipeSweepArgs
class S3SweepArgs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S3SweepArgs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S3SweepArgs, name)
    __repr__ = _swig_repr
    __swig_setmethods__["PLANE"] = _nvmectl.S3SweepArgs_PLANE_set
    __swig_getmethods__["PLANE"] = _nvmectl.S3SweepArgs_PLANE_get
    if _newclass:PLANE = _swig_property(_nvmectl.S3SweepArgs_PLANE_get, _nvmectl.S3SweepArgs_PLANE_set)
    __swig_setmethods__["DIE"] = _nvmectl.S3SweepArgs_DIE_set
    __swig_getmethods__["DIE"] = _nvmectl.S3SweepArgs_DIE_get
    if _newclass:DIE = _swig_property(_nvmectl.S3SweepArgs_DIE_get, _nvmectl.S3SweepArgs_DIE_set)
    __swig_setmethods__["BLOCK"] = _nvmectl.S3SweepArgs_BLOCK_set
    __swig_getmethods__["BLOCK"] = _nvmectl.S3SweepArgs_BLOCK_get
    if _newclass:BLOCK = _swig_property(_nvmectl.S3SweepArgs_BLOCK_get, _nvmectl.S3SweepArgs_BLOCK_set)
    __swig_setmethods__["MODE"] = _nvmectl.S3SweepArgs_MODE_set
    __swig_getmethods__["MODE"] = _nvmectl.S3SweepArgs_MODE_get
    if _newclass:MODE = _swig_property(_nvmectl.S3SweepArgs_MODE_get, _nvmectl.S3SweepArgs_MODE_set)
    __swig_setmethods__["PAGE_WL_START"] = _nvmectl.S3SweepArgs_PAGE_WL_START_set
    __swig_getmethods__["PAGE_WL_START"] = _nvmectl.S3SweepArgs_PAGE_WL_START_get
    if _newclass:PAGE_WL_START = _swig_property(_nvmectl.S3SweepArgs_PAGE_WL_START_get, _nvmectl.S3SweepArgs_PAGE_WL_START_set)
    __swig_setmethods__["PAGE_WL_END"] = _nvmectl.S3SweepArgs_PAGE_WL_END_set
    __swig_getmethods__["PAGE_WL_END"] = _nvmectl.S3SweepArgs_PAGE_WL_END_get
    if _newclass:PAGE_WL_END = _swig_property(_nvmectl.S3SweepArgs_PAGE_WL_END_get, _nvmectl.S3SweepArgs_PAGE_WL_END_set)
    __swig_setmethods__["HEADER"] = _nvmectl.S3SweepArgs_HEADER_set
    __swig_getmethods__["HEADER"] = _nvmectl.S3SweepArgs_HEADER_get
    if _newclass:HEADER = _swig_property(_nvmectl.S3SweepArgs_HEADER_get, _nvmectl.S3SweepArgs_HEADER_set)
    __swig_setmethods__["COMPRESS"] = _nvmectl.S3SweepArgs_COMPRESS_set
    __swig_getmethods__["COMPRESS"] = _nvmectl.S3SweepArgs_COMPRESS_get
    if _newclass:COMPRESS = _swig_property(_nvmectl.S3SweepArgs_COMPRESS_get, _nvmectl.S3SweepArgs_COMPRESS_set)
    __swig_setmethods__["DSP"] = _nvmectl.S3SweepArgs_DSP_set
    __swig_getmethods__["DSP"] = _nvmectl.S3SweepArgs_DSP_get
    if _newclass:DSP = _swig_property(_nvmectl.S3SweepArgs_DSP_get, _nvmectl.S3SweepArgs_DSP_set)
    __swig_setmethods__["BPC"] = _nvmectl.S3SweepArgs_BPC_set
    __swig_getmethods__["BPC"] = _nvmectl.S3SweepArgs_BPC_get
    if _newclass:BPC = _swig_property(_nvmectl.S3SweepArgs_BPC_get, _nvmectl.S3SweepArgs_BPC_set)
    __swig_setmethods__["VTH_STEP"] = _nvmectl.S3SweepArgs_VTH_STEP_set
    __swig_getmethods__["VTH_STEP"] = _nvmectl.S3SweepArgs_VTH_STEP_get
    if _newclass:VTH_STEP = _swig_property(_nvmectl.S3SweepArgs_VTH_STEP_get, _nvmectl.S3SweepArgs_VTH_STEP_set)
    __swig_setmethods__["RV11_MIN"] = _nvmectl.S3SweepArgs_RV11_MIN_set
    __swig_getmethods__["RV11_MIN"] = _nvmectl.S3SweepArgs_RV11_MIN_get
    if _newclass:RV11_MIN = _swig_property(_nvmectl.S3SweepArgs_RV11_MIN_get, _nvmectl.S3SweepArgs_RV11_MIN_set)
    __swig_setmethods__["RV11_MAX"] = _nvmectl.S3SweepArgs_RV11_MAX_set
    __swig_getmethods__["RV11_MAX"] = _nvmectl.S3SweepArgs_RV11_MAX_get
    if _newclass:RV11_MAX = _swig_property(_nvmectl.S3SweepArgs_RV11_MAX_get, _nvmectl.S3SweepArgs_RV11_MAX_set)
    __swig_setmethods__["RV1_MIN"] = _nvmectl.S3SweepArgs_RV1_MIN_set
    __swig_getmethods__["RV1_MIN"] = _nvmectl.S3SweepArgs_RV1_MIN_get
    if _newclass:RV1_MIN = _swig_property(_nvmectl.S3SweepArgs_RV1_MIN_get, _nvmectl.S3SweepArgs_RV1_MIN_set)
    __swig_setmethods__["RV1_MAX"] = _nvmectl.S3SweepArgs_RV1_MAX_set
    __swig_getmethods__["RV1_MAX"] = _nvmectl.S3SweepArgs_RV1_MAX_get
    if _newclass:RV1_MAX = _swig_property(_nvmectl.S3SweepArgs_RV1_MAX_get, _nvmectl.S3SweepArgs_RV1_MAX_set)
    __swig_setmethods__["RV2_MIN"] = _nvmectl.S3SweepArgs_RV2_MIN_set
    __swig_getmethods__["RV2_MIN"] = _nvmectl.S3SweepArgs_RV2_MIN_get
    if _newclass:RV2_MIN = _swig_property(_nvmectl.S3SweepArgs_RV2_MIN_get, _nvmectl.S3SweepArgs_RV2_MIN_set)
    __swig_setmethods__["RV2_MAX"] = _nvmectl.S3SweepArgs_RV2_MAX_set
    __swig_getmethods__["RV2_MAX"] = _nvmectl.S3SweepArgs_RV2_MAX_get
    if _newclass:RV2_MAX = _swig_property(_nvmectl.S3SweepArgs_RV2_MAX_get, _nvmectl.S3SweepArgs_RV2_MAX_set)
    __swig_setmethods__["RV3_MIN"] = _nvmectl.S3SweepArgs_RV3_MIN_set
    __swig_getmethods__["RV3_MIN"] = _nvmectl.S3SweepArgs_RV3_MIN_get
    if _newclass:RV3_MIN = _swig_property(_nvmectl.S3SweepArgs_RV3_MIN_get, _nvmectl.S3SweepArgs_RV3_MIN_set)
    __swig_setmethods__["RV3_MAX"] = _nvmectl.S3SweepArgs_RV3_MAX_set
    __swig_getmethods__["RV3_MAX"] = _nvmectl.S3SweepArgs_RV3_MAX_get
    if _newclass:RV3_MAX = _swig_property(_nvmectl.S3SweepArgs_RV3_MAX_get, _nvmectl.S3SweepArgs_RV3_MAX_set)
    __swig_setmethods__["RV4_MIN"] = _nvmectl.S3SweepArgs_RV4_MIN_set
    __swig_getmethods__["RV4_MIN"] = _nvmectl.S3SweepArgs_RV4_MIN_get
    if _newclass:RV4_MIN = _swig_property(_nvmectl.S3SweepArgs_RV4_MIN_get, _nvmectl.S3SweepArgs_RV4_MIN_set)
    __swig_setmethods__["RV4_MAX"] = _nvmectl.S3SweepArgs_RV4_MAX_set
    __swig_getmethods__["RV4_MAX"] = _nvmectl.S3SweepArgs_RV4_MAX_get
    if _newclass:RV4_MAX = _swig_property(_nvmectl.S3SweepArgs_RV4_MAX_get, _nvmectl.S3SweepArgs_RV4_MAX_set)
    __swig_setmethods__["RV5_MIN"] = _nvmectl.S3SweepArgs_RV5_MIN_set
    __swig_getmethods__["RV5_MIN"] = _nvmectl.S3SweepArgs_RV5_MIN_get
    if _newclass:RV5_MIN = _swig_property(_nvmectl.S3SweepArgs_RV5_MIN_get, _nvmectl.S3SweepArgs_RV5_MIN_set)
    __swig_setmethods__["RV5_MAX"] = _nvmectl.S3SweepArgs_RV5_MAX_set
    __swig_getmethods__["RV5_MAX"] = _nvmectl.S3SweepArgs_RV5_MAX_get
    if _newclass:RV5_MAX = _swig_property(_nvmectl.S3SweepArgs_RV5_MAX_get, _nvmectl.S3SweepArgs_RV5_MAX_set)
    __swig_setmethods__["RV6_MIN"] = _nvmectl.S3SweepArgs_RV6_MIN_set
    __swig_getmethods__["RV6_MIN"] = _nvmectl.S3SweepArgs_RV6_MIN_get
    if _newclass:RV6_MIN = _swig_property(_nvmectl.S3SweepArgs_RV6_MIN_get, _nvmectl.S3SweepArgs_RV6_MIN_set)
    __swig_setmethods__["RV6_MAX"] = _nvmectl.S3SweepArgs_RV6_MAX_set
    __swig_getmethods__["RV6_MAX"] = _nvmectl.S3SweepArgs_RV6_MAX_get
    if _newclass:RV6_MAX = _swig_property(_nvmectl.S3SweepArgs_RV6_MAX_get, _nvmectl.S3SweepArgs_RV6_MAX_set)
    __swig_setmethods__["RV7_MIN"] = _nvmectl.S3SweepArgs_RV7_MIN_set
    __swig_getmethods__["RV7_MIN"] = _nvmectl.S3SweepArgs_RV7_MIN_get
    if _newclass:RV7_MIN = _swig_property(_nvmectl.S3SweepArgs_RV7_MIN_get, _nvmectl.S3SweepArgs_RV7_MIN_set)
    __swig_setmethods__["RV7_MAX"] = _nvmectl.S3SweepArgs_RV7_MAX_set
    __swig_getmethods__["RV7_MAX"] = _nvmectl.S3SweepArgs_RV7_MAX_get
    if _newclass:RV7_MAX = _swig_property(_nvmectl.S3SweepArgs_RV7_MAX_get, _nvmectl.S3SweepArgs_RV7_MAX_set)
    def __init__(self): 
        this = _nvmectl.new_S3SweepArgs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_S3SweepArgs
    __del__ = lambda self : None;
S3SweepArgs_swigregister = _nvmectl.S3SweepArgs_swigregister
S3SweepArgs_swigregister(S3SweepArgs)

kNVMeS3SweepArgsSize = _nvmectl.kNVMeS3SweepArgsSize
class S3SweepArgsStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S3SweepArgsStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S3SweepArgsStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["args"] = _nvmectl.S3SweepArgsStruct_args_set
    __swig_getmethods__["args"] = _nvmectl.S3SweepArgsStruct_args_get
    if _newclass:args = _swig_property(_nvmectl.S3SweepArgsStruct_args_get, _nvmectl.S3SweepArgsStruct_args_set)
    __swig_setmethods__["reserved"] = _nvmectl.S3SweepArgsStruct_reserved_set
    __swig_getmethods__["reserved"] = _nvmectl.S3SweepArgsStruct_reserved_get
    if _newclass:reserved = _swig_property(_nvmectl.S3SweepArgsStruct_reserved_get, _nvmectl.S3SweepArgsStruct_reserved_set)
    def __init__(self): 
        this = _nvmectl.new_S3SweepArgsStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_S3SweepArgsStruct
    __del__ = lambda self : None;
S3SweepArgsStruct_swigregister = _nvmectl.S3SweepArgsStruct_swigregister
S3SweepArgsStruct_swigregister(S3SweepArgsStruct)

class ANS2SweepParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ANS2SweepParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ANS2SweepParams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["MSP"] = _nvmectl.ANS2SweepParams_MSP_set
    __swig_getmethods__["MSP"] = _nvmectl.ANS2SweepParams_MSP_get
    if _newclass:MSP = _swig_property(_nvmectl.ANS2SweepParams_MSP_get, _nvmectl.ANS2SweepParams_MSP_set)
    __swig_setmethods__["CHANNEL"] = _nvmectl.ANS2SweepParams_CHANNEL_set
    __swig_getmethods__["CHANNEL"] = _nvmectl.ANS2SweepParams_CHANNEL_get
    if _newclass:CHANNEL = _swig_property(_nvmectl.ANS2SweepParams_CHANNEL_get, _nvmectl.ANS2SweepParams_CHANNEL_set)
    __swig_setmethods__["DIE"] = _nvmectl.ANS2SweepParams_DIE_set
    __swig_getmethods__["DIE"] = _nvmectl.ANS2SweepParams_DIE_get
    if _newclass:DIE = _swig_property(_nvmectl.ANS2SweepParams_DIE_get, _nvmectl.ANS2SweepParams_DIE_set)
    __swig_setmethods__["PLANE"] = _nvmectl.ANS2SweepParams_PLANE_set
    __swig_getmethods__["PLANE"] = _nvmectl.ANS2SweepParams_PLANE_get
    if _newclass:PLANE = _swig_property(_nvmectl.ANS2SweepParams_PLANE_get, _nvmectl.ANS2SweepParams_PLANE_set)
    __swig_setmethods__["BLOCK"] = _nvmectl.ANS2SweepParams_BLOCK_set
    __swig_getmethods__["BLOCK"] = _nvmectl.ANS2SweepParams_BLOCK_get
    if _newclass:BLOCK = _swig_property(_nvmectl.ANS2SweepParams_BLOCK_get, _nvmectl.ANS2SweepParams_BLOCK_set)
    __swig_setmethods__["WORDLINE"] = _nvmectl.ANS2SweepParams_WORDLINE_set
    __swig_getmethods__["WORDLINE"] = _nvmectl.ANS2SweepParams_WORDLINE_get
    if _newclass:WORDLINE = _swig_property(_nvmectl.ANS2SweepParams_WORDLINE_get, _nvmectl.ANS2SweepParams_WORDLINE_set)
    __swig_setmethods__["BPC"] = _nvmectl.ANS2SweepParams_BPC_set
    __swig_getmethods__["BPC"] = _nvmectl.ANS2SweepParams_BPC_get
    if _newclass:BPC = _swig_property(_nvmectl.ANS2SweepParams_BPC_get, _nvmectl.ANS2SweepParams_BPC_set)
    __swig_setmethods__["VTH_STEP"] = _nvmectl.ANS2SweepParams_VTH_STEP_set
    __swig_getmethods__["VTH_STEP"] = _nvmectl.ANS2SweepParams_VTH_STEP_get
    if _newclass:VTH_STEP = _swig_property(_nvmectl.ANS2SweepParams_VTH_STEP_get, _nvmectl.ANS2SweepParams_VTH_STEP_set)
    __swig_setmethods__["IS_DSP"] = _nvmectl.ANS2SweepParams_IS_DSP_set
    __swig_getmethods__["IS_DSP"] = _nvmectl.ANS2SweepParams_IS_DSP_get
    if _newclass:IS_DSP = _swig_property(_nvmectl.ANS2SweepParams_IS_DSP_get, _nvmectl.ANS2SweepParams_IS_DSP_set)
    __swig_setmethods__["IS_TO_COMPRESS"] = _nvmectl.ANS2SweepParams_IS_TO_COMPRESS_set
    __swig_getmethods__["IS_TO_COMPRESS"] = _nvmectl.ANS2SweepParams_IS_TO_COMPRESS_get
    if _newclass:IS_TO_COMPRESS = _swig_property(_nvmectl.ANS2SweepParams_IS_TO_COMPRESS_get, _nvmectl.ANS2SweepParams_IS_TO_COMPRESS_set)
    __swig_setmethods__["IS_TO_ADD_HEADER"] = _nvmectl.ANS2SweepParams_IS_TO_ADD_HEADER_set
    __swig_getmethods__["IS_TO_ADD_HEADER"] = _nvmectl.ANS2SweepParams_IS_TO_ADD_HEADER_get
    if _newclass:IS_TO_ADD_HEADER = _swig_property(_nvmectl.ANS2SweepParams_IS_TO_ADD_HEADER_get, _nvmectl.ANS2SweepParams_IS_TO_ADD_HEADER_set)
    def __init__(self): 
        this = _nvmectl.new_ANS2SweepParams()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_ANS2SweepParams
    __del__ = lambda self : None;
ANS2SweepParams_swigregister = _nvmectl.ANS2SweepParams_swigregister
ANS2SweepParams_swigregister(ANS2SweepParams)

class ANS2SweepParamsStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ANS2SweepParamsStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ANS2SweepParamsStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["PARAMS"] = _nvmectl.ANS2SweepParamsStruct_PARAMS_set
    __swig_getmethods__["PARAMS"] = _nvmectl.ANS2SweepParamsStruct_PARAMS_get
    if _newclass:PARAMS = _swig_property(_nvmectl.ANS2SweepParamsStruct_PARAMS_get, _nvmectl.ANS2SweepParamsStruct_PARAMS_set)
    __swig_setmethods__["PADDING"] = _nvmectl.ANS2SweepParamsStruct_PADDING_set
    __swig_getmethods__["PADDING"] = _nvmectl.ANS2SweepParamsStruct_PADDING_get
    if _newclass:PADDING = _swig_property(_nvmectl.ANS2SweepParamsStruct_PADDING_get, _nvmectl.ANS2SweepParamsStruct_PADDING_set)
    def __init__(self): 
        this = _nvmectl.new_ANS2SweepParamsStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_ANS2SweepParamsStruct
    __del__ = lambda self : None;
ANS2SweepParamsStruct_swigregister = _nvmectl.ANS2SweepParamsStruct_swigregister
ANS2SweepParamsStruct_swigregister(ANS2SweepParamsStruct)

kNVMeFieldCountersNumBlocks = _nvmectl.kNVMeFieldCountersNumBlocks
kNVMeFieldCountersNumBlocksV2 = _nvmectl.kNVMeFieldCountersNumBlocksV2
kNVMeSystemCountersNumBlocks = _nvmectl.kNVMeSystemCountersNumBlocks
kNVMeAlgoirthmCountersNumBlocks = _nvmectl.kNVMeAlgoirthmCountersNumBlocks
kNVMeDefectsNumBlocks = _nvmectl.kNVMeDefectsNumBlocks
kNVMeErrorPayloadsNumBlocks = _nvmectl.kNVMeErrorPayloadsNumBlocks
kIOLogNumBlocks = _nvmectl.kIOLogNumBlocks
kNVMeAlgorithmCountersParam0 = _nvmectl.kNVMeAlgorithmCountersParam0
kNVMeAlgorithmCountersParam1 = _nvmectl.kNVMeAlgorithmCountersParam1
kNVMeFieldCountersV2Param0 = _nvmectl.kNVMeFieldCountersV2Param0
kNVMeFieldCountersV2Param1 = _nvmectl.kNVMeFieldCountersV2Param1
class S3BandStatsHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S3BandStatsHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S3BandStatsHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["NUM_BANDS"] = _nvmectl.S3BandStatsHeader_NUM_BANDS_set
    __swig_getmethods__["NUM_BANDS"] = _nvmectl.S3BandStatsHeader_NUM_BANDS_get
    if _newclass:NUM_BANDS = _swig_property(_nvmectl.S3BandStatsHeader_NUM_BANDS_get, _nvmectl.S3BandStatsHeader_NUM_BANDS_set)
    __swig_setmethods__["PARTITIONS"] = _nvmectl.S3BandStatsHeader_PARTITIONS_set
    __swig_getmethods__["PARTITIONS"] = _nvmectl.S3BandStatsHeader_PARTITIONS_get
    if _newclass:PARTITIONS = _swig_property(_nvmectl.S3BandStatsHeader_PARTITIONS_get, _nvmectl.S3BandStatsHeader_PARTITIONS_set)
    def __init__(self): 
        this = _nvmectl.new_S3BandStatsHeader()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_S3BandStatsHeader
    __del__ = lambda self : None;
S3BandStatsHeader_swigregister = _nvmectl.S3BandStatsHeader_swigregister
S3BandStatsHeader_swigregister(S3BandStatsHeader)

class S3BandStatsPartitionHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S3BandStatsPartitionHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S3BandStatsPartitionHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["FIRST_BAND"] = _nvmectl.S3BandStatsPartitionHeader_FIRST_BAND_set
    __swig_getmethods__["FIRST_BAND"] = _nvmectl.S3BandStatsPartitionHeader_FIRST_BAND_get
    if _newclass:FIRST_BAND = _swig_property(_nvmectl.S3BandStatsPartitionHeader_FIRST_BAND_get, _nvmectl.S3BandStatsPartitionHeader_FIRST_BAND_set)
    __swig_setmethods__["LAST_BAND"] = _nvmectl.S3BandStatsPartitionHeader_LAST_BAND_set
    __swig_getmethods__["LAST_BAND"] = _nvmectl.S3BandStatsPartitionHeader_LAST_BAND_get
    if _newclass:LAST_BAND = _swig_property(_nvmectl.S3BandStatsPartitionHeader_LAST_BAND_get, _nvmectl.S3BandStatsPartitionHeader_LAST_BAND_set)
    def __init__(self): 
        this = _nvmectl.new_S3BandStatsPartitionHeader()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_S3BandStatsPartitionHeader
    __del__ = lambda self : None;
S3BandStatsPartitionHeader_swigregister = _nvmectl.S3BandStatsPartitionHeader_swigregister
S3BandStatsPartitionHeader_swigregister(S3BandStatsPartitionHeader)

class S3BandStatsBandInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S3BandStatsBandInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S3BandStatsBandInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["FLAGS"] = _nvmectl.S3BandStatsBandInfo_FLAGS_set
    __swig_getmethods__["FLAGS"] = _nvmectl.S3BandStatsBandInfo_FLAGS_get
    if _newclass:FLAGS = _swig_property(_nvmectl.S3BandStatsBandInfo_FLAGS_get, _nvmectl.S3BandStatsBandInfo_FLAGS_set)
    __swig_setmethods__["FLOW"] = _nvmectl.S3BandStatsBandInfo_FLOW_set
    __swig_getmethods__["FLOW"] = _nvmectl.S3BandStatsBandInfo_FLOW_get
    if _newclass:FLOW = _swig_property(_nvmectl.S3BandStatsBandInfo_FLOW_get, _nvmectl.S3BandStatsBandInfo_FLOW_set)
    __swig_setmethods__["VALID"] = _nvmectl.S3BandStatsBandInfo_VALID_set
    __swig_getmethods__["VALID"] = _nvmectl.S3BandStatsBandInfo_VALID_get
    if _newclass:VALID = _swig_property(_nvmectl.S3BandStatsBandInfo_VALID_get, _nvmectl.S3BandStatsBandInfo_VALID_set)
    __swig_setmethods__["ERASE_CYCLES"] = _nvmectl.S3BandStatsBandInfo_ERASE_CYCLES_set
    __swig_getmethods__["ERASE_CYCLES"] = _nvmectl.S3BandStatsBandInfo_ERASE_CYCLES_get
    if _newclass:ERASE_CYCLES = _swig_property(_nvmectl.S3BandStatsBandInfo_ERASE_CYCLES_get, _nvmectl.S3BandStatsBandInfo_ERASE_CYCLES_set)
    __swig_setmethods__["AGE"] = _nvmectl.S3BandStatsBandInfo_AGE_set
    __swig_getmethods__["AGE"] = _nvmectl.S3BandStatsBandInfo_AGE_get
    if _newclass:AGE = _swig_property(_nvmectl.S3BandStatsBandInfo_AGE_get, _nvmectl.S3BandStatsBandInfo_AGE_set)
    def __init__(self): 
        this = _nvmectl.new_S3BandStatsBandInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_S3BandStatsBandInfo
    __del__ = lambda self : None;
S3BandStatsBandInfo_swigregister = _nvmectl.S3BandStatsBandInfo_swigregister
S3BandStatsBandInfo_swigregister(S3BandStatsBandInfo)

class S3GBBHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S3GBBHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S3GBBHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BUFFER_SIZE"] = _nvmectl.S3GBBHeader_BUFFER_SIZE_set
    __swig_getmethods__["BUFFER_SIZE"] = _nvmectl.S3GBBHeader_BUFFER_SIZE_get
    if _newclass:BUFFER_SIZE = _swig_property(_nvmectl.S3GBBHeader_BUFFER_SIZE_get, _nvmectl.S3GBBHeader_BUFFER_SIZE_set)
    __swig_setmethods__["FACTORY_BAD_COUNT"] = _nvmectl.S3GBBHeader_FACTORY_BAD_COUNT_set
    __swig_getmethods__["FACTORY_BAD_COUNT"] = _nvmectl.S3GBBHeader_FACTORY_BAD_COUNT_get
    if _newclass:FACTORY_BAD_COUNT = _swig_property(_nvmectl.S3GBBHeader_FACTORY_BAD_COUNT_get, _nvmectl.S3GBBHeader_FACTORY_BAD_COUNT_set)
    __swig_setmethods__["GROWN_BAD_COUNT"] = _nvmectl.S3GBBHeader_GROWN_BAD_COUNT_set
    __swig_getmethods__["GROWN_BAD_COUNT"] = _nvmectl.S3GBBHeader_GROWN_BAD_COUNT_get
    if _newclass:GROWN_BAD_COUNT = _swig_property(_nvmectl.S3GBBHeader_GROWN_BAD_COUNT_get, _nvmectl.S3GBBHeader_GROWN_BAD_COUNT_set)
    def __init__(self): 
        this = _nvmectl.new_S3GBBHeader()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_S3GBBHeader
    __del__ = lambda self : None;
S3GBBHeader_swigregister = _nvmectl.S3GBBHeader_swigregister
S3GBBHeader_swigregister(S3GBBHeader)

class ASPExportDefectEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ASPExportDefectEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ASPExportDefectEntry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BUS"] = _nvmectl.ASPExportDefectEntry_BUS_set
    __swig_getmethods__["BUS"] = _nvmectl.ASPExportDefectEntry_BUS_get
    if _newclass:BUS = _swig_property(_nvmectl.ASPExportDefectEntry_BUS_get, _nvmectl.ASPExportDefectEntry_BUS_set)
    __swig_setmethods__["CE"] = _nvmectl.ASPExportDefectEntry_CE_set
    __swig_getmethods__["CE"] = _nvmectl.ASPExportDefectEntry_CE_get
    if _newclass:CE = _swig_property(_nvmectl.ASPExportDefectEntry_CE_get, _nvmectl.ASPExportDefectEntry_CE_set)
    __swig_setmethods__["CAU"] = _nvmectl.ASPExportDefectEntry_CAU_set
    __swig_getmethods__["CAU"] = _nvmectl.ASPExportDefectEntry_CAU_get
    if _newclass:CAU = _swig_property(_nvmectl.ASPExportDefectEntry_CAU_get, _nvmectl.ASPExportDefectEntry_CAU_set)
    __swig_setmethods__["BAND"] = _nvmectl.ASPExportDefectEntry_BAND_set
    __swig_getmethods__["BAND"] = _nvmectl.ASPExportDefectEntry_BAND_get
    if _newclass:BAND = _swig_property(_nvmectl.ASPExportDefectEntry_BAND_get, _nvmectl.ASPExportDefectEntry_BAND_set)
    __swig_setmethods__["CYCLES"] = _nvmectl.ASPExportDefectEntry_CYCLES_set
    __swig_getmethods__["CYCLES"] = _nvmectl.ASPExportDefectEntry_CYCLES_get
    if _newclass:CYCLES = _swig_property(_nvmectl.ASPExportDefectEntry_CYCLES_get, _nvmectl.ASPExportDefectEntry_CYCLES_set)
    __swig_setmethods__["REASON"] = _nvmectl.ASPExportDefectEntry_REASON_set
    __swig_getmethods__["REASON"] = _nvmectl.ASPExportDefectEntry_REASON_get
    if _newclass:REASON = _swig_property(_nvmectl.ASPExportDefectEntry_REASON_get, _nvmectl.ASPExportDefectEntry_REASON_set)
    __swig_setmethods__["PAGE"] = _nvmectl.ASPExportDefectEntry_PAGE_set
    __swig_getmethods__["PAGE"] = _nvmectl.ASPExportDefectEntry_PAGE_get
    if _newclass:PAGE = _swig_property(_nvmectl.ASPExportDefectEntry_PAGE_get, _nvmectl.ASPExportDefectEntry_PAGE_set)
    __swig_setmethods__["TEMP"] = _nvmectl.ASPExportDefectEntry_TEMP_set
    __swig_getmethods__["TEMP"] = _nvmectl.ASPExportDefectEntry_TEMP_get
    if _newclass:TEMP = _swig_property(_nvmectl.ASPExportDefectEntry_TEMP_get, _nvmectl.ASPExportDefectEntry_TEMP_set)
    __swig_setmethods__["DEFECT_MODE"] = _nvmectl.ASPExportDefectEntry_DEFECT_MODE_set
    __swig_getmethods__["DEFECT_MODE"] = _nvmectl.ASPExportDefectEntry_DEFECT_MODE_get
    if _newclass:DEFECT_MODE = _swig_property(_nvmectl.ASPExportDefectEntry_DEFECT_MODE_get, _nvmectl.ASPExportDefectEntry_DEFECT_MODE_set)
    def __init__(self): 
        this = _nvmectl.new_ASPExportDefectEntry()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_ASPExportDefectEntry
    __del__ = lambda self : None;
ASPExportDefectEntry_swigregister = _nvmectl.ASPExportDefectEntry_swigregister
ASPExportDefectEntry_swigregister(ASPExportDefectEntry)

class S3NANDGeom(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S3NANDGeom, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S3NANDGeom, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CE_PER_BUS"] = _nvmectl.S3NANDGeom_CE_PER_BUS_set
    __swig_getmethods__["CE_PER_BUS"] = _nvmectl.S3NANDGeom_CE_PER_BUS_get
    if _newclass:CE_PER_BUS = _swig_property(_nvmectl.S3NANDGeom_CE_PER_BUS_get, _nvmectl.S3NANDGeom_CE_PER_BUS_set)
    __swig_setmethods__["CAU_PER_DIE"] = _nvmectl.S3NANDGeom_CAU_PER_DIE_set
    __swig_getmethods__["CAU_PER_DIE"] = _nvmectl.S3NANDGeom_CAU_PER_DIE_get
    if _newclass:CAU_PER_DIE = _swig_property(_nvmectl.S3NANDGeom_CAU_PER_DIE_get, _nvmectl.S3NANDGeom_CAU_PER_DIE_set)
    __swig_setmethods__["NUM_BUS"] = _nvmectl.S3NANDGeom_NUM_BUS_set
    __swig_getmethods__["NUM_BUS"] = _nvmectl.S3NANDGeom_NUM_BUS_get
    if _newclass:NUM_BUS = _swig_property(_nvmectl.S3NANDGeom_NUM_BUS_get, _nvmectl.S3NANDGeom_NUM_BUS_set)
    __swig_setmethods__["DIE_PER_BUS"] = _nvmectl.S3NANDGeom_DIE_PER_BUS_set
    __swig_getmethods__["DIE_PER_BUS"] = _nvmectl.S3NANDGeom_DIE_PER_BUS_get
    if _newclass:DIE_PER_BUS = _swig_property(_nvmectl.S3NANDGeom_DIE_PER_BUS_get, _nvmectl.S3NANDGeom_DIE_PER_BUS_set)
    __swig_setmethods__["NUM_DIP"] = _nvmectl.S3NANDGeom_NUM_DIP_set
    __swig_getmethods__["NUM_DIP"] = _nvmectl.S3NANDGeom_NUM_DIP_get
    if _newclass:NUM_DIP = _swig_property(_nvmectl.S3NANDGeom_NUM_DIP_get, _nvmectl.S3NANDGeom_NUM_DIP_set)
    __swig_setmethods__["NUM_BANDS"] = _nvmectl.S3NANDGeom_NUM_BANDS_set
    __swig_getmethods__["NUM_BANDS"] = _nvmectl.S3NANDGeom_NUM_BANDS_get
    if _newclass:NUM_BANDS = _swig_property(_nvmectl.S3NANDGeom_NUM_BANDS_get, _nvmectl.S3NANDGeom_NUM_BANDS_set)
    __swig_setmethods__["SEC_PER_PAGE"] = _nvmectl.S3NANDGeom_SEC_PER_PAGE_set
    __swig_getmethods__["SEC_PER_PAGE"] = _nvmectl.S3NANDGeom_SEC_PER_PAGE_get
    if _newclass:SEC_PER_PAGE = _swig_property(_nvmectl.S3NANDGeom_SEC_PER_PAGE_get, _nvmectl.S3NANDGeom_SEC_PER_PAGE_set)
    __swig_setmethods__["SEC_PER_FULL_BAND"] = _nvmectl.S3NANDGeom_SEC_PER_FULL_BAND_set
    __swig_getmethods__["SEC_PER_FULL_BAND"] = _nvmectl.S3NANDGeom_SEC_PER_FULL_BAND_get
    if _newclass:SEC_PER_FULL_BAND = _swig_property(_nvmectl.S3NANDGeom_SEC_PER_FULL_BAND_get, _nvmectl.S3NANDGeom_SEC_PER_FULL_BAND_set)
    __swig_setmethods__["SEC_PER_FULL_BAND_SLC"] = _nvmectl.S3NANDGeom_SEC_PER_FULL_BAND_SLC_set
    __swig_getmethods__["SEC_PER_FULL_BAND_SLC"] = _nvmectl.S3NANDGeom_SEC_PER_FULL_BAND_SLC_get
    if _newclass:SEC_PER_FULL_BAND_SLC = _swig_property(_nvmectl.S3NANDGeom_SEC_PER_FULL_BAND_SLC_get, _nvmectl.S3NANDGeom_SEC_PER_FULL_BAND_SLC_set)
    __swig_setmethods__["BYTES_PER_SEC_META"] = _nvmectl.S3NANDGeom_BYTES_PER_SEC_META_set
    __swig_getmethods__["BYTES_PER_SEC_META"] = _nvmectl.S3NANDGeom_BYTES_PER_SEC_META_get
    if _newclass:BYTES_PER_SEC_META = _swig_property(_nvmectl.S3NANDGeom_BYTES_PER_SEC_META_get, _nvmectl.S3NANDGeom_BYTES_PER_SEC_META_set)
    __swig_setmethods__["PAGES_PER_BLOCK"] = _nvmectl.S3NANDGeom_PAGES_PER_BLOCK_set
    __swig_getmethods__["PAGES_PER_BLOCK"] = _nvmectl.S3NANDGeom_PAGES_PER_BLOCK_get
    if _newclass:PAGES_PER_BLOCK = _swig_property(_nvmectl.S3NANDGeom_PAGES_PER_BLOCK_get, _nvmectl.S3NANDGeom_PAGES_PER_BLOCK_set)
    __swig_setmethods__["PAGES_PER_BLOCK_SLC"] = _nvmectl.S3NANDGeom_PAGES_PER_BLOCK_SLC_set
    __swig_getmethods__["PAGES_PER_BLOCK_SLC"] = _nvmectl.S3NANDGeom_PAGES_PER_BLOCK_SLC_get
    if _newclass:PAGES_PER_BLOCK_SLC = _swig_property(_nvmectl.S3NANDGeom_PAGES_PER_BLOCK_SLC_get, _nvmectl.S3NANDGeom_PAGES_PER_BLOCK_SLC_set)
    __swig_setmethods__["PAGES_PER_BLOCK0"] = _nvmectl.S3NANDGeom_PAGES_PER_BLOCK0_set
    __swig_getmethods__["PAGES_PER_BLOCK0"] = _nvmectl.S3NANDGeom_PAGES_PER_BLOCK0_get
    if _newclass:PAGES_PER_BLOCK0 = _swig_property(_nvmectl.S3NANDGeom_PAGES_PER_BLOCK0_get, _nvmectl.S3NANDGeom_PAGES_PER_BLOCK0_set)
    __swig_setmethods__["CELL_TYPE"] = _nvmectl.S3NANDGeom_CELL_TYPE_set
    __swig_getmethods__["CELL_TYPE"] = _nvmectl.S3NANDGeom_CELL_TYPE_get
    if _newclass:CELL_TYPE = _swig_property(_nvmectl.S3NANDGeom_CELL_TYPE_get, _nvmectl.S3NANDGeom_CELL_TYPE_set)
    __swig_setmethods__["PAGES_IN_READ_VERIFY"] = _nvmectl.S3NANDGeom_PAGES_IN_READ_VERIFY_set
    __swig_getmethods__["PAGES_IN_READ_VERIFY"] = _nvmectl.S3NANDGeom_PAGES_IN_READ_VERIFY_get
    if _newclass:PAGES_IN_READ_VERIFY = _swig_property(_nvmectl.S3NANDGeom_PAGES_IN_READ_VERIFY_get, _nvmectl.S3NANDGeom_PAGES_IN_READ_VERIFY_set)
    __swig_setmethods__["EOL_BLOCKS"] = _nvmectl.S3NANDGeom_EOL_BLOCKS_set
    __swig_getmethods__["EOL_BLOCKS"] = _nvmectl.S3NANDGeom_EOL_BLOCKS_get
    if _newclass:EOL_BLOCKS = _swig_property(_nvmectl.S3NANDGeom_EOL_BLOCKS_get, _nvmectl.S3NANDGeom_EOL_BLOCKS_set)
    __swig_setmethods__["BLOCK_PAIRING_SCHEME"] = _nvmectl.S3NANDGeom_BLOCK_PAIRING_SCHEME_set
    __swig_getmethods__["BLOCK_PAIRING_SCHEME"] = _nvmectl.S3NANDGeom_BLOCK_PAIRING_SCHEME_get
    if _newclass:BLOCK_PAIRING_SCHEME = _swig_property(_nvmectl.S3NANDGeom_BLOCK_PAIRING_SCHEME_get, _nvmectl.S3NANDGeom_BLOCK_PAIRING_SCHEME_set)
    __swig_setmethods__["PROGRAM_SCHEME"] = _nvmectl.S3NANDGeom_PROGRAM_SCHEME_set
    __swig_getmethods__["PROGRAM_SCHEME"] = _nvmectl.S3NANDGeom_PROGRAM_SCHEME_get
    if _newclass:PROGRAM_SCHEME = _swig_property(_nvmectl.S3NANDGeom_PROGRAM_SCHEME_get, _nvmectl.S3NANDGeom_PROGRAM_SCHEME_set)
    def __init__(self): 
        this = _nvmectl.new_S3NANDGeom()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_S3NANDGeom
    __del__ = lambda self : None;
S3NANDGeom_swigregister = _nvmectl.S3NANDGeom_swigregister
S3NANDGeom_swigregister(S3NANDGeom)

class S3NANDGeomStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S3NANDGeomStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S3NANDGeomStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["GEOM"] = _nvmectl.S3NANDGeomStruct_GEOM_set
    __swig_getmethods__["GEOM"] = _nvmectl.S3NANDGeomStruct_GEOM_get
    if _newclass:GEOM = _swig_property(_nvmectl.S3NANDGeomStruct_GEOM_get, _nvmectl.S3NANDGeomStruct_GEOM_set)
    __swig_setmethods__["PADDING"] = _nvmectl.S3NANDGeomStruct_PADDING_set
    __swig_getmethods__["PADDING"] = _nvmectl.S3NANDGeomStruct_PADDING_get
    if _newclass:PADDING = _swig_property(_nvmectl.S3NANDGeomStruct_PADDING_get, _nvmectl.S3NANDGeomStruct_PADDING_set)
    def __init__(self): 
        this = _nvmectl.new_S3NANDGeomStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_S3NANDGeomStruct
    __del__ = lambda self : None;
S3NANDGeomStruct_swigregister = _nvmectl.S3NANDGeomStruct_swigregister
S3NANDGeomStruct_swigregister(S3NANDGeomStruct)

class FEParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FEParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FEParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CURRENT"] = _nvmectl.FEParam_CURRENT_set
    __swig_getmethods__["CURRENT"] = _nvmectl.FEParam_CURRENT_get
    if _newclass:CURRENT = _swig_property(_nvmectl.FEParam_CURRENT_get, _nvmectl.FEParam_CURRENT_set)
    __swig_setmethods__["DEFAULT"] = _nvmectl.FEParam_DEFAULT_set
    __swig_getmethods__["DEFAULT"] = _nvmectl.FEParam_DEFAULT_get
    if _newclass:DEFAULT = _swig_property(_nvmectl.FEParam_DEFAULT_get, _nvmectl.FEParam_DEFAULT_set)
    __swig_setmethods__["MINIMUM"] = _nvmectl.FEParam_MINIMUM_set
    __swig_getmethods__["MINIMUM"] = _nvmectl.FEParam_MINIMUM_get
    if _newclass:MINIMUM = _swig_property(_nvmectl.FEParam_MINIMUM_get, _nvmectl.FEParam_MINIMUM_set)
    __swig_setmethods__["MAXIMUM"] = _nvmectl.FEParam_MAXIMUM_set
    __swig_getmethods__["MAXIMUM"] = _nvmectl.FEParam_MAXIMUM_get
    if _newclass:MAXIMUM = _swig_property(_nvmectl.FEParam_MAXIMUM_get, _nvmectl.FEParam_MAXIMUM_set)
    __swig_setmethods__["ADDRESS"] = _nvmectl.FEParam_ADDRESS_set
    __swig_getmethods__["ADDRESS"] = _nvmectl.FEParam_ADDRESS_get
    if _newclass:ADDRESS = _swig_property(_nvmectl.FEParam_ADDRESS_get, _nvmectl.FEParam_ADDRESS_set)
    def __init__(self): 
        this = _nvmectl.new_FEParam()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_FEParam
    __del__ = lambda self : None;
FEParam_swigregister = _nvmectl.FEParam_swigregister
FEParam_swigregister(FEParam)

class FEParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FEParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FEParams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["NUM_ETAGS"] = _nvmectl.FEParams_NUM_ETAGS_set
    __swig_getmethods__["NUM_ETAGS"] = _nvmectl.FEParams_NUM_ETAGS_get
    if _newclass:NUM_ETAGS = _swig_property(_nvmectl.FEParams_NUM_ETAGS_get, _nvmectl.FEParams_NUM_ETAGS_set)
    __swig_setmethods__["WRITE_PRP_REQUESTS"] = _nvmectl.FEParams_WRITE_PRP_REQUESTS_set
    __swig_getmethods__["WRITE_PRP_REQUESTS"] = _nvmectl.FEParams_WRITE_PRP_REQUESTS_get
    if _newclass:WRITE_PRP_REQUESTS = _swig_property(_nvmectl.FEParams_WRITE_PRP_REQUESTS_get, _nvmectl.FEParams_WRITE_PRP_REQUESTS_set)
    __swig_setmethods__["WRITE_DMA_REQUESTS"] = _nvmectl.FEParams_WRITE_DMA_REQUESTS_set
    __swig_getmethods__["WRITE_DMA_REQUESTS"] = _nvmectl.FEParams_WRITE_DMA_REQUESTS_get
    if _newclass:WRITE_DMA_REQUESTS = _swig_property(_nvmectl.FEParams_WRITE_DMA_REQUESTS_get, _nvmectl.FEParams_WRITE_DMA_REQUESTS_set)
    __swig_setmethods__["MAX_COMMIT_SIZE"] = _nvmectl.FEParams_MAX_COMMIT_SIZE_set
    __swig_getmethods__["MAX_COMMIT_SIZE"] = _nvmectl.FEParams_MAX_COMMIT_SIZE_get
    if _newclass:MAX_COMMIT_SIZE = _swig_property(_nvmectl.FEParams_MAX_COMMIT_SIZE_get, _nvmectl.FEParams_MAX_COMMIT_SIZE_set)
    __swig_setmethods__["NUM_READ_BUFFERS"] = _nvmectl.FEParams_NUM_READ_BUFFERS_set
    __swig_getmethods__["NUM_READ_BUFFERS"] = _nvmectl.FEParams_NUM_READ_BUFFERS_get
    if _newclass:NUM_READ_BUFFERS = _swig_property(_nvmectl.FEParams_NUM_READ_BUFFERS_get, _nvmectl.FEParams_NUM_READ_BUFFERS_set)
    __swig_setmethods__["READ_PRP_REQUESTS"] = _nvmectl.FEParams_READ_PRP_REQUESTS_set
    __swig_getmethods__["READ_PRP_REQUESTS"] = _nvmectl.FEParams_READ_PRP_REQUESTS_get
    if _newclass:READ_PRP_REQUESTS = _swig_property(_nvmectl.FEParams_READ_PRP_REQUESTS_get, _nvmectl.FEParams_READ_PRP_REQUESTS_set)
    __swig_setmethods__["READ_DMA_REQUESTS"] = _nvmectl.FEParams_READ_DMA_REQUESTS_set
    __swig_getmethods__["READ_DMA_REQUESTS"] = _nvmectl.FEParams_READ_DMA_REQUESTS_get
    if _newclass:READ_DMA_REQUESTS = _swig_property(_nvmectl.FEParams_READ_DMA_REQUESTS_get, _nvmectl.FEParams_READ_DMA_REQUESTS_set)
    __swig_setmethods__["READ_PRP_DB_PARTITION2_SIZE"] = _nvmectl.FEParams_READ_PRP_DB_PARTITION2_SIZE_set
    __swig_getmethods__["READ_PRP_DB_PARTITION2_SIZE"] = _nvmectl.FEParams_READ_PRP_DB_PARTITION2_SIZE_get
    if _newclass:READ_PRP_DB_PARTITION2_SIZE = _swig_property(_nvmectl.FEParams_READ_PRP_DB_PARTITION2_SIZE_get, _nvmectl.FEParams_READ_PRP_DB_PARTITION2_SIZE_set)
    __swig_setmethods__["READ_PRP_DB_PARTITION3_SIZE"] = _nvmectl.FEParams_READ_PRP_DB_PARTITION3_SIZE_set
    __swig_getmethods__["READ_PRP_DB_PARTITION3_SIZE"] = _nvmectl.FEParams_READ_PRP_DB_PARTITION3_SIZE_get
    if _newclass:READ_PRP_DB_PARTITION3_SIZE = _swig_property(_nvmectl.FEParams_READ_PRP_DB_PARTITION3_SIZE_get, _nvmectl.FEParams_READ_PRP_DB_PARTITION3_SIZE_set)
    __swig_setmethods__["READ_PRP_COPY_THRESHOLD"] = _nvmectl.FEParams_READ_PRP_COPY_THRESHOLD_set
    __swig_getmethods__["READ_PRP_COPY_THRESHOLD"] = _nvmectl.FEParams_READ_PRP_COPY_THRESHOLD_get
    if _newclass:READ_PRP_COPY_THRESHOLD = _swig_property(_nvmectl.FEParams_READ_PRP_COPY_THRESHOLD_get, _nvmectl.FEParams_READ_PRP_COPY_THRESHOLD_set)
    __swig_setmethods__["STATUS_RETURN_CODE"] = _nvmectl.FEParams_STATUS_RETURN_CODE_set
    __swig_getmethods__["STATUS_RETURN_CODE"] = _nvmectl.FEParams_STATUS_RETURN_CODE_get
    if _newclass:STATUS_RETURN_CODE = _swig_property(_nvmectl.FEParams_STATUS_RETURN_CODE_get, _nvmectl.FEParams_STATUS_RETURN_CODE_set)
    __swig_setmethods__["LOOPBACK_MODE"] = _nvmectl.FEParams_LOOPBACK_MODE_set
    __swig_getmethods__["LOOPBACK_MODE"] = _nvmectl.FEParams_LOOPBACK_MODE_get
    if _newclass:LOOPBACK_MODE = _swig_property(_nvmectl.FEParams_LOOPBACK_MODE_get, _nvmectl.FEParams_LOOPBACK_MODE_set)
    def __init__(self): 
        this = _nvmectl.new_FEParams()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_FEParams
    __del__ = lambda self : None;
FEParams_swigregister = _nvmectl.FEParams_swigregister
FEParams_swigregister(FEParams)

kNVMeFEParamsDataSize = _nvmectl.kNVMeFEParamsDataSize
class FEParamsStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FEParamsStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FEParamsStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["params"] = _nvmectl.FEParamsStruct_params_set
    __swig_getmethods__["params"] = _nvmectl.FEParamsStruct_params_get
    if _newclass:params = _swig_property(_nvmectl.FEParamsStruct_params_get, _nvmectl.FEParamsStruct_params_set)
    __swig_setmethods__["reserved"] = _nvmectl.FEParamsStruct_reserved_set
    __swig_getmethods__["reserved"] = _nvmectl.FEParamsStruct_reserved_get
    if _newclass:reserved = _swig_property(_nvmectl.FEParamsStruct_reserved_get, _nvmectl.FEParamsStruct_reserved_set)
    def __init__(self): 
        this = _nvmectl.new_FEParamsStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_FEParamsStruct
    __del__ = lambda self : None;
FEParamsStruct_swigregister = _nvmectl.FEParamsStruct_swigregister
FEParamsStruct_swigregister(FEParamsStruct)

kNVMeFEParamsPageOffset = _nvmectl.kNVMeFEParamsPageOffset
kNVMeFEParamsPageLen = _nvmectl.kNVMeFEParamsPageLen
FUSE_VALUE_FOR_HYNIX = _nvmectl.FUSE_VALUE_FOR_HYNIX
FUSE_VALUE_FOR_MICRON = _nvmectl.FUSE_VALUE_FOR_MICRON
FUSE_VALUE_FOR_SANDISK = _nvmectl.FUSE_VALUE_FOR_SANDISK
FUSE_VALUE_FOR_SAMSUNG = _nvmectl.FUSE_VALUE_FOR_SAMSUNG
FUSE_VALUE_FOR_TOSHIBA = _nvmectl.FUSE_VALUE_FOR_TOSHIBA
FUSE_VALUE_FOR_INTEL = _nvmectl.FUSE_VALUE_FOR_INTEL
NAND_DEVICE_HYNIX = _nvmectl.NAND_DEVICE_HYNIX
NAND_DEVICE_MICRON = _nvmectl.NAND_DEVICE_MICRON
NAND_DEVICE_SANDISK = _nvmectl.NAND_DEVICE_SANDISK
NAND_DEVICE_SAMSUNG = _nvmectl.NAND_DEVICE_SAMSUNG
NAND_DEVICE_TOSHIBA = _nvmectl.NAND_DEVICE_TOSHIBA
NAND_DEVICE_INTEL = _nvmectl.NAND_DEVICE_INTEL
NAND_NUM_VENDORS = _nvmectl.NAND_NUM_VENDORS
LYTH_TYPE_FIRST = _nvmectl.LYTH_TYPE_FIRST
LYTH_1X = _nvmectl.LYTH_1X
LYTH_1Y = _nvmectl.LYTH_1Y
LYTH_1Z = _nvmectl.LYTH_1Z
NAND_NUM_2D_LITHOS = _nvmectl.NAND_NUM_2D_LITHOS
LYTH_3D_GEN_1 = _nvmectl.LYTH_3D_GEN_1
LYTH_3D_GEN_2 = _nvmectl.LYTH_3D_GEN_2
LYTH_3D_GEN_3 = _nvmectl.LYTH_3D_GEN_3
LYTH_3D_GEN_4 = _nvmectl.LYTH_3D_GEN_4
NAND_NUM_3D_LITHOS = _nvmectl.NAND_NUM_3D_LITHOS
NAND_DEV_DENSITY_SLC = _nvmectl.NAND_DEV_DENSITY_SLC
NAND_DEV_DENSITY_MLC = _nvmectl.NAND_DEV_DENSITY_MLC
NAND_DEV_DENSITY_TLC = _nvmectl.NAND_DEV_DENSITY_TLC
NAND_DEV_DENSITY_PMLC = _nvmectl.NAND_DEV_DENSITY_PMLC
NAND_NUM_DENSITIES = _nvmectl.NAND_NUM_DENSITIES
SINGLE_DIMENSION = _nvmectl.SINGLE_DIMENSION
THREE_DIMENSION = _nvmectl.THREE_DIMENSION
NAND_NUM_DIMENSIONS = _nvmectl.NAND_NUM_DIMENSIONS
CAP_64Gb = _nvmectl.CAP_64Gb
CAP_128Gb = _nvmectl.CAP_128Gb
CAP_256Gb = _nvmectl.CAP_256Gb
CAP_512Gb = _nvmectl.CAP_512Gb
NAND_NUM_CAPACITIES = _nvmectl.NAND_NUM_CAPACITIES
B_DIE = _nvmectl.B_DIE
C_DIE = _nvmectl.C_DIE
NUM_DIE_TYPES = _nvmectl.NUM_DIE_TYPES
kNANDDeviceVendorOffset = _nvmectl.kNANDDeviceVendorOffset
kNANDDeviceVendorLen = _nvmectl.kNANDDeviceVendorLen
kNANDDeviceVendorMask = _nvmectl.kNANDDeviceVendorMask
kNANDDeviceLithographyOffset = _nvmectl.kNANDDeviceLithographyOffset
kNANDDeviceLithographyLen = _nvmectl.kNANDDeviceLithographyLen
kNANDDeviceLithographyMask = _nvmectl.kNANDDeviceLithographyMask
kNANDDeviceDensityOffset = _nvmectl.kNANDDeviceDensityOffset
kNANDDeviceDensityLen = _nvmectl.kNANDDeviceDensityLen
kNANDDeviceDensityMask = _nvmectl.kNANDDeviceDensityMask
kNANDDeviceTechnologyOffset = _nvmectl.kNANDDeviceTechnologyOffset
kNANDDeviceTechnologyLen = _nvmectl.kNANDDeviceTechnologyLen
kNANDDeviceTechnologyMask = _nvmectl.kNANDDeviceTechnologyMask
kNANDDeviceNumPlanesOffset = _nvmectl.kNANDDeviceNumPlanesOffset
kNANDDeviceNumPlanesLen = _nvmectl.kNANDDeviceNumPlanesLen
kNANDDeviceNumPlanesMask = _nvmectl.kNANDDeviceNumPlanesMask
kNANDDeviceCapacityPerDieOffset = _nvmectl.kNANDDeviceCapacityPerDieOffset
kNANDDeviceCapacityPerDieLen = _nvmectl.kNANDDeviceCapacityPerDieLen
kNANDDeviceCapacityPerDieMask = _nvmectl.kNANDDeviceCapacityPerDieMask
kNANDDeviceBFHECCVersionOffset = _nvmectl.kNANDDeviceBFHECCVersionOffset
kNANDDeviceBFHECCVersionLen = _nvmectl.kNANDDeviceBFHECCVersionLen
kNANDDeviceBFHECCVersionMask = _nvmectl.kNANDDeviceBFHECCVersionMask
kNANDDeviceBFHNANDVersionOffset = _nvmectl.kNANDDeviceBFHNANDVersionOffset
kNANDDeviceBFHNANDVersionLen = _nvmectl.kNANDDeviceBFHNANDVersionLen
kNANDDeviceBFHNANDVersionMask = _nvmectl.kNANDDeviceBFHNANDVersionMask
kNANDDeviceBFHConfigVersionOffset = _nvmectl.kNANDDeviceBFHConfigVersionOffset
kNANDDeviceBFHConfigVersionLen = _nvmectl.kNANDDeviceBFHConfigVersionLen
kNANDDeviceBFHConfigVersionMask = _nvmectl.kNANDDeviceBFHConfigVersionMask
kNANDDeviceLog2DiesPerChannelOffset = _nvmectl.kNANDDeviceLog2DiesPerChannelOffset
kNANDDeviceLog2DiesPerChannelLen = _nvmectl.kNANDDeviceLog2DiesPerChannelLen
kNANDDeviceLog2DiesPerChannelMask = _nvmectl.kNANDDeviceLog2DiesPerChannelMask
kNANDDeviceLog2ActiveChannelsOffset = _nvmectl.kNANDDeviceLog2ActiveChannelsOffset
kNANDDeviceLog2ActiveChannelsLen = _nvmectl.kNANDDeviceLog2ActiveChannelsLen
kNANDDeviceLog2ActiveChannelsMask = _nvmectl.kNANDDeviceLog2ActiveChannelsMask
kNANDDeviceFlagDiesSharingCEOffset = _nvmectl.kNANDDeviceFlagDiesSharingCEOffset
kNANDDeviceFlagDiesSharingCELen = _nvmectl.kNANDDeviceFlagDiesSharingCELen
kNANDDeviceFlagDiesSharingCEMask = _nvmectl.kNANDDeviceFlagDiesSharingCEMask
kNANDDeviceECCVersionOffset = _nvmectl.kNANDDeviceECCVersionOffset
kNANDDeviceECCVersionLen = _nvmectl.kNANDDeviceECCVersionLen
kNANDDeviceECCVersionMask = _nvmectl.kNANDDeviceECCVersionMask
kNANDDeviceNANDVersionOffset = _nvmectl.kNANDDeviceNANDVersionOffset
kNANDDeviceNANDVersionLen = _nvmectl.kNANDDeviceNANDVersionLen
kNANDDeviceNANDVersionMask = _nvmectl.kNANDDeviceNANDVersionMask
CHIP_S3E = _nvmectl.CHIP_S3E
CHIP_S3X = _nvmectl.CHIP_S3X
CHIP_S4E = _nvmectl.CHIP_S4E
CHIP_S5E = _nvmectl.CHIP_S5E
CHIP_NUM_ID = _nvmectl.CHIP_NUM_ID
REV_A = _nvmectl.REV_A
REV_B = _nvmectl.REV_B
REV_C = _nvmectl.REV_C
CHIP_NUM_REV_MAJOR = _nvmectl.CHIP_NUM_REV_MAJOR
kNVMeFWUpdateStageNone = _nvmectl.kNVMeFWUpdateStageNone
kNVMeFWUpdateStagePrimaryBFH = _nvmectl.kNVMeFWUpdateStagePrimaryBFH
kNVMeFWUpdateStageSecondaryBFH = _nvmectl.kNVMeFWUpdateStageSecondaryBFH
kNVMeFWUpdateStageDone = _nvmectl.kNVMeFWUpdateStageDone
kNVMeFWUpdateStageError = _nvmectl.kNVMeFWUpdateStageError
kNVMeChipIDStringLen = _nvmectl.kNVMeChipIDStringLen
kNVMeLoggerConfigCoreIDOffset = _nvmectl.kNVMeLoggerConfigCoreIDOffset
kNVMeLoggerConfigCoreIDLen = _nvmectl.kNVMeLoggerConfigCoreIDLen
kNVMeLoggerConfigCommandOffset = _nvmectl.kNVMeLoggerConfigCommandOffset
kNVMeLoggerConfigCommandLen = _nvmectl.kNVMeLoggerConfigCommandLen
kNVMeLoggerConfigStreamingOffset = _nvmectl.kNVMeLoggerConfigStreamingOffset
kNVMeLoggerConfigStreamingLen = _nvmectl.kNVMeLoggerConfigStreamingLen
kNVMeLoggerConfigCoreA5 = _nvmectl.kNVMeLoggerConfigCoreA5
kNVMeLoggerConfigCoreR5 = _nvmectl.kNVMeLoggerConfigCoreR5
kNVMeLoggerConfigCoreR51 = _nvmectl.kNVMeLoggerConfigCoreR51
kNVMeLoggerConfigCoreR52 = _nvmectl.kNVMeLoggerConfigCoreR52
kNVMeLoggerConfigCoreR53 = _nvmectl.kNVMeLoggerConfigCoreR53
kNVMeLoggerConfigCoreIDs = _nvmectl.kNVMeLoggerConfigCoreIDs
kNVMeLoggerConfigCommandStart = _nvmectl.kNVMeLoggerConfigCommandStart
kNVMeLoggerConfigCommandStop = _nvmectl.kNVMeLoggerConfigCommandStop
kNVMeLoggerConfigCommandConfigStreaming = _nvmectl.kNVMeLoggerConfigCommandConfigStreaming
kNVMeLoggerConfigCommands = _nvmectl.kNVMeLoggerConfigCommands
kNVMeSetHostFWSizeSizeOffset = _nvmectl.kNVMeSetHostFWSizeSizeOffset
kNVMeSetHostFWSizeSizeLen = _nvmectl.kNVMeSetHostFWSizeSizeLen
kNVMeBonfireTestNumDwordsOffset = _nvmectl.kNVMeBonfireTestNumDwordsOffset
kNVMeBonfireTestNumDwordsLen = _nvmectl.kNVMeBonfireTestNumDwordsLen
kNVMeIdentifyStorageIndexOffset = _nvmectl.kNVMeIdentifyStorageIndexOffset
kNVMeIdentifyStorageIndexLen = _nvmectl.kNVMeIdentifyStorageIndexLen
kNVMeIdentifyStorageReservedOffset = _nvmectl.kNVMeIdentifyStorageReservedOffset
kNVMeIdentifyStorageReservedLen = _nvmectl.kNVMeIdentifyStorageReservedLen
kNVMeTunnelTypeOffset = _nvmectl.kNVMeTunnelTypeOffset
kNVMeTunnelTypeLen = _nvmectl.kNVMeTunnelTypeLen
kNVMeFreezeSQsStateOffset = _nvmectl.kNVMeFreezeSQsStateOffset
kNVMeFreezeSQsStateLen = _nvmectl.kNVMeFreezeSQsStateLen
kNVMeFreezeSQsHostMaskOffset = _nvmectl.kNVMeFreezeSQsHostMaskOffset
kNVMeFreezeSQsHostMaskLen = _nvmectl.kNVMeFreezeSQsHostMaskLen
kNVMeFreezeSQsHostIDOffset = _nvmectl.kNVMeFreezeSQsHostIDOffset
kNVMeFreezeSQsHostIDLen = _nvmectl.kNVMeFreezeSQsHostIDLen
kNVMeTunnelArgsSize = _nvmectl.kNVMeTunnelArgsSize
class NVMeTunnelArgs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NVMeTunnelArgs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NVMeTunnelArgs, name)
    __repr__ = _swig_repr
    __swig_setmethods__["RESERVED1"] = _nvmectl.NVMeTunnelArgs_RESERVED1_set
    __swig_getmethods__["RESERVED1"] = _nvmectl.NVMeTunnelArgs_RESERVED1_get
    if _newclass:RESERVED1 = _swig_property(_nvmectl.NVMeTunnelArgs_RESERVED1_get, _nvmectl.NVMeTunnelArgs_RESERVED1_set)
    __swig_setmethods__["OPCODE"] = _nvmectl.NVMeTunnelArgs_OPCODE_set
    __swig_getmethods__["OPCODE"] = _nvmectl.NVMeTunnelArgs_OPCODE_get
    if _newclass:OPCODE = _swig_property(_nvmectl.NVMeTunnelArgs_OPCODE_get, _nvmectl.NVMeTunnelArgs_OPCODE_set)
    __swig_setmethods__["OPTIONS"] = _nvmectl.NVMeTunnelArgs_OPTIONS_set
    __swig_getmethods__["OPTIONS"] = _nvmectl.NVMeTunnelArgs_OPTIONS_get
    if _newclass:OPTIONS = _swig_property(_nvmectl.NVMeTunnelArgs_OPTIONS_get, _nvmectl.NVMeTunnelArgs_OPTIONS_set)
    __swig_setmethods__["RESERVED2"] = _nvmectl.NVMeTunnelArgs_RESERVED2_set
    __swig_getmethods__["RESERVED2"] = _nvmectl.NVMeTunnelArgs_RESERVED2_get
    if _newclass:RESERVED2 = _swig_property(_nvmectl.NVMeTunnelArgs_RESERVED2_get, _nvmectl.NVMeTunnelArgs_RESERVED2_set)
    def __init__(self): 
        this = _nvmectl.new_NVMeTunnelArgs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_NVMeTunnelArgs
    __del__ = lambda self : None;
NVMeTunnelArgs_swigregister = _nvmectl.NVMeTunnelArgs_swigregister
NVMeTunnelArgs_swigregister(NVMeTunnelArgs)
kDieCapacity = cvar.kDieCapacity

NVME_TUNNEL_NAND_DEBUG = _nvmectl.NVME_TUNNEL_NAND_DEBUG
NVME_TUNNEL_CORE_DEBUG = _nvmectl.NVME_TUNNEL_CORE_DEBUG
NAND_DEBUG_SET_FEATURES = _nvmectl.NAND_DEBUG_SET_FEATURES
NAND_DEBUG_GET_FEATURES = _nvmectl.NAND_DEBUG_GET_FEATURES
NAND_DEBUG_ENABLE_CRC = _nvmectl.NAND_DEBUG_ENABLE_CRC
NAND_DEBUG_DISABLE_CRC = _nvmectl.NAND_DEBUG_DISABLE_CRC
NAND_DEBUG_POWER_STATE = _nvmectl.NAND_DEBUG_POWER_STATE
NAND_DEBUG_MAX_DIES_IN_PARALLEL = _nvmectl.NAND_DEBUG_MAX_DIES_IN_PARALLEL
NAND_DEBUG_TEST_SCRATCHPAD = _nvmectl.NAND_DEBUG_TEST_SCRATCHPAD
NAND_DEBUG_PPN_FIRMWARE_UPDATE = _nvmectl.NAND_DEBUG_PPN_FIRMWARE_UPDATE
NAND_DEBUG_GET_TEMP_SENSOR = _nvmectl.NAND_DEBUG_GET_TEMP_SENSOR
NAND_DEBUG_GET_PPN_GEOM = _nvmectl.NAND_DEBUG_GET_PPN_GEOM
NAND_DEBUG_GET_PPN_TIMING = _nvmectl.NAND_DEBUG_GET_PPN_TIMING
NAND_DEBUG_GET_MARKETING_NAME = _nvmectl.NAND_DEBUG_GET_MARKETING_NAME
NAND_DEBUG_READ = _nvmectl.NAND_DEBUG_READ
NAND_DEBUG_TLC_READ_DELAY = _nvmectl.NAND_DEBUG_TLC_READ_DELAY
NAND_DEBUG_DISABLE_UID = _nvmectl.NAND_DEBUG_DISABLE_UID
NAND_DEBUG_GET_INIT_STATUS = _nvmectl.NAND_DEBUG_GET_INIT_STATUS
NAND_DEBUG_DEBUG_COUNTER_SUPPORTED = _nvmectl.NAND_DEBUG_DEBUG_COUNTER_SUPPORTED
NAND_DEBUG_GET_DEBUG_COUNTER = _nvmectl.NAND_DEBUG_GET_DEBUG_COUNTER
NAND_DEBUG_RESET_DEBUG_COUNTER = _nvmectl.NAND_DEBUG_RESET_DEBUG_COUNTER
NAND_DEBUG_CORE_COUNTERS_SUPPORTED = _nvmectl.NAND_DEBUG_CORE_COUNTERS_SUPPORTED
NAND_DEBUG_CORE_COUNTERS_RESET = _nvmectl.NAND_DEBUG_CORE_COUNTERS_RESET
NAND_DEBUG_CORE_COUNTERS_GET = _nvmectl.NAND_DEBUG_CORE_COUNTERS_GET
NAND_DEBUG_VTH_SWEEP = _nvmectl.NAND_DEBUG_VTH_SWEEP
NAND_DEBUG_GET_RMA_DATA = _nvmectl.NAND_DEBUG_GET_RMA_DATA
NAND_DEBUG_TRIGGER_RMA_DATA = _nvmectl.NAND_DEBUG_TRIGGER_RMA_DATA
NAND_DEBUG_GET_FAILURE_INFO = _nvmectl.NAND_DEBUG_GET_FAILURE_INFO
NAND_DEBUG_CONFIGURE_RMA_DATA = _nvmectl.NAND_DEBUG_CONFIGURE_RMA_DATA
NAND_DEBUG_DELETE_RMA_DATA = _nvmectl.NAND_DEBUG_DELETE_RMA_DATA
NAND_DEBUG_RECOVER = _nvmectl.NAND_DEBUG_RECOVER
NAND_DEBUG_GET_CALIBRATION = _nvmectl.NAND_DEBUG_GET_CALIBRATION
NAND_DEBUG_ENABLE_IN_DEPTH_HEALTH = _nvmectl.NAND_DEBUG_ENABLE_IN_DEPTH_HEALTH
NAND_DEBUG_GET_IN_DEPTH_HEALTH = _nvmectl.NAND_DEBUG_GET_IN_DEPTH_HEALTH
NAND_DEBUG_GET_WATERFALL_TBL_SIZE = _nvmectl.NAND_DEBUG_GET_WATERFALL_TBL_SIZE
NAND_DEBUG_GET_WATERFALL_TABLE = _nvmectl.NAND_DEBUG_GET_WATERFALL_TABLE
NAND_DEBUG_ISTLC = _nvmectl.NAND_DEBUG_ISTLC
NAND_DEBUG_GET_LINK_CLK_FREQ = _nvmectl.NAND_DEBUG_GET_LINK_CLK_FREQ
NAND_DEBUG_RESET_PERF_TICKS = _nvmectl.NAND_DEBUG_RESET_PERF_TICKS
NAND_DEBUG_GET_PERF_TICKS = _nvmectl.NAND_DEBUG_GET_PERF_TICKS
NAND_DEBUG_HEALTH_MONITORING_NONE = _nvmectl.NAND_DEBUG_HEALTH_MONITORING_NONE
NAND_DEBUG_HEALTH_MONITORING_SECTOR_STATS = _nvmectl.NAND_DEBUG_HEALTH_MONITORING_SECTOR_STATS
NAND_DEBUG_HEALTH_MONITORING_IN_DEPTH = _nvmectl.NAND_DEBUG_HEALTH_MONITORING_IN_DEPTH
NAND_DEBUG_HEALTH_MONITORING_COUNT = _nvmectl.NAND_DEBUG_HEALTH_MONITORING_COUNT
CELL_TYPE_IS_SLC = _nvmectl.CELL_TYPE_IS_SLC
CELL_TYPE_IS_MLC = _nvmectl.CELL_TYPE_IS_MLC
CELL_TYPE_IS_TLC = _nvmectl.CELL_TYPE_IS_TLC
CELL_TYPE_IS_MIXED = _nvmectl.CELL_TYPE_IS_MIXED
RANDOM_READ_SAME_DIE = _nvmectl.RANDOM_READ_SAME_DIE
RANDOM_READ_DIFF_DIE = _nvmectl.RANDOM_READ_DIFF_DIE
RANDOM_READ_DONT_CARE = _nvmectl.RANDOM_READ_DONT_CARE
class nand_debug_epr_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nand_debug_epr_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nand_debug_epr_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bus"] = _nvmectl.nand_debug_epr_t_bus_set
    __swig_getmethods__["bus"] = _nvmectl.nand_debug_epr_t_bus_get
    if _newclass:bus = _swig_property(_nvmectl.nand_debug_epr_t_bus_get, _nvmectl.nand_debug_epr_t_bus_set)
    __swig_setmethods__["ce"] = _nvmectl.nand_debug_epr_t_ce_set
    __swig_getmethods__["ce"] = _nvmectl.nand_debug_epr_t_ce_get
    if _newclass:ce = _swig_property(_nvmectl.nand_debug_epr_t_ce_get, _nvmectl.nand_debug_epr_t_ce_set)
    __swig_setmethods__["num_sectors"] = _nvmectl.nand_debug_epr_t_num_sectors_set
    __swig_getmethods__["num_sectors"] = _nvmectl.nand_debug_epr_t_num_sectors_get
    if _newclass:num_sectors = _swig_property(_nvmectl.nand_debug_epr_t_num_sectors_get, _nvmectl.nand_debug_epr_t_num_sectors_set)
    __swig_setmethods__["sector_offset"] = _nvmectl.nand_debug_epr_t_sector_offset_set
    __swig_getmethods__["sector_offset"] = _nvmectl.nand_debug_epr_t_sector_offset_get
    if _newclass:sector_offset = _swig_property(_nvmectl.nand_debug_epr_t_sector_offset_get, _nvmectl.nand_debug_epr_t_sector_offset_set)
    __swig_setmethods__["health_monitoring"] = _nvmectl.nand_debug_epr_t_health_monitoring_set
    __swig_getmethods__["health_monitoring"] = _nvmectl.nand_debug_epr_t_health_monitoring_get
    if _newclass:health_monitoring = _swig_property(_nvmectl.nand_debug_epr_t_health_monitoring_get, _nvmectl.nand_debug_epr_t_health_monitoring_set)
    __swig_setmethods__["sector_stats"] = _nvmectl.nand_debug_epr_t_sector_stats_set
    __swig_getmethods__["sector_stats"] = _nvmectl.nand_debug_epr_t_sector_stats_get
    if _newclass:sector_stats = _swig_property(_nvmectl.nand_debug_epr_t_sector_stats_get, _nvmectl.nand_debug_epr_t_sector_stats_set)
    __swig_setmethods__["tlc_pattern"] = _nvmectl.nand_debug_epr_t_tlc_pattern_set
    __swig_getmethods__["tlc_pattern"] = _nvmectl.nand_debug_epr_t_tlc_pattern_get
    if _newclass:tlc_pattern = _swig_property(_nvmectl.nand_debug_epr_t_tlc_pattern_get, _nvmectl.nand_debug_epr_t_tlc_pattern_set)
    __swig_setmethods__["output_value"] = _nvmectl.nand_debug_epr_t_output_value_set
    __swig_getmethods__["output_value"] = _nvmectl.nand_debug_epr_t_output_value_get
    if _newclass:output_value = _swig_property(_nvmectl.nand_debug_epr_t_output_value_get, _nvmectl.nand_debug_epr_t_output_value_set)
    __swig_setmethods__["cell_type"] = _nvmectl.nand_debug_epr_t_cell_type_set
    __swig_getmethods__["cell_type"] = _nvmectl.nand_debug_epr_t_cell_type_get
    if _newclass:cell_type = _swig_property(_nvmectl.nand_debug_epr_t_cell_type_get, _nvmectl.nand_debug_epr_t_cell_type_set)
    __swig_setmethods__["num_stripes"] = _nvmectl.nand_debug_epr_t_num_stripes_set
    __swig_getmethods__["num_stripes"] = _nvmectl.nand_debug_epr_t_num_stripes_get
    if _newclass:num_stripes = _swig_property(_nvmectl.nand_debug_epr_t_num_stripes_get, _nvmectl.nand_debug_epr_t_num_stripes_set)
    __swig_setmethods__["sectors_per_page"] = _nvmectl.nand_debug_epr_t_sectors_per_page_set
    __swig_getmethods__["sectors_per_page"] = _nvmectl.nand_debug_epr_t_sectors_per_page_get
    if _newclass:sectors_per_page = _swig_property(_nvmectl.nand_debug_epr_t_sectors_per_page_get, _nvmectl.nand_debug_epr_t_sectors_per_page_set)
    __swig_setmethods__["same_die"] = _nvmectl.nand_debug_epr_t_same_die_set
    __swig_getmethods__["same_die"] = _nvmectl.nand_debug_epr_t_same_die_get
    if _newclass:same_die = _swig_property(_nvmectl.nand_debug_epr_t_same_die_get, _nvmectl.nand_debug_epr_t_same_die_set)
    def __init__(self): 
        this = _nvmectl.new_nand_debug_epr_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_nand_debug_epr_t
    __del__ = lambda self : None;
nand_debug_epr_t_swigregister = _nvmectl.nand_debug_epr_t_swigregister
nand_debug_epr_t_swigregister(nand_debug_epr_t)

CORE_DEBUG_DISABLE_BG = _nvmectl.CORE_DEBUG_DISABLE_BG
CORE_DEBUG_ENABLE_BG = _nvmectl.CORE_DEBUG_ENABLE_BG
CORE_DEBUG_SET_QOS_PARAMETERS = _nvmectl.CORE_DEBUG_SET_QOS_PARAMETERS
CORE_DEBUG_SET_POWER_GATE = _nvmectl.CORE_DEBUG_SET_POWER_GATE
CORE_DEBUG_GET_FORMAT_TIME = _nvmectl.CORE_DEBUG_GET_FORMAT_TIME
CORE_DEBUG_SET_TIME = _nvmectl.CORE_DEBUG_SET_TIME
CORE_DEBUG_SET_NAND_QUAL = _nvmectl.CORE_DEBUG_SET_NAND_QUAL
CORE_DEBUG_RECOMMEND_CONTENT_DELETION = _nvmectl.CORE_DEBUG_RECOMMEND_CONTENT_DELETION
CORE_DEBUG_LOW_PRI_HOLDOFF = _nvmectl.CORE_DEBUG_LOW_PRI_HOLDOFF
CORE_DEBUG_READ_STATS = _nvmectl.CORE_DEBUG_READ_STATS
CORE_DEBUG_READ_BAND_STATS = _nvmectl.CORE_DEBUG_READ_BAND_STATS
CORE_DEBUG_READ_READCOUNTERS = _nvmectl.CORE_DEBUG_READ_READCOUNTERS
CORE_DEBUG_EXPORT_STATS = _nvmectl.CORE_DEBUG_EXPORT_STATS
CORE_DEBUG_READ_IND_BLOB = _nvmectl.CORE_DEBUG_READ_IND_BLOB
CORE_DEBUG_EXPORT_BAND_DEFECTS = _nvmectl.CORE_DEBUG_EXPORT_BAND_DEFECTS
CORE_DEBUG_CLEAR_QOS_BUCKETS = _nvmectl.CORE_DEBUG_CLEAR_QOS_BUCKETS
CORE_DEBUG_COUNTERS = _nvmectl.CORE_DEBUG_COUNTERS
CORE_DEBUG_SET_MAX_DIES_IN_PARALLEL = _nvmectl.CORE_DEBUG_SET_MAX_DIES_IN_PARALLEL
CORE_DEBUG_LBA_TO_PADDR = _nvmectl.CORE_DEBUG_LBA_TO_PADDR
CORE_DEBUG_WRITE_BAND = _nvmectl.CORE_DEBUG_WRITE_BAND
CORE_DEBUG_GET_SNAPSHOT = _nvmectl.CORE_DEBUG_GET_SNAPSHOT
CORE_DEBUG_ERASE_BAND = _nvmectl.CORE_DEBUG_ERASE_BAND
CORE_DEBUG_READ_VERIFY_BAND = _nvmectl.CORE_DEBUG_READ_VERIFY_BAND
CORE_DEBUG_READ_BAND = _nvmectl.CORE_DEBUG_READ_BAND
CORE_DEBUG_READ_RANDOM = _nvmectl.CORE_DEBUG_READ_RANDOM
CORE_DEBUG_READ_MIXED_SUPERPAGE = _nvmectl.CORE_DEBUG_READ_MIXED_SUPERPAGE
CORE_DEBUG_GET_SLC_BAND_FOR_BONFIRE = _nvmectl.CORE_DEBUG_GET_SLC_BAND_FOR_BONFIRE
CORE_DEBUG_RETURN_SLC_BAND = _nvmectl.CORE_DEBUG_RETURN_SLC_BAND
CORE_DEBUG_BONFIRE_SLC_GROUP_A = _nvmectl.CORE_DEBUG_BONFIRE_SLC_GROUP_A
CORE_DEBUG_BONFIRE_SLC_GROUP_B = _nvmectl.CORE_DEBUG_BONFIRE_SLC_GROUP_B
CORE_DEBUG_BONFIRE_SLC_UNGROUP = _nvmectl.CORE_DEBUG_BONFIRE_SLC_UNGROUP
CORE_DEBUG_BONFIRE_GET_PHY_BAND_NUM = _nvmectl.CORE_DEBUG_BONFIRE_GET_PHY_BAND_NUM
CORE_DEBUG_ENABLE_IOLOG = _nvmectl.CORE_DEBUG_ENABLE_IOLOG
CORE_DEBUG_IOLOG_HEADER = _nvmectl.CORE_DEBUG_IOLOG_HEADER
CORE_DEBUG_EXPORT_IOLOG = _nvmectl.CORE_DEBUG_EXPORT_IOLOG
CORE_DEBUG_SET_LOW_POWER_MAX_DIES_IN_PARALLEL = _nvmectl.CORE_DEBUG_SET_LOW_POWER_MAX_DIES_IN_PARALLEL
CORE_DEBUG_SET_POWER_STATE = _nvmectl.CORE_DEBUG_SET_POWER_STATE
CORE_DEBUG_SCHEDULE_BG_TASK = _nvmectl.CORE_DEBUG_SCHEDULE_BG_TASK
CORE_DEBUG_SET_PHOTOFLOW_MODE = _nvmectl.CORE_DEBUG_SET_PHOTOFLOW_MODE
CORE_DEBUG_EXPORT_IND_CONTIG_COUNT = _nvmectl.CORE_DEBUG_EXPORT_IND_CONTIG_COUNT
CORE_DEBUG_SET_INDIRECTION_MEMORY = _nvmectl.CORE_DEBUG_SET_INDIRECTION_MEMORY
CORE_DEBUG_SET_RAID_DEBUG = _nvmectl.CORE_DEBUG_SET_RAID_DEBUG
CORE_DEBUG_GET_BAND_GEOM = _nvmectl.CORE_DEBUG_GET_BAND_GEOM
CORE_DEBUG_BONFIRE_GET_SECTORS_PER_BAND = _nvmectl.CORE_DEBUG_BONFIRE_GET_SECTORS_PER_BAND
CORE_DEBUG_BONFIRE_ERASE_BAND = _nvmectl.CORE_DEBUG_BONFIRE_ERASE_BAND
CORE_DEBUG_BONFIRE_WRITE_BAND = _nvmectl.CORE_DEBUG_BONFIRE_WRITE_BAND
CORE_DEBUG_BONFIRE_READ_BAND = _nvmectl.CORE_DEBUG_BONFIRE_READ_BAND
CORE_DEBUG_BONFIRE_GET_LAST_FAILURE = _nvmectl.CORE_DEBUG_BONFIRE_GET_LAST_FAILURE
CORE_DEBUG_GET_BONFIRE_BURNIN_CODE = _nvmectl.CORE_DEBUG_GET_BONFIRE_BURNIN_CODE
CORE_DEBUG_SET_BONFIRE_BURNIN_CODE = _nvmectl.CORE_DEBUG_SET_BONFIRE_BURNIN_CODE
CORE_DEBUG_GET_ADDR = _nvmectl.CORE_DEBUG_GET_ADDR
CORE_DEBUG_GET_BBT = _nvmectl.CORE_DEBUG_GET_BBT
CORE_DEBUG_GET_DIP_INFO = _nvmectl.CORE_DEBUG_GET_DIP_INFO
CORE_DEBUG_GET_NAND_GEOM = _nvmectl.CORE_DEBUG_GET_NAND_GEOM
CORE_DEBUG_GET_NAND_ID = _nvmectl.CORE_DEBUG_GET_NAND_ID
CORE_DEBUG_GET_ROW_ADDRESS = _nvmectl.CORE_DEBUG_GET_ROW_ADDRESS
CORE_DEBUG_BREAK_ROW_ADDRESS = _nvmectl.CORE_DEBUG_BREAK_ROW_ADDRESS
CORE_DEBUG_TOGGLE_SLC_HOST_MODE = _nvmectl.CORE_DEBUG_TOGGLE_SLC_HOST_MODE
CORE_DEBUG_ERR_INJECT_ENABLE = _nvmectl.CORE_DEBUG_ERR_INJECT_ENABLE
CORE_DEBUG_ERR_INJECT_RESTART_ENABLE = _nvmectl.CORE_DEBUG_ERR_INJECT_RESTART_ENABLE
CORE_DEBUG_ERR_INJECT_DISABLE = _nvmectl.CORE_DEBUG_ERR_INJECT_DISABLE
CORE_DEBUG_ERR_INJECT_GENERAL_FAIL = _nvmectl.CORE_DEBUG_ERR_INJECT_GENERAL_FAIL
CORE_DEBUG_ERR_INJECT_ERASE_FAIL = _nvmectl.CORE_DEBUG_ERR_INJECT_ERASE_FAIL
CORE_DEBUG_ERR_INJECT_USER_READ_FAIL = _nvmectl.CORE_DEBUG_ERR_INJECT_USER_READ_FAIL
CORE_DEBUG_ERR_INJECT_PHY_FAIL = _nvmectl.CORE_DEBUG_ERR_INJECT_PHY_FAIL
CORE_DEBUG_ERR_INJECT_UTIL_FAIL = _nvmectl.CORE_DEBUG_ERR_INJECT_UTIL_FAIL
CORE_DEBUG_READ_LBA_WITH_META = _nvmectl.CORE_DEBUG_READ_LBA_WITH_META
CORE_DEBUG_SET_THROTTLING_LEVEL = _nvmectl.CORE_DEBUG_SET_THROTTLING_LEVEL
CORE_DEBUG_SET_FEATURES = _nvmectl.CORE_DEBUG_SET_FEATURES
CORE_DEBUG_GET_FEATURES = _nvmectl.CORE_DEBUG_GET_FEATURES
CORE_DEBUG_SET_PWR_BUDGET = _nvmectl.CORE_DEBUG_SET_PWR_BUDGET
CORE_DEBUG_GET_PWR_BUDGET = _nvmectl.CORE_DEBUG_GET_PWR_BUDGET
CORE_DEBUG_SET_READ_UNMAPPED_ASSERT = _nvmectl.CORE_DEBUG_SET_READ_UNMAPPED_ASSERT
CORE_DEBUG_SET_BDR_PARAMS = _nvmectl.CORE_DEBUG_SET_BDR_PARAMS
CORE_DEBUG_SET_POWER_BUDGET_PLATFORM_MODES_TABLE = _nvmectl.CORE_DEBUG_SET_POWER_BUDGET_PLATFORM_MODES_TABLE
CORE_DEBUG_SET_POWER_BUDGET_LUT_ACTIVE_TABLE = _nvmectl.CORE_DEBUG_SET_POWER_BUDGET_LUT_ACTIVE_TABLE
CORE_DEBUG_SET_THROTTLING_TABLE = _nvmectl.CORE_DEBUG_SET_THROTTLING_TABLE
CORE_DEBUG_GET_SNAPSHOT_HEADER = _nvmectl.CORE_DEBUG_GET_SNAPSHOT_HEADER
CORE_DEBUG_SET_DEVICE_CONFIG = _nvmectl.CORE_DEBUG_SET_DEVICE_CONFIG
class core_asp_time(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, core_asp_time, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, core_asp_time, name)
    __repr__ = _swig_repr
    __swig_setmethods__["util_format_time"] = _nvmectl.core_asp_time_util_format_time_set
    __swig_getmethods__["util_format_time"] = _nvmectl.core_asp_time_util_format_time_get
    if _newclass:util_format_time = _swig_property(_nvmectl.core_asp_time_util_format_time_get, _nvmectl.core_asp_time_util_format_time_set)
    __swig_setmethods__["calendar_time"] = _nvmectl.core_asp_time_calendar_time_set
    __swig_getmethods__["calendar_time"] = _nvmectl.core_asp_time_calendar_time_get
    if _newclass:calendar_time = _swig_property(_nvmectl.core_asp_time_calendar_time_get, _nvmectl.core_asp_time_calendar_time_set)
    __swig_setmethods__["asp_mach_wall_time"] = _nvmectl.core_asp_time_asp_mach_wall_time_set
    __swig_getmethods__["asp_mach_wall_time"] = _nvmectl.core_asp_time_asp_mach_wall_time_get
    if _newclass:asp_mach_wall_time = _swig_property(_nvmectl.core_asp_time_asp_mach_wall_time_get, _nvmectl.core_asp_time_asp_mach_wall_time_set)
    __swig_setmethods__["absolute_time_ap"] = _nvmectl.core_asp_time_absolute_time_ap_set
    __swig_getmethods__["absolute_time_ap"] = _nvmectl.core_asp_time_absolute_time_ap_get
    if _newclass:absolute_time_ap = _swig_property(_nvmectl.core_asp_time_absolute_time_ap_get, _nvmectl.core_asp_time_absolute_time_ap_set)
    __swig_setmethods__["continuous_time_ap"] = _nvmectl.core_asp_time_continuous_time_ap_set
    __swig_getmethods__["continuous_time_ap"] = _nvmectl.core_asp_time_continuous_time_ap_get
    if _newclass:continuous_time_ap = _swig_property(_nvmectl.core_asp_time_continuous_time_ap_get, _nvmectl.core_asp_time_continuous_time_ap_set)
    def __init__(self): 
        this = _nvmectl.new_core_asp_time()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_core_asp_time
    __del__ = lambda self : None;
core_asp_time_swigregister = _nvmectl.core_asp_time_swigregister
core_asp_time_swigregister(core_asp_time)

class core_band_geom_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, core_band_geom_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, core_band_geom_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["firstIntermediateBand"] = _nvmectl.core_band_geom_t_firstIntermediateBand_set
    __swig_getmethods__["firstIntermediateBand"] = _nvmectl.core_band_geom_t_firstIntermediateBand_get
    if _newclass:firstIntermediateBand = _swig_property(_nvmectl.core_band_geom_t_firstIntermediateBand_get, _nvmectl.core_band_geom_t_firstIntermediateBand_set)
    __swig_setmethods__["lastIntermediateBand"] = _nvmectl.core_band_geom_t_lastIntermediateBand_set
    __swig_getmethods__["lastIntermediateBand"] = _nvmectl.core_band_geom_t_lastIntermediateBand_get
    if _newclass:lastIntermediateBand = _swig_property(_nvmectl.core_band_geom_t_lastIntermediateBand_get, _nvmectl.core_band_geom_t_lastIntermediateBand_set)
    __swig_setmethods__["numVirtualSLCBonfireBands"] = _nvmectl.core_band_geom_t_numVirtualSLCBonfireBands_set
    __swig_getmethods__["numVirtualSLCBonfireBands"] = _nvmectl.core_band_geom_t_numVirtualSLCBonfireBands_get
    if _newclass:numVirtualSLCBonfireBands = _swig_property(_nvmectl.core_band_geom_t_numVirtualSLCBonfireBands_get, _nvmectl.core_band_geom_t_numVirtualSLCBonfireBands_set)
    __swig_setmethods__["firstUserBand"] = _nvmectl.core_band_geom_t_firstUserBand_set
    __swig_getmethods__["firstUserBand"] = _nvmectl.core_band_geom_t_firstUserBand_get
    if _newclass:firstUserBand = _swig_property(_nvmectl.core_band_geom_t_firstUserBand_get, _nvmectl.core_band_geom_t_firstUserBand_set)
    __swig_setmethods__["lastUserBand"] = _nvmectl.core_band_geom_t_lastUserBand_set
    __swig_getmethods__["lastUserBand"] = _nvmectl.core_band_geom_t_lastUserBand_get
    if _newclass:lastUserBand = _swig_property(_nvmectl.core_band_geom_t_lastUserBand_get, _nvmectl.core_band_geom_t_lastUserBand_set)
    __swig_setmethods__["lastBand"] = _nvmectl.core_band_geom_t_lastBand_set
    __swig_getmethods__["lastBand"] = _nvmectl.core_band_geom_t_lastBand_get
    if _newclass:lastBand = _swig_property(_nvmectl.core_band_geom_t_lastBand_get, _nvmectl.core_band_geom_t_lastBand_set)
    def __init__(self): 
        this = _nvmectl.new_core_band_geom_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_core_band_geom_t
    __del__ = lambda self : None;
core_band_geom_t_swigregister = _nvmectl.core_band_geom_t_swigregister
core_band_geom_t_swigregister(core_band_geom_t)

class dies_in_parallel_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dies_in_parallel_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dies_in_parallel_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mlc_mlc_write_dies"] = _nvmectl.dies_in_parallel_t_mlc_mlc_write_dies_set
    __swig_getmethods__["mlc_mlc_write_dies"] = _nvmectl.dies_in_parallel_t_mlc_mlc_write_dies_get
    if _newclass:mlc_mlc_write_dies = _swig_property(_nvmectl.dies_in_parallel_t_mlc_mlc_write_dies_get, _nvmectl.dies_in_parallel_t_mlc_mlc_write_dies_set)
    __swig_setmethods__["mlc_slc_write_dies"] = _nvmectl.dies_in_parallel_t_mlc_slc_write_dies_set
    __swig_getmethods__["mlc_slc_write_dies"] = _nvmectl.dies_in_parallel_t_mlc_slc_write_dies_get
    if _newclass:mlc_slc_write_dies = _swig_property(_nvmectl.dies_in_parallel_t_mlc_slc_write_dies_get, _nvmectl.dies_in_parallel_t_mlc_slc_write_dies_set)
    __swig_setmethods__["mlc_erase_dies"] = _nvmectl.dies_in_parallel_t_mlc_erase_dies_set
    __swig_getmethods__["mlc_erase_dies"] = _nvmectl.dies_in_parallel_t_mlc_erase_dies_get
    if _newclass:mlc_erase_dies = _swig_property(_nvmectl.dies_in_parallel_t_mlc_erase_dies_get, _nvmectl.dies_in_parallel_t_mlc_erase_dies_set)
    __swig_setmethods__["mlc_read_dies"] = _nvmectl.dies_in_parallel_t_mlc_read_dies_set
    __swig_getmethods__["mlc_read_dies"] = _nvmectl.dies_in_parallel_t_mlc_read_dies_get
    if _newclass:mlc_read_dies = _swig_property(_nvmectl.dies_in_parallel_t_mlc_read_dies_get, _nvmectl.dies_in_parallel_t_mlc_read_dies_set)
    __swig_setmethods__["tlc_tlc_write_dies"] = _nvmectl.dies_in_parallel_t_tlc_tlc_write_dies_set
    __swig_getmethods__["tlc_tlc_write_dies"] = _nvmectl.dies_in_parallel_t_tlc_tlc_write_dies_get
    if _newclass:tlc_tlc_write_dies = _swig_property(_nvmectl.dies_in_parallel_t_tlc_tlc_write_dies_get, _nvmectl.dies_in_parallel_t_tlc_tlc_write_dies_set)
    __swig_setmethods__["tlc_slc_write_dies"] = _nvmectl.dies_in_parallel_t_tlc_slc_write_dies_set
    __swig_getmethods__["tlc_slc_write_dies"] = _nvmectl.dies_in_parallel_t_tlc_slc_write_dies_get
    if _newclass:tlc_slc_write_dies = _swig_property(_nvmectl.dies_in_parallel_t_tlc_slc_write_dies_get, _nvmectl.dies_in_parallel_t_tlc_slc_write_dies_set)
    __swig_setmethods__["tlc_erase_dies"] = _nvmectl.dies_in_parallel_t_tlc_erase_dies_set
    __swig_getmethods__["tlc_erase_dies"] = _nvmectl.dies_in_parallel_t_tlc_erase_dies_get
    if _newclass:tlc_erase_dies = _swig_property(_nvmectl.dies_in_parallel_t_tlc_erase_dies_get, _nvmectl.dies_in_parallel_t_tlc_erase_dies_set)
    __swig_setmethods__["tlc_read_dies"] = _nvmectl.dies_in_parallel_t_tlc_read_dies_set
    __swig_getmethods__["tlc_read_dies"] = _nvmectl.dies_in_parallel_t_tlc_read_dies_get
    if _newclass:tlc_read_dies = _swig_property(_nvmectl.dies_in_parallel_t_tlc_read_dies_get, _nvmectl.dies_in_parallel_t_tlc_read_dies_set)
    def __init__(self): 
        this = _nvmectl.new_dies_in_parallel_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_dies_in_parallel_t
    __del__ = lambda self : None;
dies_in_parallel_t_swigregister = _nvmectl.dies_in_parallel_t_swigregister
dies_in_parallel_t_swigregister(dies_in_parallel_t)

class IndirectionMemory_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndirectionMemory_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndirectionMemory_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["heapIndMemory"] = _nvmectl.IndirectionMemory_t_heapIndMemory_set
    __swig_getmethods__["heapIndMemory"] = _nvmectl.IndirectionMemory_t_heapIndMemory_get
    if _newclass:heapIndMemory = _swig_property(_nvmectl.IndirectionMemory_t_heapIndMemory_get, _nvmectl.IndirectionMemory_t_heapIndMemory_set)
    __swig_setmethods__["legacyIndMemory"] = _nvmectl.IndirectionMemory_t_legacyIndMemory_set
    __swig_getmethods__["legacyIndMemory"] = _nvmectl.IndirectionMemory_t_legacyIndMemory_get
    if _newclass:legacyIndMemory = _swig_property(_nvmectl.IndirectionMemory_t_legacyIndMemory_get, _nvmectl.IndirectionMemory_t_legacyIndMemory_set)
    def __init__(self): 
        this = _nvmectl.new_IndirectionMemory_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_IndirectionMemory_t
    __del__ = lambda self : None;
IndirectionMemory_t_swigregister = _nvmectl.IndirectionMemory_t_swigregister
IndirectionMemory_t_swigregister(IndirectionMemory_t)

class aspproto_nand_col_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aspproto_nand_col_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aspproto_nand_col_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cau"] = _nvmectl.aspproto_nand_col_t_cau_set
    __swig_getmethods__["cau"] = _nvmectl.aspproto_nand_col_t_cau_get
    if _newclass:cau = _swig_property(_nvmectl.aspproto_nand_col_t_cau_get, _nvmectl.aspproto_nand_col_t_cau_set)
    __swig_setmethods__["ce"] = _nvmectl.aspproto_nand_col_t_ce_set
    __swig_getmethods__["ce"] = _nvmectl.aspproto_nand_col_t_ce_get
    if _newclass:ce = _swig_property(_nvmectl.aspproto_nand_col_t_ce_get, _nvmectl.aspproto_nand_col_t_ce_set)
    __swig_setmethods__["bus"] = _nvmectl.aspproto_nand_col_t_bus_set
    __swig_getmethods__["bus"] = _nvmectl.aspproto_nand_col_t_bus_get
    if _newclass:bus = _swig_property(_nvmectl.aspproto_nand_col_t_bus_get, _nvmectl.aspproto_nand_col_t_bus_set)
    def __init__(self): 
        this = _nvmectl.new_aspproto_nand_col_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_aspproto_nand_col_t
    __del__ = lambda self : None;
aspproto_nand_col_t_swigregister = _nvmectl.aspproto_nand_col_t_swigregister
aspproto_nand_col_t_swigregister(aspproto_nand_col_t)

ASPPROTO_CMD_STATUS_SUCCESS = _nvmectl.ASPPROTO_CMD_STATUS_SUCCESS
ASPPROTO_CMD_STATUS_INVALID_OP = _nvmectl.ASPPROTO_CMD_STATUS_INVALID_OP
ASPPROTO_CMD_STATUS_INVALID_PARAM = _nvmectl.ASPPROTO_CMD_STATUS_INVALID_PARAM
ASPPROTO_CMD_STATUS_MEDIAERR = _nvmectl.ASPPROTO_CMD_STATUS_MEDIAERR
ASPPROTO_CMD_STATUS_TIMEOUT = _nvmectl.ASPPROTO_CMD_STATUS_TIMEOUT
ASPPROTO_CMD_STATUS_REFRESH = _nvmectl.ASPPROTO_CMD_STATUS_REFRESH
ASPPROTO_CMD_STATUS_CLEAN = _nvmectl.ASPPROTO_CMD_STATUS_CLEAN
ASPPROTO_CMD_STATUS_EFAIL = _nvmectl.ASPPROTO_CMD_STATUS_EFAIL
ASPPROTO_CMD_STATUS_PFAIL = _nvmectl.ASPPROTO_CMD_STATUS_PFAIL
ASPPROTO_CMD_STATUS_IGNORED = _nvmectl.ASPPROTO_CMD_STATUS_IGNORED
ASPPROTO_CMD_STATUS_UNKNOWN = _nvmectl.ASPPROTO_CMD_STATUS_UNKNOWN
class aspproto_bonfire_last_failure_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aspproto_bonfire_last_failure_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aspproto_bonfire_last_failure_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["failure_mode"] = _nvmectl.aspproto_bonfire_last_failure_t_failure_mode_set
    __swig_getmethods__["failure_mode"] = _nvmectl.aspproto_bonfire_last_failure_t_failure_mode_get
    if _newclass:failure_mode = _swig_property(_nvmectl.aspproto_bonfire_last_failure_t_failure_mode_get, _nvmectl.aspproto_bonfire_last_failure_t_failure_mode_set)
    __swig_setmethods__["nand_col"] = _nvmectl.aspproto_bonfire_last_failure_t_nand_col_set
    __swig_getmethods__["nand_col"] = _nvmectl.aspproto_bonfire_last_failure_t_nand_col_get
    if _newclass:nand_col = _swig_property(_nvmectl.aspproto_bonfire_last_failure_t_nand_col_get, _nvmectl.aspproto_bonfire_last_failure_t_nand_col_set)
    __swig_setmethods__["ce"] = _nvmectl.aspproto_bonfire_last_failure_t_ce_set
    __swig_getmethods__["ce"] = _nvmectl.aspproto_bonfire_last_failure_t_ce_get
    if _newclass:ce = _swig_property(_nvmectl.aspproto_bonfire_last_failure_t_ce_get, _nvmectl.aspproto_bonfire_last_failure_t_ce_set)
    __swig_setmethods__["physical_block"] = _nvmectl.aspproto_bonfire_last_failure_t_physical_block_set
    __swig_getmethods__["physical_block"] = _nvmectl.aspproto_bonfire_last_failure_t_physical_block_get
    if _newclass:physical_block = _swig_property(_nvmectl.aspproto_bonfire_last_failure_t_physical_block_get, _nvmectl.aspproto_bonfire_last_failure_t_physical_block_set)
    __swig_setmethods__["physical_page"] = _nvmectl.aspproto_bonfire_last_failure_t_physical_page_set
    __swig_getmethods__["physical_page"] = _nvmectl.aspproto_bonfire_last_failure_t_physical_page_get
    if _newclass:physical_page = _swig_property(_nvmectl.aspproto_bonfire_last_failure_t_physical_page_get, _nvmectl.aspproto_bonfire_last_failure_t_physical_page_set)
    __swig_setmethods__["mode"] = _nvmectl.aspproto_bonfire_last_failure_t_mode_set
    __swig_getmethods__["mode"] = _nvmectl.aspproto_bonfire_last_failure_t_mode_get
    if _newclass:mode = _swig_property(_nvmectl.aspproto_bonfire_last_failure_t_mode_get, _nvmectl.aspproto_bonfire_last_failure_t_mode_set)
    def __init__(self): 
        this = _nvmectl.new_aspproto_bonfire_last_failure_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_aspproto_bonfire_last_failure_t
    __del__ = lambda self : None;
aspproto_bonfire_last_failure_t_swigregister = _nvmectl.aspproto_bonfire_last_failure_t_swigregister
aspproto_bonfire_last_failure_t_swigregister(aspproto_bonfire_last_failure_t)

class aspproto_addr_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aspproto_addr_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aspproto_addr_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vba"] = _nvmectl.aspproto_addr_t_vba_set
    __swig_getmethods__["vba"] = _nvmectl.aspproto_addr_t_vba_get
    if _newclass:vba = _swig_property(_nvmectl.aspproto_addr_t_vba_get, _nvmectl.aspproto_addr_t_vba_set)
    __swig_setmethods__["ce"] = _nvmectl.aspproto_addr_t_ce_set
    __swig_getmethods__["ce"] = _nvmectl.aspproto_addr_t_ce_get
    if _newclass:ce = _swig_property(_nvmectl.aspproto_addr_t_ce_get, _nvmectl.aspproto_addr_t_ce_set)
    __swig_setmethods__["row_addr"] = _nvmectl.aspproto_addr_t_row_addr_set
    __swig_getmethods__["row_addr"] = _nvmectl.aspproto_addr_t_row_addr_get
    if _newclass:row_addr = _swig_property(_nvmectl.aspproto_addr_t_row_addr_get, _nvmectl.aspproto_addr_t_row_addr_set)
    __swig_setmethods__["column"] = _nvmectl.aspproto_addr_t_column_set
    __swig_getmethods__["column"] = _nvmectl.aspproto_addr_t_column_get
    if _newclass:column = _swig_property(_nvmectl.aspproto_addr_t_column_get, _nvmectl.aspproto_addr_t_column_set)
    __swig_setmethods__["cau"] = _nvmectl.aspproto_addr_t_cau_set
    __swig_getmethods__["cau"] = _nvmectl.aspproto_addr_t_cau_get
    if _newclass:cau = _swig_property(_nvmectl.aspproto_addr_t_cau_get, _nvmectl.aspproto_addr_t_cau_set)
    def __init__(self): 
        this = _nvmectl.new_aspproto_addr_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_aspproto_addr_t
    __del__ = lambda self : None;
aspproto_addr_t_swigregister = _nvmectl.aspproto_addr_t_swigregister
aspproto_addr_t_swigregister(aspproto_addr_t)

class aspproto_debug_opts_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aspproto_debug_opts_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aspproto_debug_opts_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mask"] = _nvmectl.aspproto_debug_opts_t_mask_set
    __swig_getmethods__["mask"] = _nvmectl.aspproto_debug_opts_t_mask_get
    if _newclass:mask = _swig_property(_nvmectl.aspproto_debug_opts_t_mask_get, _nvmectl.aspproto_debug_opts_t_mask_set)
    __swig_setmethods__["status"] = _nvmectl.aspproto_debug_opts_t_status_set
    __swig_getmethods__["status"] = _nvmectl.aspproto_debug_opts_t_status_get
    if _newclass:status = _swig_property(_nvmectl.aspproto_debug_opts_t_status_get, _nvmectl.aspproto_debug_opts_t_status_set)
    __swig_getmethods__["flags"] = _nvmectl.aspproto_debug_opts_t_flags_get
    if _newclass:flags = _swig_property(_nvmectl.aspproto_debug_opts_t_flags_get)
    def __init__(self): 
        this = _nvmectl.new_aspproto_debug_opts_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_aspproto_debug_opts_t
    __del__ = lambda self : None;
aspproto_debug_opts_t_swigregister = _nvmectl.aspproto_debug_opts_t_swigregister
aspproto_debug_opts_t_swigregister(aspproto_debug_opts_t)

class aspproto_debug_opts_t_flags(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aspproto_debug_opts_t_flags, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aspproto_debug_opts_t_flags, name)
    __repr__ = _swig_repr
    __swig_setmethods__["all"] = _nvmectl.aspproto_debug_opts_t_flags_all_set
    __swig_getmethods__["all"] = _nvmectl.aspproto_debug_opts_t_flags_all_get
    if _newclass:all = _swig_property(_nvmectl.aspproto_debug_opts_t_flags_all_get, _nvmectl.aspproto_debug_opts_t_flags_all_set)
    def __init__(self): 
        this = _nvmectl.new_aspproto_debug_opts_t_flags()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_aspproto_debug_opts_t_flags
    __del__ = lambda self : None;
aspproto_debug_opts_t_flags_swigregister = _nvmectl.aspproto_debug_opts_t_flags_swigregister
aspproto_debug_opts_t_flags_swigregister(aspproto_debug_opts_t_flags)

class aspproto_s3_debug_inject_general_fail_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aspproto_s3_debug_inject_general_fail_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aspproto_s3_debug_inject_general_fail_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["moduleType"] = _nvmectl.aspproto_s3_debug_inject_general_fail_t_moduleType_set
    __swig_getmethods__["moduleType"] = _nvmectl.aspproto_s3_debug_inject_general_fail_t_moduleType_get
    if _newclass:moduleType = _swig_property(_nvmectl.aspproto_s3_debug_inject_general_fail_t_moduleType_get, _nvmectl.aspproto_s3_debug_inject_general_fail_t_moduleType_set)
    __swig_setmethods__["errType"] = _nvmectl.aspproto_s3_debug_inject_general_fail_t_errType_set
    __swig_getmethods__["errType"] = _nvmectl.aspproto_s3_debug_inject_general_fail_t_errType_get
    if _newclass:errType = _swig_property(_nvmectl.aspproto_s3_debug_inject_general_fail_t_errType_get, _nvmectl.aspproto_s3_debug_inject_general_fail_t_errType_set)
    __swig_setmethods__["cellType"] = _nvmectl.aspproto_s3_debug_inject_general_fail_t_cellType_set
    __swig_getmethods__["cellType"] = _nvmectl.aspproto_s3_debug_inject_general_fail_t_cellType_get
    if _newclass:cellType = _swig_property(_nvmectl.aspproto_s3_debug_inject_general_fail_t_cellType_get, _nvmectl.aspproto_s3_debug_inject_general_fail_t_cellType_set)
    __swig_setmethods__["rate"] = _nvmectl.aspproto_s3_debug_inject_general_fail_t_rate_set
    __swig_getmethods__["rate"] = _nvmectl.aspproto_s3_debug_inject_general_fail_t_rate_get
    if _newclass:rate = _swig_property(_nvmectl.aspproto_s3_debug_inject_general_fail_t_rate_get, _nvmectl.aspproto_s3_debug_inject_general_fail_t_rate_set)
    __swig_setmethods__["amount"] = _nvmectl.aspproto_s3_debug_inject_general_fail_t_amount_set
    __swig_getmethods__["amount"] = _nvmectl.aspproto_s3_debug_inject_general_fail_t_amount_get
    if _newclass:amount = _swig_property(_nvmectl.aspproto_s3_debug_inject_general_fail_t_amount_get, _nvmectl.aspproto_s3_debug_inject_general_fail_t_amount_set)
    def __init__(self): 
        this = _nvmectl.new_aspproto_s3_debug_inject_general_fail_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_aspproto_s3_debug_inject_general_fail_t
    __del__ = lambda self : None;
aspproto_s3_debug_inject_general_fail_t_swigregister = _nvmectl.aspproto_s3_debug_inject_general_fail_t_swigregister
aspproto_s3_debug_inject_general_fail_t_swigregister(aspproto_s3_debug_inject_general_fail_t)

class aspproto_s3_debug_inject_erase_fail_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aspproto_s3_debug_inject_erase_fail_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aspproto_s3_debug_inject_erase_fail_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cellType"] = _nvmectl.aspproto_s3_debug_inject_erase_fail_t_cellType_set
    __swig_getmethods__["cellType"] = _nvmectl.aspproto_s3_debug_inject_erase_fail_t_cellType_get
    if _newclass:cellType = _swig_property(_nvmectl.aspproto_s3_debug_inject_erase_fail_t_cellType_get, _nvmectl.aspproto_s3_debug_inject_erase_fail_t_cellType_set)
    __swig_setmethods__["rate"] = _nvmectl.aspproto_s3_debug_inject_erase_fail_t_rate_set
    __swig_getmethods__["rate"] = _nvmectl.aspproto_s3_debug_inject_erase_fail_t_rate_get
    if _newclass:rate = _swig_property(_nvmectl.aspproto_s3_debug_inject_erase_fail_t_rate_get, _nvmectl.aspproto_s3_debug_inject_erase_fail_t_rate_set)
    __swig_setmethods__["amount"] = _nvmectl.aspproto_s3_debug_inject_erase_fail_t_amount_set
    __swig_getmethods__["amount"] = _nvmectl.aspproto_s3_debug_inject_erase_fail_t_amount_get
    if _newclass:amount = _swig_property(_nvmectl.aspproto_s3_debug_inject_erase_fail_t_amount_get, _nvmectl.aspproto_s3_debug_inject_erase_fail_t_amount_set)
    def __init__(self): 
        this = _nvmectl.new_aspproto_s3_debug_inject_erase_fail_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_aspproto_s3_debug_inject_erase_fail_t
    __del__ = lambda self : None;
aspproto_s3_debug_inject_erase_fail_t_swigregister = _nvmectl.aspproto_s3_debug_inject_erase_fail_t_swigregister
aspproto_s3_debug_inject_erase_fail_t_swigregister(aspproto_s3_debug_inject_erase_fail_t)

class aspproto_s3_debug_inject_user_read_fail_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aspproto_s3_debug_inject_user_read_fail_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aspproto_s3_debug_inject_user_read_fail_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lba"] = _nvmectl.aspproto_s3_debug_inject_user_read_fail_t_lba_set
    __swig_getmethods__["lba"] = _nvmectl.aspproto_s3_debug_inject_user_read_fail_t_lba_get
    if _newclass:lba = _swig_property(_nvmectl.aspproto_s3_debug_inject_user_read_fail_t_lba_get, _nvmectl.aspproto_s3_debug_inject_user_read_fail_t_lba_set)
    __swig_setmethods__["errType"] = _nvmectl.aspproto_s3_debug_inject_user_read_fail_t_errType_set
    __swig_getmethods__["errType"] = _nvmectl.aspproto_s3_debug_inject_user_read_fail_t_errType_get
    if _newclass:errType = _swig_property(_nvmectl.aspproto_s3_debug_inject_user_read_fail_t_errType_get, _nvmectl.aspproto_s3_debug_inject_user_read_fail_t_errType_set)
    def __init__(self): 
        this = _nvmectl.new_aspproto_s3_debug_inject_user_read_fail_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_aspproto_s3_debug_inject_user_read_fail_t
    __del__ = lambda self : None;
aspproto_s3_debug_inject_user_read_fail_t_swigregister = _nvmectl.aspproto_s3_debug_inject_user_read_fail_t_swigregister
aspproto_s3_debug_inject_user_read_fail_t_swigregister(aspproto_s3_debug_inject_user_read_fail_t)

class aspproto_s3_debug_inject_phy_fail_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aspproto_s3_debug_inject_phy_fail_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aspproto_s3_debug_inject_phy_fail_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bork"] = _nvmectl.aspproto_s3_debug_inject_phy_fail_t_bork_set
    __swig_getmethods__["bork"] = _nvmectl.aspproto_s3_debug_inject_phy_fail_t_bork_get
    if _newclass:bork = _swig_property(_nvmectl.aspproto_s3_debug_inject_phy_fail_t_bork_get, _nvmectl.aspproto_s3_debug_inject_phy_fail_t_bork_set)
    __swig_setmethods__["dip"] = _nvmectl.aspproto_s3_debug_inject_phy_fail_t_dip_set
    __swig_getmethods__["dip"] = _nvmectl.aspproto_s3_debug_inject_phy_fail_t_dip_get
    if _newclass:dip = _swig_property(_nvmectl.aspproto_s3_debug_inject_phy_fail_t_dip_get, _nvmectl.aspproto_s3_debug_inject_phy_fail_t_dip_set)
    __swig_setmethods__["page"] = _nvmectl.aspproto_s3_debug_inject_phy_fail_t_page_set
    __swig_getmethods__["page"] = _nvmectl.aspproto_s3_debug_inject_phy_fail_t_page_get
    if _newclass:page = _swig_property(_nvmectl.aspproto_s3_debug_inject_phy_fail_t_page_get, _nvmectl.aspproto_s3_debug_inject_phy_fail_t_page_set)
    def __init__(self): 
        this = _nvmectl.new_aspproto_s3_debug_inject_phy_fail_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_aspproto_s3_debug_inject_phy_fail_t
    __del__ = lambda self : None;
aspproto_s3_debug_inject_phy_fail_t_swigregister = _nvmectl.aspproto_s3_debug_inject_phy_fail_t_swigregister
aspproto_s3_debug_inject_phy_fail_t_swigregister(aspproto_s3_debug_inject_phy_fail_t)

class aspproto_s3_debug_inject_util_fail_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aspproto_s3_debug_inject_util_fail_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aspproto_s3_debug_inject_util_fail_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["errType"] = _nvmectl.aspproto_s3_debug_inject_util_fail_t_errType_set
    __swig_getmethods__["errType"] = _nvmectl.aspproto_s3_debug_inject_util_fail_t_errType_get
    if _newclass:errType = _swig_property(_nvmectl.aspproto_s3_debug_inject_util_fail_t_errType_get, _nvmectl.aspproto_s3_debug_inject_util_fail_t_errType_set)
    __swig_setmethods__["element"] = _nvmectl.aspproto_s3_debug_inject_util_fail_t_element_set
    __swig_getmethods__["element"] = _nvmectl.aspproto_s3_debug_inject_util_fail_t_element_get
    if _newclass:element = _swig_property(_nvmectl.aspproto_s3_debug_inject_util_fail_t_element_get, _nvmectl.aspproto_s3_debug_inject_util_fail_t_element_set)
    __swig_setmethods__["copyType"] = _nvmectl.aspproto_s3_debug_inject_util_fail_t_copyType_set
    __swig_getmethods__["copyType"] = _nvmectl.aspproto_s3_debug_inject_util_fail_t_copyType_get
    if _newclass:copyType = _swig_property(_nvmectl.aspproto_s3_debug_inject_util_fail_t_copyType_get, _nvmectl.aspproto_s3_debug_inject_util_fail_t_copyType_set)
    __swig_setmethods__["rate"] = _nvmectl.aspproto_s3_debug_inject_util_fail_t_rate_set
    __swig_getmethods__["rate"] = _nvmectl.aspproto_s3_debug_inject_util_fail_t_rate_get
    if _newclass:rate = _swig_property(_nvmectl.aspproto_s3_debug_inject_util_fail_t_rate_get, _nvmectl.aspproto_s3_debug_inject_util_fail_t_rate_set)
    __swig_setmethods__["amount"] = _nvmectl.aspproto_s3_debug_inject_util_fail_t_amount_set
    __swig_getmethods__["amount"] = _nvmectl.aspproto_s3_debug_inject_util_fail_t_amount_get
    if _newclass:amount = _swig_property(_nvmectl.aspproto_s3_debug_inject_util_fail_t_amount_get, _nvmectl.aspproto_s3_debug_inject_util_fail_t_amount_set)
    def __init__(self): 
        this = _nvmectl.new_aspproto_s3_debug_inject_util_fail_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_aspproto_s3_debug_inject_util_fail_t
    __del__ = lambda self : None;
aspproto_s3_debug_inject_util_fail_t_swigregister = _nvmectl.aspproto_s3_debug_inject_util_fail_t_swigregister
aspproto_s3_debug_inject_util_fail_t_swigregister(aspproto_s3_debug_inject_util_fail_t)

class aspproto_s3_debug_read_lba_with_meta_opts_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aspproto_s3_debug_read_lba_with_meta_opts_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aspproto_s3_debug_read_lba_with_meta_opts_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lba"] = _nvmectl.aspproto_s3_debug_read_lba_with_meta_opts_t_lba_set
    __swig_getmethods__["lba"] = _nvmectl.aspproto_s3_debug_read_lba_with_meta_opts_t_lba_get
    if _newclass:lba = _swig_property(_nvmectl.aspproto_s3_debug_read_lba_with_meta_opts_t_lba_get, _nvmectl.aspproto_s3_debug_read_lba_with_meta_opts_t_lba_set)
    def __init__(self): 
        this = _nvmectl.new_aspproto_s3_debug_read_lba_with_meta_opts_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_aspproto_s3_debug_read_lba_with_meta_opts_t
    __del__ = lambda self : None;
aspproto_s3_debug_read_lba_with_meta_opts_t_swigregister = _nvmectl.aspproto_s3_debug_read_lba_with_meta_opts_t_swigregister
aspproto_s3_debug_read_lba_with_meta_opts_t_swigregister(aspproto_s3_debug_read_lba_with_meta_opts_t)

CORE_DEBUG_PARAM_MAX_SIZE = _nvmectl.CORE_DEBUG_PARAM_MAX_SIZE
class aspproto_s3_debug_features_opts_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aspproto_s3_debug_features_opts_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aspproto_s3_debug_features_opts_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["buf"] = _nvmectl.aspproto_s3_debug_features_opts_t_buf_set
    __swig_getmethods__["buf"] = _nvmectl.aspproto_s3_debug_features_opts_t_buf_get
    if _newclass:buf = _swig_property(_nvmectl.aspproto_s3_debug_features_opts_t_buf_get, _nvmectl.aspproto_s3_debug_features_opts_t_buf_set)
    def __init__(self): 
        this = _nvmectl.new_aspproto_s3_debug_features_opts_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_aspproto_s3_debug_features_opts_t
    __del__ = lambda self : None;
aspproto_s3_debug_features_opts_t_swigregister = _nvmectl.aspproto_s3_debug_features_opts_t_swigregister
aspproto_s3_debug_features_opts_t_swigregister(aspproto_s3_debug_features_opts_t)

class aspproto_s3_debug_opts_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aspproto_s3_debug_opts_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aspproto_s3_debug_opts_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["status"] = _nvmectl.aspproto_s3_debug_opts_t_status_set
    __swig_getmethods__["status"] = _nvmectl.aspproto_s3_debug_opts_t_status_get
    if _newclass:status = _swig_property(_nvmectl.aspproto_s3_debug_opts_t_status_get, _nvmectl.aspproto_s3_debug_opts_t_status_set)
    def __init__(self): 
        this = _nvmectl.new_aspproto_s3_debug_opts_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_aspproto_s3_debug_opts_t
    __del__ = lambda self : None;
aspproto_s3_debug_opts_t_swigregister = _nvmectl.aspproto_s3_debug_opts_t_swigregister
aspproto_s3_debug_opts_t_swigregister(aspproto_s3_debug_opts_t)

class aspproto_tunnel_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aspproto_tunnel_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aspproto_tunnel_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["buffer_paddr"] = _nvmectl.aspproto_tunnel_t_buffer_paddr_set
    __swig_getmethods__["buffer_paddr"] = _nvmectl.aspproto_tunnel_t_buffer_paddr_get
    if _newclass:buffer_paddr = _swig_property(_nvmectl.aspproto_tunnel_t_buffer_paddr_get, _nvmectl.aspproto_tunnel_t_buffer_paddr_set)
    __swig_setmethods__["bufferLen"] = _nvmectl.aspproto_tunnel_t_bufferLen_set
    __swig_getmethods__["bufferLen"] = _nvmectl.aspproto_tunnel_t_bufferLen_get
    if _newclass:bufferLen = _swig_property(_nvmectl.aspproto_tunnel_t_bufferLen_get, _nvmectl.aspproto_tunnel_t_bufferLen_set)
    def __init__(self): 
        this = _nvmectl.new_aspproto_tunnel_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_aspproto_tunnel_t
    __del__ = lambda self : None;
aspproto_tunnel_t_swigregister = _nvmectl.aspproto_tunnel_t_swigregister
aspproto_tunnel_t_swigregister(aspproto_tunnel_t)

class core_tunnel_flags(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, core_tunnel_flags, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, core_tunnel_flags, name)
    __repr__ = _swig_repr
    __swig_setmethods__["all"] = _nvmectl.core_tunnel_flags_all_set
    __swig_getmethods__["all"] = _nvmectl.core_tunnel_flags_all_get
    if _newclass:all = _swig_property(_nvmectl.core_tunnel_flags_all_get, _nvmectl.core_tunnel_flags_all_set)
    def __init__(self): 
        this = _nvmectl.new_core_tunnel_flags()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_core_tunnel_flags
    __del__ = lambda self : None;
core_tunnel_flags_swigregister = _nvmectl.core_tunnel_flags_swigregister
core_tunnel_flags_swigregister(core_tunnel_flags)

class core_tunnel_parameters_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, core_tunnel_parameters_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, core_tunnel_parameters_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _nvmectl.new_core_tunnel_parameters_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_core_tunnel_parameters_t
    __del__ = lambda self : None;
core_tunnel_parameters_t_swigregister = _nvmectl.core_tunnel_parameters_t_swigregister
core_tunnel_parameters_t_swigregister(core_tunnel_parameters_t)

kNVMeAlgoCountersMaxDwords = _nvmectl.kNVMeAlgoCountersMaxDwords
kNVMeAlgoCountersMaxSize = _nvmectl.kNVMeAlgoCountersMaxSize
kNVMeFTLCountersSize = _nvmectl.kNVMeFTLCountersSize
kNVMeFieldCountersSize = _nvmectl.kNVMeFieldCountersSize
kNANDTypeNone = _nvmectl.kNANDTypeNone
kNANDType1X64G = _nvmectl.kNANDType1X64G
kNANDType1Y64G = _nvmectl.kNANDType1Y64G
kNANDType1Y128G = _nvmectl.kNANDType1Y128G
class NVMeAlgoCounters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NVMeAlgoCounters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NVMeAlgoCounters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ENDURANCE0"] = _nvmectl.NVMeAlgoCounters_ENDURANCE0_set
    __swig_getmethods__["ENDURANCE0"] = _nvmectl.NVMeAlgoCounters_ENDURANCE0_get
    if _newclass:ENDURANCE0 = _swig_property(_nvmectl.NVMeAlgoCounters_ENDURANCE0_get, _nvmectl.NVMeAlgoCounters_ENDURANCE0_set)
    __swig_setmethods__["ENDURANCE1"] = _nvmectl.NVMeAlgoCounters_ENDURANCE1_set
    __swig_getmethods__["ENDURANCE1"] = _nvmectl.NVMeAlgoCounters_ENDURANCE1_get
    if _newclass:ENDURANCE1 = _swig_property(_nvmectl.NVMeAlgoCounters_ENDURANCE1_get, _nvmectl.NVMeAlgoCounters_ENDURANCE1_set)
    __swig_setmethods__["ENDURANCE2"] = _nvmectl.NVMeAlgoCounters_ENDURANCE2_set
    __swig_getmethods__["ENDURANCE2"] = _nvmectl.NVMeAlgoCounters_ENDURANCE2_get
    if _newclass:ENDURANCE2 = _swig_property(_nvmectl.NVMeAlgoCounters_ENDURANCE2_get, _nvmectl.NVMeAlgoCounters_ENDURANCE2_set)
    __swig_setmethods__["ENDURANCE3"] = _nvmectl.NVMeAlgoCounters_ENDURANCE3_set
    __swig_getmethods__["ENDURANCE3"] = _nvmectl.NVMeAlgoCounters_ENDURANCE3_get
    if _newclass:ENDURANCE3 = _swig_property(_nvmectl.NVMeAlgoCounters_ENDURANCE3_get, _nvmectl.NVMeAlgoCounters_ENDURANCE3_set)
    __swig_setmethods__["ENDURANCE4"] = _nvmectl.NVMeAlgoCounters_ENDURANCE4_set
    __swig_getmethods__["ENDURANCE4"] = _nvmectl.NVMeAlgoCounters_ENDURANCE4_get
    if _newclass:ENDURANCE4 = _swig_property(_nvmectl.NVMeAlgoCounters_ENDURANCE4_get, _nvmectl.NVMeAlgoCounters_ENDURANCE4_set)
    __swig_setmethods__["ENDURANCE5"] = _nvmectl.NVMeAlgoCounters_ENDURANCE5_set
    __swig_getmethods__["ENDURANCE5"] = _nvmectl.NVMeAlgoCounters_ENDURANCE5_get
    if _newclass:ENDURANCE5 = _swig_property(_nvmectl.NVMeAlgoCounters_ENDURANCE5_get, _nvmectl.NVMeAlgoCounters_ENDURANCE5_set)
    __swig_setmethods__["ENDURANCE6"] = _nvmectl.NVMeAlgoCounters_ENDURANCE6_set
    __swig_getmethods__["ENDURANCE6"] = _nvmectl.NVMeAlgoCounters_ENDURANCE6_get
    if _newclass:ENDURANCE6 = _swig_property(_nvmectl.NVMeAlgoCounters_ENDURANCE6_get, _nvmectl.NVMeAlgoCounters_ENDURANCE6_set)
    __swig_setmethods__["ENDURANCE7"] = _nvmectl.NVMeAlgoCounters_ENDURANCE7_set
    __swig_getmethods__["ENDURANCE7"] = _nvmectl.NVMeAlgoCounters_ENDURANCE7_get
    if _newclass:ENDURANCE7 = _swig_property(_nvmectl.NVMeAlgoCounters_ENDURANCE7_get, _nvmectl.NVMeAlgoCounters_ENDURANCE7_set)
    __swig_setmethods__["READ_DISTURB0"] = _nvmectl.NVMeAlgoCounters_READ_DISTURB0_set
    __swig_getmethods__["READ_DISTURB0"] = _nvmectl.NVMeAlgoCounters_READ_DISTURB0_get
    if _newclass:READ_DISTURB0 = _swig_property(_nvmectl.NVMeAlgoCounters_READ_DISTURB0_get, _nvmectl.NVMeAlgoCounters_READ_DISTURB0_set)
    __swig_setmethods__["READ_DISTURB1"] = _nvmectl.NVMeAlgoCounters_READ_DISTURB1_set
    __swig_getmethods__["READ_DISTURB1"] = _nvmectl.NVMeAlgoCounters_READ_DISTURB1_get
    if _newclass:READ_DISTURB1 = _swig_property(_nvmectl.NVMeAlgoCounters_READ_DISTURB1_get, _nvmectl.NVMeAlgoCounters_READ_DISTURB1_set)
    __swig_setmethods__["READ_DISTURB2"] = _nvmectl.NVMeAlgoCounters_READ_DISTURB2_set
    __swig_getmethods__["READ_DISTURB2"] = _nvmectl.NVMeAlgoCounters_READ_DISTURB2_get
    if _newclass:READ_DISTURB2 = _swig_property(_nvmectl.NVMeAlgoCounters_READ_DISTURB2_get, _nvmectl.NVMeAlgoCounters_READ_DISTURB2_set)
    __swig_setmethods__["READ_DISTURB3"] = _nvmectl.NVMeAlgoCounters_READ_DISTURB3_set
    __swig_getmethods__["READ_DISTURB3"] = _nvmectl.NVMeAlgoCounters_READ_DISTURB3_get
    if _newclass:READ_DISTURB3 = _swig_property(_nvmectl.NVMeAlgoCounters_READ_DISTURB3_get, _nvmectl.NVMeAlgoCounters_READ_DISTURB3_set)
    __swig_setmethods__["READ_DISTURB4"] = _nvmectl.NVMeAlgoCounters_READ_DISTURB4_set
    __swig_getmethods__["READ_DISTURB4"] = _nvmectl.NVMeAlgoCounters_READ_DISTURB4_get
    if _newclass:READ_DISTURB4 = _swig_property(_nvmectl.NVMeAlgoCounters_READ_DISTURB4_get, _nvmectl.NVMeAlgoCounters_READ_DISTURB4_set)
    __swig_setmethods__["READ_DISTURB5"] = _nvmectl.NVMeAlgoCounters_READ_DISTURB5_set
    __swig_getmethods__["READ_DISTURB5"] = _nvmectl.NVMeAlgoCounters_READ_DISTURB5_get
    if _newclass:READ_DISTURB5 = _swig_property(_nvmectl.NVMeAlgoCounters_READ_DISTURB5_get, _nvmectl.NVMeAlgoCounters_READ_DISTURB5_set)
    __swig_setmethods__["READ_DISTURB6"] = _nvmectl.NVMeAlgoCounters_READ_DISTURB6_set
    __swig_getmethods__["READ_DISTURB6"] = _nvmectl.NVMeAlgoCounters_READ_DISTURB6_get
    if _newclass:READ_DISTURB6 = _swig_property(_nvmectl.NVMeAlgoCounters_READ_DISTURB6_get, _nvmectl.NVMeAlgoCounters_READ_DISTURB6_set)
    __swig_setmethods__["READ_DISTURB7"] = _nvmectl.NVMeAlgoCounters_READ_DISTURB7_set
    __swig_getmethods__["READ_DISTURB7"] = _nvmectl.NVMeAlgoCounters_READ_DISTURB7_get
    if _newclass:READ_DISTURB7 = _swig_property(_nvmectl.NVMeAlgoCounters_READ_DISTURB7_get, _nvmectl.NVMeAlgoCounters_READ_DISTURB7_set)
    __swig_setmethods__["AVG_ENDURANCE"] = _nvmectl.NVMeAlgoCounters_AVG_ENDURANCE_set
    __swig_getmethods__["AVG_ENDURANCE"] = _nvmectl.NVMeAlgoCounters_AVG_ENDURANCE_get
    if _newclass:AVG_ENDURANCE = _swig_property(_nvmectl.NVMeAlgoCounters_AVG_ENDURANCE_get, _nvmectl.NVMeAlgoCounters_AVG_ENDURANCE_set)
    __swig_setmethods__["PRODUCTION_TIME"] = _nvmectl.NVMeAlgoCounters_PRODUCTION_TIME_set
    __swig_getmethods__["PRODUCTION_TIME"] = _nvmectl.NVMeAlgoCounters_PRODUCTION_TIME_get
    if _newclass:PRODUCTION_TIME = _swig_property(_nvmectl.NVMeAlgoCounters_PRODUCTION_TIME_get, _nvmectl.NVMeAlgoCounters_PRODUCTION_TIME_set)
    __swig_setmethods__["BAND_TYPE"] = _nvmectl.NVMeAlgoCounters_BAND_TYPE_set
    __swig_getmethods__["BAND_TYPE"] = _nvmectl.NVMeAlgoCounters_BAND_TYPE_get
    if _newclass:BAND_TYPE = _swig_property(_nvmectl.NVMeAlgoCounters_BAND_TYPE_get, _nvmectl.NVMeAlgoCounters_BAND_TYPE_set)
    __swig_setmethods__["TOTAL_NUM_OF_READ_PAGES"] = _nvmectl.NVMeAlgoCounters_TOTAL_NUM_OF_READ_PAGES_set
    __swig_getmethods__["TOTAL_NUM_OF_READ_PAGES"] = _nvmectl.NVMeAlgoCounters_TOTAL_NUM_OF_READ_PAGES_get
    if _newclass:TOTAL_NUM_OF_READ_PAGES = _swig_property(_nvmectl.NVMeAlgoCounters_TOTAL_NUM_OF_READ_PAGES_get, _nvmectl.NVMeAlgoCounters_TOTAL_NUM_OF_READ_PAGES_set)
    __swig_setmethods__["SKIPPED_PAGES"] = _nvmectl.NVMeAlgoCounters_SKIPPED_PAGES_set
    __swig_getmethods__["SKIPPED_PAGES"] = _nvmectl.NVMeAlgoCounters_SKIPPED_PAGES_get
    if _newclass:SKIPPED_PAGES = _swig_property(_nvmectl.NVMeAlgoCounters_SKIPPED_PAGES_get, _nvmectl.NVMeAlgoCounters_SKIPPED_PAGES_set)
    __swig_setmethods__["READ_ALGO_PASS_WITH_SET0"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET0_set
    __swig_getmethods__["READ_ALGO_PASS_WITH_SET0"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET0_get
    if _newclass:READ_ALGO_PASS_WITH_SET0 = _swig_property(_nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET0_get, _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET0_set)
    __swig_setmethods__["READ_ALGO_PASS_WITH_SET1"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET1_set
    __swig_getmethods__["READ_ALGO_PASS_WITH_SET1"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET1_get
    if _newclass:READ_ALGO_PASS_WITH_SET1 = _swig_property(_nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET1_get, _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET1_set)
    __swig_setmethods__["READ_ALGO_PASS_WITH_SET2"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET2_set
    __swig_getmethods__["READ_ALGO_PASS_WITH_SET2"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET2_get
    if _newclass:READ_ALGO_PASS_WITH_SET2 = _swig_property(_nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET2_get, _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET2_set)
    __swig_setmethods__["READ_ALGO_PASS_WITH_SET3"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET3_set
    __swig_getmethods__["READ_ALGO_PASS_WITH_SET3"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET3_get
    if _newclass:READ_ALGO_PASS_WITH_SET3 = _swig_property(_nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET3_get, _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET3_set)
    __swig_setmethods__["READ_ALGO_PASS_WITH_SET4"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET4_set
    __swig_getmethods__["READ_ALGO_PASS_WITH_SET4"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET4_get
    if _newclass:READ_ALGO_PASS_WITH_SET4 = _swig_property(_nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET4_get, _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET4_set)
    __swig_setmethods__["READ_ALGO_PASS_WITH_SET5"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET5_set
    __swig_getmethods__["READ_ALGO_PASS_WITH_SET5"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET5_get
    if _newclass:READ_ALGO_PASS_WITH_SET5 = _swig_property(_nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET5_get, _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET5_set)
    __swig_setmethods__["READ_ALGO_PASS_WITH_SET6"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET6_set
    __swig_getmethods__["READ_ALGO_PASS_WITH_SET6"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET6_get
    if _newclass:READ_ALGO_PASS_WITH_SET6 = _swig_property(_nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET6_get, _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET6_set)
    __swig_setmethods__["READ_ALGO_PASS_WITH_SET7"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET7_set
    __swig_getmethods__["READ_ALGO_PASS_WITH_SET7"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET7_get
    if _newclass:READ_ALGO_PASS_WITH_SET7 = _swig_property(_nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET7_get, _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_SET7_set)
    __swig_setmethods__["READ_ALGO_PASS_WITH_OPT_READ"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_OPT_READ_set
    __swig_getmethods__["READ_ALGO_PASS_WITH_OPT_READ"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_OPT_READ_get
    if _newclass:READ_ALGO_PASS_WITH_OPT_READ = _swig_property(_nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_OPT_READ_get, _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_OPT_READ_set)
    __swig_setmethods__["READ_ALGO_PASS_WITH_DEEP_SOFT_NO_XT"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_NO_XT_set
    __swig_getmethods__["READ_ALGO_PASS_WITH_DEEP_SOFT_NO_XT"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_NO_XT_get
    if _newclass:READ_ALGO_PASS_WITH_DEEP_SOFT_NO_XT = _swig_property(_nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_NO_XT_get, _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_NO_XT_set)
    __swig_setmethods__["READ_ALGO_PASS_WITH_DEEP_SOFT_NO_DSP0"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_NO_DSP0_set
    __swig_getmethods__["READ_ALGO_PASS_WITH_DEEP_SOFT_NO_DSP0"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_NO_DSP0_get
    if _newclass:READ_ALGO_PASS_WITH_DEEP_SOFT_NO_DSP0 = _swig_property(_nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_NO_DSP0_get, _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_NO_DSP0_set)
    __swig_setmethods__["READ_ALGO_PASS_WITH_DEEP_SOFT_NO_DSP1"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_NO_DSP1_set
    __swig_getmethods__["READ_ALGO_PASS_WITH_DEEP_SOFT_NO_DSP1"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_NO_DSP1_get
    if _newclass:READ_ALGO_PASS_WITH_DEEP_SOFT_NO_DSP1 = _swig_property(_nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_NO_DSP1_get, _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_NO_DSP1_set)
    __swig_setmethods__["READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE0"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE0_set
    __swig_getmethods__["READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE0"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE0_get
    if _newclass:READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE0 = _swig_property(_nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE0_get, _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE0_set)
    __swig_setmethods__["READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE1"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE1_set
    __swig_getmethods__["READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE1"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE1_get
    if _newclass:READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE1 = _swig_property(_nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE1_get, _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE1_set)
    __swig_setmethods__["READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE2"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE2_set
    __swig_getmethods__["READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE2"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE2_get
    if _newclass:READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE2 = _swig_property(_nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE2_get, _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE2_set)
    __swig_setmethods__["READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE3"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE3_set
    __swig_getmethods__["READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE3"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE3_get
    if _newclass:READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE3 = _swig_property(_nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE3_get, _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE3_set)
    __swig_setmethods__["READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE4"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE4_set
    __swig_getmethods__["READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE4"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE4_get
    if _newclass:READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE4 = _swig_property(_nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE4_get, _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE4_set)
    __swig_setmethods__["READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE5"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE5_set
    __swig_getmethods__["READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE5"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE5_get
    if _newclass:READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE5 = _swig_property(_nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE5_get, _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE5_set)
    __swig_setmethods__["READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE6"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE6_set
    __swig_getmethods__["READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE6"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE6_get
    if _newclass:READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE6 = _swig_property(_nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE6_get, _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_DEEP_SOFT_STAGE6_set)
    __swig_setmethods__["READ_ALGO_PASS_WITH_ERROR_FLOOR_DS2"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_ERROR_FLOOR_DS2_set
    __swig_getmethods__["READ_ALGO_PASS_WITH_ERROR_FLOOR_DS2"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_ERROR_FLOOR_DS2_get
    if _newclass:READ_ALGO_PASS_WITH_ERROR_FLOOR_DS2 = _swig_property(_nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_ERROR_FLOOR_DS2_get, _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_ERROR_FLOOR_DS2_set)
    __swig_setmethods__["READ_ALGO_PASS_WITH_ERROR_FLOOR_BCH"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_ERROR_FLOOR_BCH_set
    __swig_getmethods__["READ_ALGO_PASS_WITH_ERROR_FLOOR_BCH"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_ERROR_FLOOR_BCH_get
    if _newclass:READ_ALGO_PASS_WITH_ERROR_FLOOR_BCH = _swig_property(_nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_ERROR_FLOOR_BCH_get, _nvmectl.NVMeAlgoCounters_READ_ALGO_PASS_WITH_ERROR_FLOOR_BCH_set)
    __swig_setmethods__["FIRST_READ_WAS_HARD_WITH_ACQ"] = _nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_ACQ_set
    __swig_getmethods__["FIRST_READ_WAS_HARD_WITH_ACQ"] = _nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_ACQ_get
    if _newclass:FIRST_READ_WAS_HARD_WITH_ACQ = _swig_property(_nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_ACQ_get, _nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_ACQ_set)
    __swig_setmethods__["FIRST_READ_WAS_HARD_WITH_SET0"] = _nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET0_set
    __swig_getmethods__["FIRST_READ_WAS_HARD_WITH_SET0"] = _nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET0_get
    if _newclass:FIRST_READ_WAS_HARD_WITH_SET0 = _swig_property(_nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET0_get, _nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET0_set)
    __swig_setmethods__["FIRST_READ_WAS_HARD_WITH_SET1"] = _nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET1_set
    __swig_getmethods__["FIRST_READ_WAS_HARD_WITH_SET1"] = _nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET1_get
    if _newclass:FIRST_READ_WAS_HARD_WITH_SET1 = _swig_property(_nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET1_get, _nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET1_set)
    __swig_setmethods__["FIRST_READ_WAS_HARD_WITH_SET2"] = _nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET2_set
    __swig_getmethods__["FIRST_READ_WAS_HARD_WITH_SET2"] = _nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET2_get
    if _newclass:FIRST_READ_WAS_HARD_WITH_SET2 = _swig_property(_nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET2_get, _nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET2_set)
    __swig_setmethods__["FIRST_READ_WAS_HARD_WITH_SET3"] = _nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET3_set
    __swig_getmethods__["FIRST_READ_WAS_HARD_WITH_SET3"] = _nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET3_get
    if _newclass:FIRST_READ_WAS_HARD_WITH_SET3 = _swig_property(_nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET3_get, _nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET3_set)
    __swig_setmethods__["FIRST_READ_WAS_HARD_WITH_SET4"] = _nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET4_set
    __swig_getmethods__["FIRST_READ_WAS_HARD_WITH_SET4"] = _nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET4_get
    if _newclass:FIRST_READ_WAS_HARD_WITH_SET4 = _swig_property(_nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET4_get, _nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET4_set)
    __swig_setmethods__["FIRST_READ_WAS_HARD_WITH_SET5"] = _nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET5_set
    __swig_getmethods__["FIRST_READ_WAS_HARD_WITH_SET5"] = _nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET5_get
    if _newclass:FIRST_READ_WAS_HARD_WITH_SET5 = _swig_property(_nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET5_get, _nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET5_set)
    __swig_setmethods__["FIRST_READ_WAS_HARD_WITH_SET6"] = _nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET6_set
    __swig_getmethods__["FIRST_READ_WAS_HARD_WITH_SET6"] = _nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET6_get
    if _newclass:FIRST_READ_WAS_HARD_WITH_SET6 = _swig_property(_nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET6_get, _nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET6_set)
    __swig_setmethods__["FIRST_READ_WAS_HARD_WITH_SET7"] = _nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET7_set
    __swig_getmethods__["FIRST_READ_WAS_HARD_WITH_SET7"] = _nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET7_get
    if _newclass:FIRST_READ_WAS_HARD_WITH_SET7 = _swig_property(_nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET7_get, _nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_HARD_WITH_SET7_set)
    __swig_setmethods__["FIRST_READ_WAS_FS2"] = _nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_FS2_set
    __swig_getmethods__["FIRST_READ_WAS_FS2"] = _nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_FS2_get
    if _newclass:FIRST_READ_WAS_FS2 = _swig_property(_nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_FS2_get, _nvmectl.NVMeAlgoCounters_FIRST_READ_WAS_FS2_set)
    __swig_setmethods__["FS2_WITH_DS_PCOUNTER"] = _nvmectl.NVMeAlgoCounters_FS2_WITH_DS_PCOUNTER_set
    __swig_getmethods__["FS2_WITH_DS_PCOUNTER"] = _nvmectl.NVMeAlgoCounters_FS2_WITH_DS_PCOUNTER_get
    if _newclass:FS2_WITH_DS_PCOUNTER = _swig_property(_nvmectl.NVMeAlgoCounters_FS2_WITH_DS_PCOUNTER_get, _nvmectl.NVMeAlgoCounters_FS2_WITH_DS_PCOUNTER_set)
    __swig_setmethods__["FS2_WITHOUT_D_S_PCOUNTER"] = _nvmectl.NVMeAlgoCounters_FS2_WITHOUT_D_S_PCOUNTER_set
    __swig_getmethods__["FS2_WITHOUT_D_S_PCOUNTER"] = _nvmectl.NVMeAlgoCounters_FS2_WITHOUT_D_S_PCOUNTER_get
    if _newclass:FS2_WITHOUT_D_S_PCOUNTER = _swig_property(_nvmectl.NVMeAlgoCounters_FS2_WITHOUT_D_S_PCOUNTER_get, _nvmectl.NVMeAlgoCounters_FS2_WITHOUT_D_S_PCOUNTER_set)
    __swig_setmethods__["BDB_DYNAMIC_MOVED_TO_EOL_EVEN_LSB"] = _nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_EOL_EVEN_LSB_set
    __swig_getmethods__["BDB_DYNAMIC_MOVED_TO_EOL_EVEN_LSB"] = _nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_EOL_EVEN_LSB_get
    if _newclass:BDB_DYNAMIC_MOVED_TO_EOL_EVEN_LSB = _swig_property(_nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_EOL_EVEN_LSB_get, _nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_EOL_EVEN_LSB_set)
    __swig_setmethods__["BDB_DYNAMIC_MOVED_TO_EOL_EVEN_MSB"] = _nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_EOL_EVEN_MSB_set
    __swig_getmethods__["BDB_DYNAMIC_MOVED_TO_EOL_EVEN_MSB"] = _nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_EOL_EVEN_MSB_get
    if _newclass:BDB_DYNAMIC_MOVED_TO_EOL_EVEN_MSB = _swig_property(_nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_EOL_EVEN_MSB_get, _nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_EOL_EVEN_MSB_set)
    __swig_setmethods__["BDB_DYNAMIC_MOVED_TO_EOL_ODD_LSB"] = _nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_EOL_ODD_LSB_set
    __swig_getmethods__["BDB_DYNAMIC_MOVED_TO_EOL_ODD_LSB"] = _nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_EOL_ODD_LSB_get
    if _newclass:BDB_DYNAMIC_MOVED_TO_EOL_ODD_LSB = _swig_property(_nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_EOL_ODD_LSB_get, _nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_EOL_ODD_LSB_set)
    __swig_setmethods__["BDB_DYNAMIC_MOVED_TO_EOL_ODD_MSB"] = _nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_EOL_ODD_MSB_set
    __swig_getmethods__["BDB_DYNAMIC_MOVED_TO_EOL_ODD_MSB"] = _nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_EOL_ODD_MSB_get
    if _newclass:BDB_DYNAMIC_MOVED_TO_EOL_ODD_MSB = _swig_property(_nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_EOL_ODD_MSB_get, _nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_EOL_ODD_MSB_set)
    __swig_setmethods__["BDB_DYNAMIC_MOVED_TO_SOL_EVEN_LSB"] = _nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_SOL_EVEN_LSB_set
    __swig_getmethods__["BDB_DYNAMIC_MOVED_TO_SOL_EVEN_LSB"] = _nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_SOL_EVEN_LSB_get
    if _newclass:BDB_DYNAMIC_MOVED_TO_SOL_EVEN_LSB = _swig_property(_nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_SOL_EVEN_LSB_get, _nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_SOL_EVEN_LSB_set)
    __swig_setmethods__["BDB_DYNAMIC_MOVED_TO_SOL_EVEN_MSB"] = _nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_SOL_EVEN_MSB_set
    __swig_getmethods__["BDB_DYNAMIC_MOVED_TO_SOL_EVEN_MSB"] = _nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_SOL_EVEN_MSB_get
    if _newclass:BDB_DYNAMIC_MOVED_TO_SOL_EVEN_MSB = _swig_property(_nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_SOL_EVEN_MSB_get, _nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_SOL_EVEN_MSB_set)
    __swig_setmethods__["BDB_DYNAMIC_MOVED_TO_SOL_ODD_LSB"] = _nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_SOL_ODD_LSB_set
    __swig_getmethods__["BDB_DYNAMIC_MOVED_TO_SOL_ODD_LSB"] = _nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_SOL_ODD_LSB_get
    if _newclass:BDB_DYNAMIC_MOVED_TO_SOL_ODD_LSB = _swig_property(_nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_SOL_ODD_LSB_get, _nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_SOL_ODD_LSB_set)
    __swig_setmethods__["BDB_DYNAMIC_MOVED_TO_SOL_ODD_MSB"] = _nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_SOL_ODD_MSB_set
    __swig_getmethods__["BDB_DYNAMIC_MOVED_TO_SOL_ODD_MSB"] = _nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_SOL_ODD_MSB_get
    if _newclass:BDB_DYNAMIC_MOVED_TO_SOL_ODD_MSB = _swig_property(_nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_SOL_ODD_MSB_get, _nvmectl.NVMeAlgoCounters_BDB_DYNAMIC_MOVED_TO_SOL_ODD_MSB_set)
    __swig_setmethods__["NUM_OF_CW_PASSED_IN_TMODE_F_S2"] = _nvmectl.NVMeAlgoCounters_NUM_OF_CW_PASSED_IN_TMODE_F_S2_set
    __swig_getmethods__["NUM_OF_CW_PASSED_IN_TMODE_F_S2"] = _nvmectl.NVMeAlgoCounters_NUM_OF_CW_PASSED_IN_TMODE_F_S2_get
    if _newclass:NUM_OF_CW_PASSED_IN_TMODE_F_S2 = _swig_property(_nvmectl.NVMeAlgoCounters_NUM_OF_CW_PASSED_IN_TMODE_F_S2_get, _nvmectl.NVMeAlgoCounters_NUM_OF_CW_PASSED_IN_TMODE_F_S2_set)
    __swig_setmethods__["READ_ALGO_PASSED_THROUGH_MSB_AQC"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASSED_THROUGH_MSB_AQC_set
    __swig_getmethods__["READ_ALGO_PASSED_THROUGH_MSB_AQC"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASSED_THROUGH_MSB_AQC_get
    if _newclass:READ_ALGO_PASSED_THROUGH_MSB_AQC = _swig_property(_nvmectl.NVMeAlgoCounters_READ_ALGO_PASSED_THROUGH_MSB_AQC_get, _nvmectl.NVMeAlgoCounters_READ_ALGO_PASSED_THROUGH_MSB_AQC_set)
    __swig_setmethods__["READ_ALGO_PASSED_THROUGH_LSB_AQC"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASSED_THROUGH_LSB_AQC_set
    __swig_getmethods__["READ_ALGO_PASSED_THROUGH_LSB_AQC"] = _nvmectl.NVMeAlgoCounters_READ_ALGO_PASSED_THROUGH_LSB_AQC_get
    if _newclass:READ_ALGO_PASSED_THROUGH_LSB_AQC = _swig_property(_nvmectl.NVMeAlgoCounters_READ_ALGO_PASSED_THROUGH_LSB_AQC_get, _nvmectl.NVMeAlgoCounters_READ_ALGO_PASSED_THROUGH_LSB_AQC_set)
    __swig_setmethods__["C1_EQUALIZATION_NOT_VALID_SAMPLES"] = _nvmectl.NVMeAlgoCounters_C1_EQUALIZATION_NOT_VALID_SAMPLES_set
    __swig_getmethods__["C1_EQUALIZATION_NOT_VALID_SAMPLES"] = _nvmectl.NVMeAlgoCounters_C1_EQUALIZATION_NOT_VALID_SAMPLES_get
    if _newclass:C1_EQUALIZATION_NOT_VALID_SAMPLES = _swig_property(_nvmectl.NVMeAlgoCounters_C1_EQUALIZATION_NOT_VALID_SAMPLES_get, _nvmectl.NVMeAlgoCounters_C1_EQUALIZATION_NOT_VALID_SAMPLES_set)
    __swig_setmethods__["ERASED_SAMPLES_IN_MSB_AQC"] = _nvmectl.NVMeAlgoCounters_ERASED_SAMPLES_IN_MSB_AQC_set
    __swig_getmethods__["ERASED_SAMPLES_IN_MSB_AQC"] = _nvmectl.NVMeAlgoCounters_ERASED_SAMPLES_IN_MSB_AQC_get
    if _newclass:ERASED_SAMPLES_IN_MSB_AQC = _swig_property(_nvmectl.NVMeAlgoCounters_ERASED_SAMPLES_IN_MSB_AQC_get, _nvmectl.NVMeAlgoCounters_ERASED_SAMPLES_IN_MSB_AQC_set)
    __swig_setmethods__["SYND_SUM_RANGE_MOVED_ON_R_V21"] = _nvmectl.NVMeAlgoCounters_SYND_SUM_RANGE_MOVED_ON_R_V21_set
    __swig_getmethods__["SYND_SUM_RANGE_MOVED_ON_R_V21"] = _nvmectl.NVMeAlgoCounters_SYND_SUM_RANGE_MOVED_ON_R_V21_get
    if _newclass:SYND_SUM_RANGE_MOVED_ON_R_V21 = _swig_property(_nvmectl.NVMeAlgoCounters_SYND_SUM_RANGE_MOVED_ON_R_V21_get, _nvmectl.NVMeAlgoCounters_SYND_SUM_RANGE_MOVED_ON_R_V21_set)
    __swig_setmethods__["SYND_SUM_RANGE_MOVED_ON_R_V23"] = _nvmectl.NVMeAlgoCounters_SYND_SUM_RANGE_MOVED_ON_R_V23_set
    __swig_getmethods__["SYND_SUM_RANGE_MOVED_ON_R_V23"] = _nvmectl.NVMeAlgoCounters_SYND_SUM_RANGE_MOVED_ON_R_V23_get
    if _newclass:SYND_SUM_RANGE_MOVED_ON_R_V23 = _swig_property(_nvmectl.NVMeAlgoCounters_SYND_SUM_RANGE_MOVED_ON_R_V23_get, _nvmectl.NVMeAlgoCounters_SYND_SUM_RANGE_MOVED_ON_R_V23_set)
    __swig_setmethods__["SYND_SUM_RANGE_MOVED_ON_BOTH_R_V21AND_R_V23"] = _nvmectl.NVMeAlgoCounters_SYND_SUM_RANGE_MOVED_ON_BOTH_R_V21AND_R_V23_set
    __swig_getmethods__["SYND_SUM_RANGE_MOVED_ON_BOTH_R_V21AND_R_V23"] = _nvmectl.NVMeAlgoCounters_SYND_SUM_RANGE_MOVED_ON_BOTH_R_V21AND_R_V23_get
    if _newclass:SYND_SUM_RANGE_MOVED_ON_BOTH_R_V21AND_R_V23 = _swig_property(_nvmectl.NVMeAlgoCounters_SYND_SUM_RANGE_MOVED_ON_BOTH_R_V21AND_R_V23_get, _nvmectl.NVMeAlgoCounters_SYND_SUM_RANGE_MOVED_ON_BOTH_R_V21AND_R_V23_set)
    __swig_setmethods__["FS2_DECODED_0_19_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS2_DECODED_0_19_BITFLIPS_set
    __swig_getmethods__["FS2_DECODED_0_19_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS2_DECODED_0_19_BITFLIPS_get
    if _newclass:FS2_DECODED_0_19_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_FS2_DECODED_0_19_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_FS2_DECODED_0_19_BITFLIPS_set)
    __swig_setmethods__["FS2_DECODED_20_39_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS2_DECODED_20_39_BITFLIPS_set
    __swig_getmethods__["FS2_DECODED_20_39_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS2_DECODED_20_39_BITFLIPS_get
    if _newclass:FS2_DECODED_20_39_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_FS2_DECODED_20_39_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_FS2_DECODED_20_39_BITFLIPS_set)
    __swig_setmethods__["FS2_DECODED_200_219_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS2_DECODED_200_219_BITFLIPS_set
    __swig_getmethods__["FS2_DECODED_200_219_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS2_DECODED_200_219_BITFLIPS_get
    if _newclass:FS2_DECODED_200_219_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_FS2_DECODED_200_219_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_FS2_DECODED_200_219_BITFLIPS_set)
    __swig_setmethods__["FS2_DECODED_220_239_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS2_DECODED_220_239_BITFLIPS_set
    __swig_getmethods__["FS2_DECODED_220_239_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS2_DECODED_220_239_BITFLIPS_get
    if _newclass:FS2_DECODED_220_239_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_FS2_DECODED_220_239_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_FS2_DECODED_220_239_BITFLIPS_set)
    __swig_setmethods__["FS2_DECODED_40_59_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS2_DECODED_40_59_BITFLIPS_set
    __swig_getmethods__["FS2_DECODED_40_59_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS2_DECODED_40_59_BITFLIPS_get
    if _newclass:FS2_DECODED_40_59_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_FS2_DECODED_40_59_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_FS2_DECODED_40_59_BITFLIPS_set)
    __swig_setmethods__["FS2_DECODED_60_79_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS2_DECODED_60_79_BITFLIPS_set
    __swig_getmethods__["FS2_DECODED_60_79_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS2_DECODED_60_79_BITFLIPS_get
    if _newclass:FS2_DECODED_60_79_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_FS2_DECODED_60_79_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_FS2_DECODED_60_79_BITFLIPS_set)
    __swig_setmethods__["FS2_DECODED_80_99_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS2_DECODED_80_99_BITFLIPS_set
    __swig_getmethods__["FS2_DECODED_80_99_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS2_DECODED_80_99_BITFLIPS_get
    if _newclass:FS2_DECODED_80_99_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_FS2_DECODED_80_99_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_FS2_DECODED_80_99_BITFLIPS_set)
    __swig_setmethods__["FS2_DECODED_100_119_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS2_DECODED_100_119_BITFLIPS_set
    __swig_getmethods__["FS2_DECODED_100_119_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS2_DECODED_100_119_BITFLIPS_get
    if _newclass:FS2_DECODED_100_119_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_FS2_DECODED_100_119_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_FS2_DECODED_100_119_BITFLIPS_set)
    __swig_setmethods__["FS2_DECODED_120_139_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS2_DECODED_120_139_BITFLIPS_set
    __swig_getmethods__["FS2_DECODED_120_139_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS2_DECODED_120_139_BITFLIPS_get
    if _newclass:FS2_DECODED_120_139_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_FS2_DECODED_120_139_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_FS2_DECODED_120_139_BITFLIPS_set)
    __swig_setmethods__["FS2_DECODED_140_159_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS2_DECODED_140_159_BITFLIPS_set
    __swig_getmethods__["FS2_DECODED_140_159_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS2_DECODED_140_159_BITFLIPS_get
    if _newclass:FS2_DECODED_140_159_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_FS2_DECODED_140_159_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_FS2_DECODED_140_159_BITFLIPS_set)
    __swig_setmethods__["FS2_DECODED_160_179_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS2_DECODED_160_179_BITFLIPS_set
    __swig_getmethods__["FS2_DECODED_160_179_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS2_DECODED_160_179_BITFLIPS_get
    if _newclass:FS2_DECODED_160_179_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_FS2_DECODED_160_179_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_FS2_DECODED_160_179_BITFLIPS_set)
    __swig_setmethods__["FS2_DECODED_180_199_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS2_DECODED_180_199_BITFLIPS_set
    __swig_getmethods__["FS2_DECODED_180_199_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS2_DECODED_180_199_BITFLIPS_get
    if _newclass:FS2_DECODED_180_199_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_FS2_DECODED_180_199_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_FS2_DECODED_180_199_BITFLIPS_set)
    __swig_setmethods__["DEEP_SOFT_NO_X_TDECODED_0_49_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_0_49_BITFLIPS_set
    __swig_getmethods__["DEEP_SOFT_NO_X_TDECODED_0_49_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_0_49_BITFLIPS_get
    if _newclass:DEEP_SOFT_NO_X_TDECODED_0_49_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_0_49_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_0_49_BITFLIPS_set)
    __swig_setmethods__["DEEP_SOFT_NO_X_TDECODED_50_99_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_50_99_BITFLIPS_set
    __swig_getmethods__["DEEP_SOFT_NO_X_TDECODED_50_99_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_50_99_BITFLIPS_get
    if _newclass:DEEP_SOFT_NO_X_TDECODED_50_99_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_50_99_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_50_99_BITFLIPS_set)
    __swig_setmethods__["DEEP_SOFT_NO_X_TDECODED_100_149_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_100_149_BITFLIPS_set
    __swig_getmethods__["DEEP_SOFT_NO_X_TDECODED_100_149_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_100_149_BITFLIPS_get
    if _newclass:DEEP_SOFT_NO_X_TDECODED_100_149_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_100_149_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_100_149_BITFLIPS_set)
    __swig_setmethods__["DEEP_SOFT_NO_X_TDECODED_150_199_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_150_199_BITFLIPS_set
    __swig_getmethods__["DEEP_SOFT_NO_X_TDECODED_150_199_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_150_199_BITFLIPS_get
    if _newclass:DEEP_SOFT_NO_X_TDECODED_150_199_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_150_199_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_150_199_BITFLIPS_set)
    __swig_setmethods__["DEEP_SOFT_NO_X_TDECODED_200_249_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_200_249_BITFLIPS_set
    __swig_getmethods__["DEEP_SOFT_NO_X_TDECODED_200_249_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_200_249_BITFLIPS_get
    if _newclass:DEEP_SOFT_NO_X_TDECODED_200_249_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_200_249_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_200_249_BITFLIPS_set)
    __swig_setmethods__["DEEP_SOFT_NO_X_TDECODED_250_299_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_250_299_BITFLIPS_set
    __swig_getmethods__["DEEP_SOFT_NO_X_TDECODED_250_299_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_250_299_BITFLIPS_get
    if _newclass:DEEP_SOFT_NO_X_TDECODED_250_299_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_250_299_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_250_299_BITFLIPS_set)
    __swig_setmethods__["DEEP_SOFT_NO_X_TDECODED_300_349_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_300_349_BITFLIPS_set
    __swig_getmethods__["DEEP_SOFT_NO_X_TDECODED_300_349_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_300_349_BITFLIPS_get
    if _newclass:DEEP_SOFT_NO_X_TDECODED_300_349_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_300_349_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_300_349_BITFLIPS_set)
    __swig_setmethods__["DEEP_SOFT_NO_X_TDECODED_350_399_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_350_399_BITFLIPS_set
    __swig_getmethods__["DEEP_SOFT_NO_X_TDECODED_350_399_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_350_399_BITFLIPS_get
    if _newclass:DEEP_SOFT_NO_X_TDECODED_350_399_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_350_399_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_350_399_BITFLIPS_set)
    __swig_setmethods__["DEEP_SOFT_NO_X_TDECODED_400_449_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_400_449_BITFLIPS_set
    __swig_getmethods__["DEEP_SOFT_NO_X_TDECODED_400_449_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_400_449_BITFLIPS_get
    if _newclass:DEEP_SOFT_NO_X_TDECODED_400_449_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_400_449_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_400_449_BITFLIPS_set)
    __swig_setmethods__["DEEP_SOFT_NO_X_TDECODED_450_499_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_450_499_BITFLIPS_set
    __swig_getmethods__["DEEP_SOFT_NO_X_TDECODED_450_499_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_450_499_BITFLIPS_get
    if _newclass:DEEP_SOFT_NO_X_TDECODED_450_499_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_450_499_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_DEEP_SOFT_NO_X_TDECODED_450_499_BITFLIPS_set)
    __swig_setmethods__["DEEP_SOFT1_DECODED_0_49_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_0_49_BITFLIPS_set
    __swig_getmethods__["DEEP_SOFT1_DECODED_0_49_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_0_49_BITFLIPS_get
    if _newclass:DEEP_SOFT1_DECODED_0_49_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_0_49_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_0_49_BITFLIPS_set)
    __swig_setmethods__["DEEP_SOFT1_DECODED_50_99_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_50_99_BITFLIPS_set
    __swig_getmethods__["DEEP_SOFT1_DECODED_50_99_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_50_99_BITFLIPS_get
    if _newclass:DEEP_SOFT1_DECODED_50_99_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_50_99_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_50_99_BITFLIPS_set)
    __swig_setmethods__["DEEP_SOFT1_DECODED_100_149_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_100_149_BITFLIPS_set
    __swig_getmethods__["DEEP_SOFT1_DECODED_100_149_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_100_149_BITFLIPS_get
    if _newclass:DEEP_SOFT1_DECODED_100_149_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_100_149_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_100_149_BITFLIPS_set)
    __swig_setmethods__["DEEP_SOFT1_DECODED_150_199_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_150_199_BITFLIPS_set
    __swig_getmethods__["DEEP_SOFT1_DECODED_150_199_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_150_199_BITFLIPS_get
    if _newclass:DEEP_SOFT1_DECODED_150_199_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_150_199_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_150_199_BITFLIPS_set)
    __swig_setmethods__["DEEP_SOFT1_DECODED_200_249_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_200_249_BITFLIPS_set
    __swig_getmethods__["DEEP_SOFT1_DECODED_200_249_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_200_249_BITFLIPS_get
    if _newclass:DEEP_SOFT1_DECODED_200_249_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_200_249_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_200_249_BITFLIPS_set)
    __swig_setmethods__["DEEP_SOFT1_DECODED_250_299_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_250_299_BITFLIPS_set
    __swig_getmethods__["DEEP_SOFT1_DECODED_250_299_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_250_299_BITFLIPS_get
    if _newclass:DEEP_SOFT1_DECODED_250_299_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_250_299_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_250_299_BITFLIPS_set)
    __swig_setmethods__["DEEP_SOFT1_DECODED_300_349_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_300_349_BITFLIPS_set
    __swig_getmethods__["DEEP_SOFT1_DECODED_300_349_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_300_349_BITFLIPS_get
    if _newclass:DEEP_SOFT1_DECODED_300_349_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_300_349_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_300_349_BITFLIPS_set)
    __swig_setmethods__["DEEP_SOFT1_DECODED_350_399_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_350_399_BITFLIPS_set
    __swig_getmethods__["DEEP_SOFT1_DECODED_350_399_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_350_399_BITFLIPS_get
    if _newclass:DEEP_SOFT1_DECODED_350_399_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_350_399_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_350_399_BITFLIPS_set)
    __swig_setmethods__["DEEP_SOFT1_DECODED_400_449_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_400_449_BITFLIPS_set
    __swig_getmethods__["DEEP_SOFT1_DECODED_400_449_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_400_449_BITFLIPS_get
    if _newclass:DEEP_SOFT1_DECODED_400_449_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_400_449_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_400_449_BITFLIPS_set)
    __swig_setmethods__["DEEP_SOFT1_DECODED_450_499_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_450_499_BITFLIPS_set
    __swig_getmethods__["DEEP_SOFT1_DECODED_450_499_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_450_499_BITFLIPS_get
    if _newclass:DEEP_SOFT1_DECODED_450_499_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_450_499_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_DEEP_SOFT1_DECODED_450_499_BITFLIPS_set)
    __swig_setmethods__["DEEP_SOFT2_DECODED_0_49_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_0_49_BITFLIPS_set
    __swig_getmethods__["DEEP_SOFT2_DECODED_0_49_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_0_49_BITFLIPS_get
    if _newclass:DEEP_SOFT2_DECODED_0_49_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_0_49_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_0_49_BITFLIPS_set)
    __swig_setmethods__["DEEP_SOFT2_DECODED_50_99_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_50_99_BITFLIPS_set
    __swig_getmethods__["DEEP_SOFT2_DECODED_50_99_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_50_99_BITFLIPS_get
    if _newclass:DEEP_SOFT2_DECODED_50_99_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_50_99_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_50_99_BITFLIPS_set)
    __swig_setmethods__["DEEP_SOFT2_DECODED_100_149_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_100_149_BITFLIPS_set
    __swig_getmethods__["DEEP_SOFT2_DECODED_100_149_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_100_149_BITFLIPS_get
    if _newclass:DEEP_SOFT2_DECODED_100_149_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_100_149_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_100_149_BITFLIPS_set)
    __swig_setmethods__["DEEP_SOFT2_DECODED_150_199_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_150_199_BITFLIPS_set
    __swig_getmethods__["DEEP_SOFT2_DECODED_150_199_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_150_199_BITFLIPS_get
    if _newclass:DEEP_SOFT2_DECODED_150_199_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_150_199_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_150_199_BITFLIPS_set)
    __swig_setmethods__["DEEP_SOFT2_DECODED_200_249_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_200_249_BITFLIPS_set
    __swig_getmethods__["DEEP_SOFT2_DECODED_200_249_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_200_249_BITFLIPS_get
    if _newclass:DEEP_SOFT2_DECODED_200_249_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_200_249_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_200_249_BITFLIPS_set)
    __swig_setmethods__["DEEP_SOFT2_DECODED_250_299_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_250_299_BITFLIPS_set
    __swig_getmethods__["DEEP_SOFT2_DECODED_250_299_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_250_299_BITFLIPS_get
    if _newclass:DEEP_SOFT2_DECODED_250_299_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_250_299_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_250_299_BITFLIPS_set)
    __swig_setmethods__["DEEP_SOFT2_DECODED_300_349_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_300_349_BITFLIPS_set
    __swig_getmethods__["DEEP_SOFT2_DECODED_300_349_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_300_349_BITFLIPS_get
    if _newclass:DEEP_SOFT2_DECODED_300_349_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_300_349_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_300_349_BITFLIPS_set)
    __swig_setmethods__["DEEP_SOFT2_DECODED_350_399_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_350_399_BITFLIPS_set
    __swig_getmethods__["DEEP_SOFT2_DECODED_350_399_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_350_399_BITFLIPS_get
    if _newclass:DEEP_SOFT2_DECODED_350_399_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_350_399_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_350_399_BITFLIPS_set)
    __swig_setmethods__["DEEP_SOFT2_DECODED_400_449_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_400_449_BITFLIPS_set
    __swig_getmethods__["DEEP_SOFT2_DECODED_400_449_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_400_449_BITFLIPS_get
    if _newclass:DEEP_SOFT2_DECODED_400_449_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_400_449_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_400_449_BITFLIPS_set)
    __swig_setmethods__["DEEP_SOFT2_DECODED_450_499_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_450_499_BITFLIPS_set
    __swig_getmethods__["DEEP_SOFT2_DECODED_450_499_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_450_499_BITFLIPS_get
    if _newclass:DEEP_SOFT2_DECODED_450_499_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_450_499_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_DEEP_SOFT2_DECODED_450_499_BITFLIPS_set)
    __swig_setmethods__["LSB_SAMPLE_WAS_ZERO_AT_DEEP_SOFT_ON_MSB_PAGE"] = _nvmectl.NVMeAlgoCounters_LSB_SAMPLE_WAS_ZERO_AT_DEEP_SOFT_ON_MSB_PAGE_set
    __swig_getmethods__["LSB_SAMPLE_WAS_ZERO_AT_DEEP_SOFT_ON_MSB_PAGE"] = _nvmectl.NVMeAlgoCounters_LSB_SAMPLE_WAS_ZERO_AT_DEEP_SOFT_ON_MSB_PAGE_get
    if _newclass:LSB_SAMPLE_WAS_ZERO_AT_DEEP_SOFT_ON_MSB_PAGE = _swig_property(_nvmectl.NVMeAlgoCounters_LSB_SAMPLE_WAS_ZERO_AT_DEEP_SOFT_ON_MSB_PAGE_get, _nvmectl.NVMeAlgoCounters_LSB_SAMPLE_WAS_ZERO_AT_DEEP_SOFT_ON_MSB_PAGE_set)
    __swig_setmethods__["NUM_OF_FS1S"] = _nvmectl.NVMeAlgoCounters_NUM_OF_FS1S_set
    __swig_getmethods__["NUM_OF_FS1S"] = _nvmectl.NVMeAlgoCounters_NUM_OF_FS1S_get
    if _newclass:NUM_OF_FS1S = _swig_property(_nvmectl.NVMeAlgoCounters_NUM_OF_FS1S_get, _nvmectl.NVMeAlgoCounters_NUM_OF_FS1S_set)
    __swig_setmethods__["NUM_OF_CW_PASSED_IN_TMODE_F_S1"] = _nvmectl.NVMeAlgoCounters_NUM_OF_CW_PASSED_IN_TMODE_F_S1_set
    __swig_getmethods__["NUM_OF_CW_PASSED_IN_TMODE_F_S1"] = _nvmectl.NVMeAlgoCounters_NUM_OF_CW_PASSED_IN_TMODE_F_S1_get
    if _newclass:NUM_OF_CW_PASSED_IN_TMODE_F_S1 = _swig_property(_nvmectl.NVMeAlgoCounters_NUM_OF_CW_PASSED_IN_TMODE_F_S1_get, _nvmectl.NVMeAlgoCounters_NUM_OF_CW_PASSED_IN_TMODE_F_S1_set)
    __swig_setmethods__["FS1_DECODED_0_19_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS1_DECODED_0_19_BITFLIPS_set
    __swig_getmethods__["FS1_DECODED_0_19_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS1_DECODED_0_19_BITFLIPS_get
    if _newclass:FS1_DECODED_0_19_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_FS1_DECODED_0_19_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_FS1_DECODED_0_19_BITFLIPS_set)
    __swig_setmethods__["FS1_DECODED_20_39_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS1_DECODED_20_39_BITFLIPS_set
    __swig_getmethods__["FS1_DECODED_20_39_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS1_DECODED_20_39_BITFLIPS_get
    if _newclass:FS1_DECODED_20_39_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_FS1_DECODED_20_39_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_FS1_DECODED_20_39_BITFLIPS_set)
    __swig_setmethods__["FS1_DECODED_200_219_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS1_DECODED_200_219_BITFLIPS_set
    __swig_getmethods__["FS1_DECODED_200_219_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS1_DECODED_200_219_BITFLIPS_get
    if _newclass:FS1_DECODED_200_219_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_FS1_DECODED_200_219_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_FS1_DECODED_200_219_BITFLIPS_set)
    __swig_setmethods__["FS1_DECODED_220_239_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS1_DECODED_220_239_BITFLIPS_set
    __swig_getmethods__["FS1_DECODED_220_239_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS1_DECODED_220_239_BITFLIPS_get
    if _newclass:FS1_DECODED_220_239_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_FS1_DECODED_220_239_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_FS1_DECODED_220_239_BITFLIPS_set)
    __swig_setmethods__["FS1_DECODED_40_59_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS1_DECODED_40_59_BITFLIPS_set
    __swig_getmethods__["FS1_DECODED_40_59_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS1_DECODED_40_59_BITFLIPS_get
    if _newclass:FS1_DECODED_40_59_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_FS1_DECODED_40_59_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_FS1_DECODED_40_59_BITFLIPS_set)
    __swig_setmethods__["FS1_DECODED_60_79_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS1_DECODED_60_79_BITFLIPS_set
    __swig_getmethods__["FS1_DECODED_60_79_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS1_DECODED_60_79_BITFLIPS_get
    if _newclass:FS1_DECODED_60_79_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_FS1_DECODED_60_79_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_FS1_DECODED_60_79_BITFLIPS_set)
    __swig_setmethods__["FS1_DECODED_80_99_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS1_DECODED_80_99_BITFLIPS_set
    __swig_getmethods__["FS1_DECODED_80_99_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS1_DECODED_80_99_BITFLIPS_get
    if _newclass:FS1_DECODED_80_99_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_FS1_DECODED_80_99_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_FS1_DECODED_80_99_BITFLIPS_set)
    __swig_setmethods__["FS1_DECODED_100_119_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS1_DECODED_100_119_BITFLIPS_set
    __swig_getmethods__["FS1_DECODED_100_119_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS1_DECODED_100_119_BITFLIPS_get
    if _newclass:FS1_DECODED_100_119_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_FS1_DECODED_100_119_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_FS1_DECODED_100_119_BITFLIPS_set)
    __swig_setmethods__["FS1_DECODED_120_139_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS1_DECODED_120_139_BITFLIPS_set
    __swig_getmethods__["FS1_DECODED_120_139_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS1_DECODED_120_139_BITFLIPS_get
    if _newclass:FS1_DECODED_120_139_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_FS1_DECODED_120_139_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_FS1_DECODED_120_139_BITFLIPS_set)
    __swig_setmethods__["FS1_DECODED_140_159_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS1_DECODED_140_159_BITFLIPS_set
    __swig_getmethods__["FS1_DECODED_140_159_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS1_DECODED_140_159_BITFLIPS_get
    if _newclass:FS1_DECODED_140_159_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_FS1_DECODED_140_159_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_FS1_DECODED_140_159_BITFLIPS_set)
    __swig_setmethods__["FS1_DECODED_160_179_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS1_DECODED_160_179_BITFLIPS_set
    __swig_getmethods__["FS1_DECODED_160_179_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS1_DECODED_160_179_BITFLIPS_get
    if _newclass:FS1_DECODED_160_179_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_FS1_DECODED_160_179_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_FS1_DECODED_160_179_BITFLIPS_set)
    __swig_setmethods__["FS1_DECODED_180_199_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS1_DECODED_180_199_BITFLIPS_set
    __swig_getmethods__["FS1_DECODED_180_199_BITFLIPS"] = _nvmectl.NVMeAlgoCounters_FS1_DECODED_180_199_BITFLIPS_get
    if _newclass:FS1_DECODED_180_199_BITFLIPS = _swig_property(_nvmectl.NVMeAlgoCounters_FS1_DECODED_180_199_BITFLIPS_get, _nvmectl.NVMeAlgoCounters_FS1_DECODED_180_199_BITFLIPS_set)
    __swig_setmethods__["ERASED_PAGES_READS"] = _nvmectl.NVMeAlgoCounters_ERASED_PAGES_READS_set
    __swig_getmethods__["ERASED_PAGES_READS"] = _nvmectl.NVMeAlgoCounters_ERASED_PAGES_READS_get
    if _newclass:ERASED_PAGES_READS = _swig_property(_nvmectl.NVMeAlgoCounters_ERASED_PAGES_READS_get, _nvmectl.NVMeAlgoCounters_ERASED_PAGES_READS_set)
    __swig_setmethods__["READ_FAILURES"] = _nvmectl.NVMeAlgoCounters_READ_FAILURES_set
    __swig_getmethods__["READ_FAILURES"] = _nvmectl.NVMeAlgoCounters_READ_FAILURES_get
    if _newclass:READ_FAILURES = _swig_property(_nvmectl.NVMeAlgoCounters_READ_FAILURES_get, _nvmectl.NVMeAlgoCounters_READ_FAILURES_set)
    __swig_setmethods__["NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ0"] = _nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ0_set
    __swig_getmethods__["NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ0"] = _nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ0_get
    if _newclass:NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ0 = _swig_property(_nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ0_get, _nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ0_set)
    __swig_setmethods__["NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ1"] = _nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ1_set
    __swig_getmethods__["NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ1"] = _nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ1_get
    if _newclass:NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ1 = _swig_property(_nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ1_get, _nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ1_set)
    __swig_setmethods__["NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ2"] = _nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ2_set
    __swig_getmethods__["NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ2"] = _nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ2_get
    if _newclass:NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ2 = _swig_property(_nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ2_get, _nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ2_set)
    __swig_setmethods__["NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ3"] = _nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ3_set
    __swig_getmethods__["NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ3"] = _nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ3_get
    if _newclass:NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ3 = _swig_property(_nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ3_get, _nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ3_set)
    __swig_setmethods__["NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ4"] = _nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ4_set
    __swig_getmethods__["NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ4"] = _nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ4_get
    if _newclass:NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ4 = _swig_property(_nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ4_get, _nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_SYND_SUM_ACQ4_set)
    __swig_setmethods__["NUM_OF_SENSES_WERE_SENT_DURING_C1_EQU_ACQ0"] = _nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_C1_EQU_ACQ0_set
    __swig_getmethods__["NUM_OF_SENSES_WERE_SENT_DURING_C1_EQU_ACQ0"] = _nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_C1_EQU_ACQ0_get
    if _newclass:NUM_OF_SENSES_WERE_SENT_DURING_C1_EQU_ACQ0 = _swig_property(_nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_C1_EQU_ACQ0_get, _nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_C1_EQU_ACQ0_set)
    __swig_setmethods__["NUM_OF_SENSES_WERE_SENT_DURING_C1_EQU_ACQ1"] = _nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_C1_EQU_ACQ1_set
    __swig_getmethods__["NUM_OF_SENSES_WERE_SENT_DURING_C1_EQU_ACQ1"] = _nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_C1_EQU_ACQ1_get
    if _newclass:NUM_OF_SENSES_WERE_SENT_DURING_C1_EQU_ACQ1 = _swig_property(_nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_C1_EQU_ACQ1_get, _nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_C1_EQU_ACQ1_set)
    __swig_setmethods__["NUM_OF_SENSES_WERE_SENT_DURING_C1_EQU_ACQ2"] = _nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_C1_EQU_ACQ2_set
    __swig_getmethods__["NUM_OF_SENSES_WERE_SENT_DURING_C1_EQU_ACQ2"] = _nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_C1_EQU_ACQ2_get
    if _newclass:NUM_OF_SENSES_WERE_SENT_DURING_C1_EQU_ACQ2 = _swig_property(_nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_C1_EQU_ACQ2_get, _nvmectl.NVMeAlgoCounters_NUM_OF_SENSES_WERE_SENT_DURING_C1_EQU_ACQ2_set)
    __swig_setmethods__["ERASED_COUPLES_IN_ALGO_SOFTS"] = _nvmectl.NVMeAlgoCounters_ERASED_COUPLES_IN_ALGO_SOFTS_set
    __swig_getmethods__["ERASED_COUPLES_IN_ALGO_SOFTS"] = _nvmectl.NVMeAlgoCounters_ERASED_COUPLES_IN_ALGO_SOFTS_get
    if _newclass:ERASED_COUPLES_IN_ALGO_SOFTS = _swig_property(_nvmectl.NVMeAlgoCounters_ERASED_COUPLES_IN_ALGO_SOFTS_get, _nvmectl.NVMeAlgoCounters_ERASED_COUPLES_IN_ALGO_SOFTS_set)
    __swig_setmethods__["ZERO_COUPLES_IN_ALGO_SOFTS"] = _nvmectl.NVMeAlgoCounters_ZERO_COUPLES_IN_ALGO_SOFTS_set
    __swig_getmethods__["ZERO_COUPLES_IN_ALGO_SOFTS"] = _nvmectl.NVMeAlgoCounters_ZERO_COUPLES_IN_ALGO_SOFTS_get
    if _newclass:ZERO_COUPLES_IN_ALGO_SOFTS = _swig_property(_nvmectl.NVMeAlgoCounters_ZERO_COUPLES_IN_ALGO_SOFTS_get, _nvmectl.NVMeAlgoCounters_ZERO_COUPLES_IN_ALGO_SOFTS_set)
    __swig_setmethods__["ENC1_NOT_VALID"] = _nvmectl.NVMeAlgoCounters_ENC1_NOT_VALID_set
    __swig_getmethods__["ENC1_NOT_VALID"] = _nvmectl.NVMeAlgoCounters_ENC1_NOT_VALID_get
    if _newclass:ENC1_NOT_VALID = _swig_property(_nvmectl.NVMeAlgoCounters_ENC1_NOT_VALID_get, _nvmectl.NVMeAlgoCounters_ENC1_NOT_VALID_set)
    def __init__(self): 
        this = _nvmectl.new_NVMeAlgoCounters()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_NVMeAlgoCounters
    __del__ = lambda self : None;
NVMeAlgoCounters_swigregister = _nvmectl.NVMeAlgoCounters_swigregister
NVMeAlgoCounters_swigregister(NVMeAlgoCounters)

class S1XDriveConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S1XDriveConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S1XDriveConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["DRIVE_CAPACITY"] = _nvmectl.S1XDriveConfig_DRIVE_CAPACITY_set
    __swig_getmethods__["DRIVE_CAPACITY"] = _nvmectl.S1XDriveConfig_DRIVE_CAPACITY_get
    if _newclass:DRIVE_CAPACITY = _swig_property(_nvmectl.S1XDriveConfig_DRIVE_CAPACITY_get, _nvmectl.S1XDriveConfig_DRIVE_CAPACITY_set)
    __swig_setmethods__["NAND_VENDOR"] = _nvmectl.S1XDriveConfig_NAND_VENDOR_set
    __swig_getmethods__["NAND_VENDOR"] = _nvmectl.S1XDriveConfig_NAND_VENDOR_get
    if _newclass:NAND_VENDOR = _swig_property(_nvmectl.S1XDriveConfig_NAND_VENDOR_get, _nvmectl.S1XDriveConfig_NAND_VENDOR_set)
    __swig_setmethods__["NOR_VENDOR"] = _nvmectl.S1XDriveConfig_NOR_VENDOR_set
    __swig_getmethods__["NOR_VENDOR"] = _nvmectl.S1XDriveConfig_NOR_VENDOR_get
    if _newclass:NOR_VENDOR = _swig_property(_nvmectl.S1XDriveConfig_NOR_VENDOR_get, _nvmectl.S1XDriveConfig_NOR_VENDOR_set)
    __swig_setmethods__["DDR_VENDOR"] = _nvmectl.S1XDriveConfig_DDR_VENDOR_set
    __swig_getmethods__["DDR_VENDOR"] = _nvmectl.S1XDriveConfig_DDR_VENDOR_get
    if _newclass:DDR_VENDOR = _swig_property(_nvmectl.S1XDriveConfig_DDR_VENDOR_get, _nvmectl.S1XDriveConfig_DDR_VENDOR_set)
    __swig_setmethods__["NAND_TYPE"] = _nvmectl.S1XDriveConfig_NAND_TYPE_set
    __swig_getmethods__["NAND_TYPE"] = _nvmectl.S1XDriveConfig_NAND_TYPE_get
    if _newclass:NAND_TYPE = _swig_property(_nvmectl.S1XDriveConfig_NAND_TYPE_get, _nvmectl.S1XDriveConfig_NAND_TYPE_set)
    __swig_setmethods__["BOARD_TYPE"] = _nvmectl.S1XDriveConfig_BOARD_TYPE_set
    __swig_getmethods__["BOARD_TYPE"] = _nvmectl.S1XDriveConfig_BOARD_TYPE_get
    if _newclass:BOARD_TYPE = _swig_property(_nvmectl.S1XDriveConfig_BOARD_TYPE_get, _nvmectl.S1XDriveConfig_BOARD_TYPE_set)
    __swig_setmethods__["CH_MAPPING"] = _nvmectl.S1XDriveConfig_CH_MAPPING_set
    __swig_getmethods__["CH_MAPPING"] = _nvmectl.S1XDriveConfig_CH_MAPPING_get
    if _newclass:CH_MAPPING = _swig_property(_nvmectl.S1XDriveConfig_CH_MAPPING_get, _nvmectl.S1XDriveConfig_CH_MAPPING_set)
    __swig_setmethods__["RESERVED"] = _nvmectl.S1XDriveConfig_RESERVED_set
    __swig_getmethods__["RESERVED"] = _nvmectl.S1XDriveConfig_RESERVED_get
    if _newclass:RESERVED = _swig_property(_nvmectl.S1XDriveConfig_RESERVED_get, _nvmectl.S1XDriveConfig_RESERVED_set)
    __swig_setmethods__["EUI64"] = _nvmectl.S1XDriveConfig_EUI64_set
    __swig_getmethods__["EUI64"] = _nvmectl.S1XDriveConfig_EUI64_get
    if _newclass:EUI64 = _swig_property(_nvmectl.S1XDriveConfig_EUI64_get, _nvmectl.S1XDriveConfig_EUI64_set)
    __swig_setmethods__["CORNER_TYPE"] = _nvmectl.S1XDriveConfig_CORNER_TYPE_set
    __swig_getmethods__["CORNER_TYPE"] = _nvmectl.S1XDriveConfig_CORNER_TYPE_get
    if _newclass:CORNER_TYPE = _swig_property(_nvmectl.S1XDriveConfig_CORNER_TYPE_get, _nvmectl.S1XDriveConfig_CORNER_TYPE_set)
    __swig_setmethods__["PTS_REVISION"] = _nvmectl.S1XDriveConfig_PTS_REVISION_set
    __swig_getmethods__["PTS_REVISION"] = _nvmectl.S1XDriveConfig_PTS_REVISION_get
    if _newclass:PTS_REVISION = _swig_property(_nvmectl.S1XDriveConfig_PTS_REVISION_get, _nvmectl.S1XDriveConfig_PTS_REVISION_set)
    __swig_setmethods__["RESERVED2"] = _nvmectl.S1XDriveConfig_RESERVED2_set
    __swig_getmethods__["RESERVED2"] = _nvmectl.S1XDriveConfig_RESERVED2_get
    if _newclass:RESERVED2 = _swig_property(_nvmectl.S1XDriveConfig_RESERVED2_get, _nvmectl.S1XDriveConfig_RESERVED2_set)
    def __init__(self): 
        this = _nvmectl.new_S1XDriveConfig()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_S1XDriveConfig
    __del__ = lambda self : None;
S1XDriveConfig_swigregister = _nvmectl.S1XDriveConfig_swigregister
S1XDriveConfig_swigregister(S1XDriveConfig)

class S1XSmartRawDataUsed(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S1XSmartRawDataUsed, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S1XSmartRawDataUsed, name)
    __repr__ = _swig_repr
    __swig_setmethods__["PERCENTAGE_USED"] = _nvmectl.S1XSmartRawDataUsed_PERCENTAGE_USED_set
    __swig_getmethods__["PERCENTAGE_USED"] = _nvmectl.S1XSmartRawDataUsed_PERCENTAGE_USED_get
    if _newclass:PERCENTAGE_USED = _swig_property(_nvmectl.S1XSmartRawDataUsed_PERCENTAGE_USED_get, _nvmectl.S1XSmartRawDataUsed_PERCENTAGE_USED_set)
    __swig_setmethods__["DATA_UNITS_READ"] = _nvmectl.S1XSmartRawDataUsed_DATA_UNITS_READ_set
    __swig_getmethods__["DATA_UNITS_READ"] = _nvmectl.S1XSmartRawDataUsed_DATA_UNITS_READ_get
    if _newclass:DATA_UNITS_READ = _swig_property(_nvmectl.S1XSmartRawDataUsed_DATA_UNITS_READ_get, _nvmectl.S1XSmartRawDataUsed_DATA_UNITS_READ_set)
    __swig_setmethods__["DATA_UNITS_WRITTEN"] = _nvmectl.S1XSmartRawDataUsed_DATA_UNITS_WRITTEN_set
    __swig_getmethods__["DATA_UNITS_WRITTEN"] = _nvmectl.S1XSmartRawDataUsed_DATA_UNITS_WRITTEN_get
    if _newclass:DATA_UNITS_WRITTEN = _swig_property(_nvmectl.S1XSmartRawDataUsed_DATA_UNITS_WRITTEN_get, _nvmectl.S1XSmartRawDataUsed_DATA_UNITS_WRITTEN_set)
    __swig_setmethods__["HOST_READ_COMMANDS"] = _nvmectl.S1XSmartRawDataUsed_HOST_READ_COMMANDS_set
    __swig_getmethods__["HOST_READ_COMMANDS"] = _nvmectl.S1XSmartRawDataUsed_HOST_READ_COMMANDS_get
    if _newclass:HOST_READ_COMMANDS = _swig_property(_nvmectl.S1XSmartRawDataUsed_HOST_READ_COMMANDS_get, _nvmectl.S1XSmartRawDataUsed_HOST_READ_COMMANDS_set)
    __swig_setmethods__["HOST_WRITE_COMMANDS"] = _nvmectl.S1XSmartRawDataUsed_HOST_WRITE_COMMANDS_set
    __swig_getmethods__["HOST_WRITE_COMMANDS"] = _nvmectl.S1XSmartRawDataUsed_HOST_WRITE_COMMANDS_get
    if _newclass:HOST_WRITE_COMMANDS = _swig_property(_nvmectl.S1XSmartRawDataUsed_HOST_WRITE_COMMANDS_get, _nvmectl.S1XSmartRawDataUsed_HOST_WRITE_COMMANDS_set)
    __swig_setmethods__["POWER_CYCLES"] = _nvmectl.S1XSmartRawDataUsed_POWER_CYCLES_set
    __swig_getmethods__["POWER_CYCLES"] = _nvmectl.S1XSmartRawDataUsed_POWER_CYCLES_get
    if _newclass:POWER_CYCLES = _swig_property(_nvmectl.S1XSmartRawDataUsed_POWER_CYCLES_get, _nvmectl.S1XSmartRawDataUsed_POWER_CYCLES_set)
    __swig_setmethods__["UNSAFE_SHUTDOWNS"] = _nvmectl.S1XSmartRawDataUsed_UNSAFE_SHUTDOWNS_set
    __swig_getmethods__["UNSAFE_SHUTDOWNS"] = _nvmectl.S1XSmartRawDataUsed_UNSAFE_SHUTDOWNS_get
    if _newclass:UNSAFE_SHUTDOWNS = _swig_property(_nvmectl.S1XSmartRawDataUsed_UNSAFE_SHUTDOWNS_get, _nvmectl.S1XSmartRawDataUsed_UNSAFE_SHUTDOWNS_set)
    __swig_setmethods__["MEDIA_ERRORS"] = _nvmectl.S1XSmartRawDataUsed_MEDIA_ERRORS_set
    __swig_getmethods__["MEDIA_ERRORS"] = _nvmectl.S1XSmartRawDataUsed_MEDIA_ERRORS_get
    if _newclass:MEDIA_ERRORS = _swig_property(_nvmectl.S1XSmartRawDataUsed_MEDIA_ERRORS_get, _nvmectl.S1XSmartRawDataUsed_MEDIA_ERRORS_set)
    __swig_setmethods__["NUM_OF_ERROR_LOG_ENTRIES"] = _nvmectl.S1XSmartRawDataUsed_NUM_OF_ERROR_LOG_ENTRIES_set
    __swig_getmethods__["NUM_OF_ERROR_LOG_ENTRIES"] = _nvmectl.S1XSmartRawDataUsed_NUM_OF_ERROR_LOG_ENTRIES_get
    if _newclass:NUM_OF_ERROR_LOG_ENTRIES = _swig_property(_nvmectl.S1XSmartRawDataUsed_NUM_OF_ERROR_LOG_ENTRIES_get, _nvmectl.S1XSmartRawDataUsed_NUM_OF_ERROR_LOG_ENTRIES_set)
    __swig_setmethods__["ERASE_ERRORS"] = _nvmectl.S1XSmartRawDataUsed_ERASE_ERRORS_set
    __swig_getmethods__["ERASE_ERRORS"] = _nvmectl.S1XSmartRawDataUsed_ERASE_ERRORS_get
    if _newclass:ERASE_ERRORS = _swig_property(_nvmectl.S1XSmartRawDataUsed_ERASE_ERRORS_get, _nvmectl.S1XSmartRawDataUsed_ERASE_ERRORS_set)
    __swig_setmethods__["PROGRAM_ERRORS"] = _nvmectl.S1XSmartRawDataUsed_PROGRAM_ERRORS_set
    __swig_getmethods__["PROGRAM_ERRORS"] = _nvmectl.S1XSmartRawDataUsed_PROGRAM_ERRORS_get
    if _newclass:PROGRAM_ERRORS = _swig_property(_nvmectl.S1XSmartRawDataUsed_PROGRAM_ERRORS_get, _nvmectl.S1XSmartRawDataUsed_PROGRAM_ERRORS_set)
    __swig_setmethods__["COPY_DST_ERRORS"] = _nvmectl.S1XSmartRawDataUsed_COPY_DST_ERRORS_set
    __swig_getmethods__["COPY_DST_ERRORS"] = _nvmectl.S1XSmartRawDataUsed_COPY_DST_ERRORS_get
    if _newclass:COPY_DST_ERRORS = _swig_property(_nvmectl.S1XSmartRawDataUsed_COPY_DST_ERRORS_get, _nvmectl.S1XSmartRawDataUsed_COPY_DST_ERRORS_set)
    __swig_setmethods__["COPY_SRC_ERRORS"] = _nvmectl.S1XSmartRawDataUsed_COPY_SRC_ERRORS_set
    __swig_getmethods__["COPY_SRC_ERRORS"] = _nvmectl.S1XSmartRawDataUsed_COPY_SRC_ERRORS_get
    if _newclass:COPY_SRC_ERRORS = _swig_property(_nvmectl.S1XSmartRawDataUsed_COPY_SRC_ERRORS_get, _nvmectl.S1XSmartRawDataUsed_COPY_SRC_ERRORS_set)
    __swig_setmethods__["RAID_RECONSTRUCT_SUCCESS"] = _nvmectl.S1XSmartRawDataUsed_RAID_RECONSTRUCT_SUCCESS_set
    __swig_getmethods__["RAID_RECONSTRUCT_SUCCESS"] = _nvmectl.S1XSmartRawDataUsed_RAID_RECONSTRUCT_SUCCESS_get
    if _newclass:RAID_RECONSTRUCT_SUCCESS = _swig_property(_nvmectl.S1XSmartRawDataUsed_RAID_RECONSTRUCT_SUCCESS_get, _nvmectl.S1XSmartRawDataUsed_RAID_RECONSTRUCT_SUCCESS_set)
    __swig_setmethods__["RAID_RECONSTRUCT_FAIL"] = _nvmectl.S1XSmartRawDataUsed_RAID_RECONSTRUCT_FAIL_set
    __swig_getmethods__["RAID_RECONSTRUCT_FAIL"] = _nvmectl.S1XSmartRawDataUsed_RAID_RECONSTRUCT_FAIL_get
    if _newclass:RAID_RECONSTRUCT_FAIL = _swig_property(_nvmectl.S1XSmartRawDataUsed_RAID_RECONSTRUCT_FAIL_get, _nvmectl.S1XSmartRawDataUsed_RAID_RECONSTRUCT_FAIL_set)
    __swig_setmethods__["TRIM_REQUESTS"] = _nvmectl.S1XSmartRawDataUsed_TRIM_REQUESTS_set
    __swig_getmethods__["TRIM_REQUESTS"] = _nvmectl.S1XSmartRawDataUsed_TRIM_REQUESTS_get
    if _newclass:TRIM_REQUESTS = _swig_property(_nvmectl.S1XSmartRawDataUsed_TRIM_REQUESTS_get, _nvmectl.S1XSmartRawDataUsed_TRIM_REQUESTS_set)
    __swig_setmethods__["TOTAL_MUS_TRIMMED"] = _nvmectl.S1XSmartRawDataUsed_TOTAL_MUS_TRIMMED_set
    __swig_getmethods__["TOTAL_MUS_TRIMMED"] = _nvmectl.S1XSmartRawDataUsed_TOTAL_MUS_TRIMMED_get
    if _newclass:TOTAL_MUS_TRIMMED = _swig_property(_nvmectl.S1XSmartRawDataUsed_TOTAL_MUS_TRIMMED_get, _nvmectl.S1XSmartRawDataUsed_TOTAL_MUS_TRIMMED_set)
    __swig_setmethods__["HOST_READ_ERRORS"] = _nvmectl.S1XSmartRawDataUsed_HOST_READ_ERRORS_set
    __swig_getmethods__["HOST_READ_ERRORS"] = _nvmectl.S1XSmartRawDataUsed_HOST_READ_ERRORS_get
    if _newclass:HOST_READ_ERRORS = _swig_property(_nvmectl.S1XSmartRawDataUsed_HOST_READ_ERRORS_get, _nvmectl.S1XSmartRawDataUsed_HOST_READ_ERRORS_set)
    __swig_setmethods__["INTERNAL_READ_ERRORS"] = _nvmectl.S1XSmartRawDataUsed_INTERNAL_READ_ERRORS_set
    __swig_getmethods__["INTERNAL_READ_ERRORS"] = _nvmectl.S1XSmartRawDataUsed_INTERNAL_READ_ERRORS_get
    if _newclass:INTERNAL_READ_ERRORS = _swig_property(_nvmectl.S1XSmartRawDataUsed_INTERNAL_READ_ERRORS_get, _nvmectl.S1XSmartRawDataUsed_INTERNAL_READ_ERRORS_set)
    __swig_setmethods__["HOST_FLUSHES"] = _nvmectl.S1XSmartRawDataUsed_HOST_FLUSHES_set
    __swig_getmethods__["HOST_FLUSHES"] = _nvmectl.S1XSmartRawDataUsed_HOST_FLUSHES_get
    if _newclass:HOST_FLUSHES = _swig_property(_nvmectl.S1XSmartRawDataUsed_HOST_FLUSHES_get, _nvmectl.S1XSmartRawDataUsed_HOST_FLUSHES_set)
    __swig_setmethods__["WRITER_FLUSHES"] = _nvmectl.S1XSmartRawDataUsed_WRITER_FLUSHES_set
    __swig_getmethods__["WRITER_FLUSHES"] = _nvmectl.S1XSmartRawDataUsed_WRITER_FLUSHES_get
    if _newclass:WRITER_FLUSHES = _swig_property(_nvmectl.S1XSmartRawDataUsed_WRITER_FLUSHES_get, _nvmectl.S1XSmartRawDataUsed_WRITER_FLUSHES_set)
    __swig_setmethods__["SLEEP_REQUESTS"] = _nvmectl.S1XSmartRawDataUsed_SLEEP_REQUESTS_set
    __swig_getmethods__["SLEEP_REQUESTS"] = _nvmectl.S1XSmartRawDataUsed_SLEEP_REQUESTS_get
    if _newclass:SLEEP_REQUESTS = _swig_property(_nvmectl.S1XSmartRawDataUsed_SLEEP_REQUESTS_get, _nvmectl.S1XSmartRawDataUsed_SLEEP_REQUESTS_set)
    __swig_setmethods__["BAD_BLOCKS_LIMIT"] = _nvmectl.S1XSmartRawDataUsed_BAD_BLOCKS_LIMIT_set
    __swig_getmethods__["BAD_BLOCKS_LIMIT"] = _nvmectl.S1XSmartRawDataUsed_BAD_BLOCKS_LIMIT_get
    if _newclass:BAD_BLOCKS_LIMIT = _swig_property(_nvmectl.S1XSmartRawDataUsed_BAD_BLOCKS_LIMIT_get, _nvmectl.S1XSmartRawDataUsed_BAD_BLOCKS_LIMIT_set)
    __swig_setmethods__["GROWN_BAD_BLOCKS"] = _nvmectl.S1XSmartRawDataUsed_GROWN_BAD_BLOCKS_set
    __swig_getmethods__["GROWN_BAD_BLOCKS"] = _nvmectl.S1XSmartRawDataUsed_GROWN_BAD_BLOCKS_get
    if _newclass:GROWN_BAD_BLOCKS = _swig_property(_nvmectl.S1XSmartRawDataUsed_GROWN_BAD_BLOCKS_get, _nvmectl.S1XSmartRawDataUsed_GROWN_BAD_BLOCKS_set)
    __swig_setmethods__["MAX_THROTTLE"] = _nvmectl.S1XSmartRawDataUsed_MAX_THROTTLE_set
    __swig_getmethods__["MAX_THROTTLE"] = _nvmectl.S1XSmartRawDataUsed_MAX_THROTTLE_get
    if _newclass:MAX_THROTTLE = _swig_property(_nvmectl.S1XSmartRawDataUsed_MAX_THROTTLE_get, _nvmectl.S1XSmartRawDataUsed_MAX_THROTTLE_set)
    __swig_setmethods__["MIN_TEMPERATURE"] = _nvmectl.S1XSmartRawDataUsed_MIN_TEMPERATURE_set
    __swig_getmethods__["MIN_TEMPERATURE"] = _nvmectl.S1XSmartRawDataUsed_MIN_TEMPERATURE_get
    if _newclass:MIN_TEMPERATURE = _swig_property(_nvmectl.S1XSmartRawDataUsed_MIN_TEMPERATURE_get, _nvmectl.S1XSmartRawDataUsed_MIN_TEMPERATURE_set)
    __swig_setmethods__["MAX_TEMPERATURE"] = _nvmectl.S1XSmartRawDataUsed_MAX_TEMPERATURE_set
    __swig_getmethods__["MAX_TEMPERATURE"] = _nvmectl.S1XSmartRawDataUsed_MAX_TEMPERATURE_get
    if _newclass:MAX_TEMPERATURE = _swig_property(_nvmectl.S1XSmartRawDataUsed_MAX_TEMPERATURE_get, _nvmectl.S1XSmartRawDataUsed_MAX_TEMPERATURE_set)
    __swig_setmethods__["OOB_RX_ERROR_COUNT"] = _nvmectl.S1XSmartRawDataUsed_OOB_RX_ERROR_COUNT_set
    __swig_getmethods__["OOB_RX_ERROR_COUNT"] = _nvmectl.S1XSmartRawDataUsed_OOB_RX_ERROR_COUNT_get
    if _newclass:OOB_RX_ERROR_COUNT = _swig_property(_nvmectl.S1XSmartRawDataUsed_OOB_RX_ERROR_COUNT_get, _nvmectl.S1XSmartRawDataUsed_OOB_RX_ERROR_COUNT_set)
    __swig_setmethods__["EXIT_S_R"] = _nvmectl.S1XSmartRawDataUsed_EXIT_S_R_set
    __swig_getmethods__["EXIT_S_R"] = _nvmectl.S1XSmartRawDataUsed_EXIT_S_R_get
    if _newclass:EXIT_S_R = _swig_property(_nvmectl.S1XSmartRawDataUsed_EXIT_S_R_get, _nvmectl.S1XSmartRawDataUsed_EXIT_S_R_set)
    __swig_setmethods__["BPD_SELF_FLUSH"] = _nvmectl.S1XSmartRawDataUsed_BPD_SELF_FLUSH_set
    __swig_getmethods__["BPD_SELF_FLUSH"] = _nvmectl.S1XSmartRawDataUsed_BPD_SELF_FLUSH_get
    if _newclass:BPD_SELF_FLUSH = _swig_property(_nvmectl.S1XSmartRawDataUsed_BPD_SELF_FLUSH_get, _nvmectl.S1XSmartRawDataUsed_BPD_SELF_FLUSH_set)
    __swig_setmethods__["ERASE_PROG"] = _nvmectl.S1XSmartRawDataUsed_ERASE_PROG_set
    __swig_getmethods__["ERASE_PROG"] = _nvmectl.S1XSmartRawDataUsed_ERASE_PROG_get
    if _newclass:ERASE_PROG = _swig_property(_nvmectl.S1XSmartRawDataUsed_ERASE_PROG_get, _nvmectl.S1XSmartRawDataUsed_ERASE_PROG_set)
    __swig_setmethods__["ERASE_FG_COPY"] = _nvmectl.S1XSmartRawDataUsed_ERASE_FG_COPY_set
    __swig_getmethods__["ERASE_FG_COPY"] = _nvmectl.S1XSmartRawDataUsed_ERASE_FG_COPY_get
    if _newclass:ERASE_FG_COPY = _swig_property(_nvmectl.S1XSmartRawDataUsed_ERASE_FG_COPY_get, _nvmectl.S1XSmartRawDataUsed_ERASE_FG_COPY_set)
    __swig_setmethods__["ERASE_BG_COPY"] = _nvmectl.S1XSmartRawDataUsed_ERASE_BG_COPY_set
    __swig_getmethods__["ERASE_BG_COPY"] = _nvmectl.S1XSmartRawDataUsed_ERASE_BG_COPY_get
    if _newclass:ERASE_BG_COPY = _swig_property(_nvmectl.S1XSmartRawDataUsed_ERASE_BG_COPY_get, _nvmectl.S1XSmartRawDataUsed_ERASE_BG_COPY_set)
    __swig_setmethods__["ERASE_BPD"] = _nvmectl.S1XSmartRawDataUsed_ERASE_BPD_set
    __swig_getmethods__["ERASE_BPD"] = _nvmectl.S1XSmartRawDataUsed_ERASE_BPD_get
    if _newclass:ERASE_BPD = _swig_property(_nvmectl.S1XSmartRawDataUsed_ERASE_BPD_get, _nvmectl.S1XSmartRawDataUsed_ERASE_BPD_set)
    __swig_setmethods__["RESERVED_PADDING1"] = _nvmectl.S1XSmartRawDataUsed_RESERVED_PADDING1_set
    __swig_getmethods__["RESERVED_PADDING1"] = _nvmectl.S1XSmartRawDataUsed_RESERVED_PADDING1_get
    if _newclass:RESERVED_PADDING1 = _swig_property(_nvmectl.S1XSmartRawDataUsed_RESERVED_PADDING1_get, _nvmectl.S1XSmartRawDataUsed_RESERVED_PADDING1_set)
    __swig_setmethods__["RESERVED_PADDING2"] = _nvmectl.S1XSmartRawDataUsed_RESERVED_PADDING2_set
    __swig_getmethods__["RESERVED_PADDING2"] = _nvmectl.S1XSmartRawDataUsed_RESERVED_PADDING2_get
    if _newclass:RESERVED_PADDING2 = _swig_property(_nvmectl.S1XSmartRawDataUsed_RESERVED_PADDING2_get, _nvmectl.S1XSmartRawDataUsed_RESERVED_PADDING2_set)
    __swig_setmethods__["BPD_NOR_WRITE_READ_VERIFY_FAIL"] = _nvmectl.S1XSmartRawDataUsed_BPD_NOR_WRITE_READ_VERIFY_FAIL_set
    __swig_getmethods__["BPD_NOR_WRITE_READ_VERIFY_FAIL"] = _nvmectl.S1XSmartRawDataUsed_BPD_NOR_WRITE_READ_VERIFY_FAIL_get
    if _newclass:BPD_NOR_WRITE_READ_VERIFY_FAIL = _swig_property(_nvmectl.S1XSmartRawDataUsed_BPD_NOR_WRITE_READ_VERIFY_FAIL_get, _nvmectl.S1XSmartRawDataUsed_BPD_NOR_WRITE_READ_VERIFY_FAIL_set)
    __swig_setmethods__["WAS_SMART_READ_ERROR"] = _nvmectl.S1XSmartRawDataUsed_WAS_SMART_READ_ERROR_set
    __swig_getmethods__["WAS_SMART_READ_ERROR"] = _nvmectl.S1XSmartRawDataUsed_WAS_SMART_READ_ERROR_get
    if _newclass:WAS_SMART_READ_ERROR = _swig_property(_nvmectl.S1XSmartRawDataUsed_WAS_SMART_READ_ERROR_get, _nvmectl.S1XSmartRawDataUsed_WAS_SMART_READ_ERROR_set)
    __swig_setmethods__["DUMMY_PROGRAM_ERRORS"] = _nvmectl.S1XSmartRawDataUsed_DUMMY_PROGRAM_ERRORS_set
    __swig_getmethods__["DUMMY_PROGRAM_ERRORS"] = _nvmectl.S1XSmartRawDataUsed_DUMMY_PROGRAM_ERRORS_get
    if _newclass:DUMMY_PROGRAM_ERRORS = _swig_property(_nvmectl.S1XSmartRawDataUsed_DUMMY_PROGRAM_ERRORS_get, _nvmectl.S1XSmartRawDataUsed_DUMMY_PROGRAM_ERRORS_set)
    __swig_setmethods__["FORCE_CLOSE_OPEN_BLOCK_RD"] = _nvmectl.S1XSmartRawDataUsed_FORCE_CLOSE_OPEN_BLOCK_RD_set
    __swig_getmethods__["FORCE_CLOSE_OPEN_BLOCK_RD"] = _nvmectl.S1XSmartRawDataUsed_FORCE_CLOSE_OPEN_BLOCK_RD_get
    if _newclass:FORCE_CLOSE_OPEN_BLOCK_RD = _swig_property(_nvmectl.S1XSmartRawDataUsed_FORCE_CLOSE_OPEN_BLOCK_RD_get, _nvmectl.S1XSmartRawDataUsed_FORCE_CLOSE_OPEN_BLOCK_RD_set)
    __swig_setmethods__["FORCE_CLOSE_OPEN_BLOCK_RF"] = _nvmectl.S1XSmartRawDataUsed_FORCE_CLOSE_OPEN_BLOCK_RF_set
    __swig_getmethods__["FORCE_CLOSE_OPEN_BLOCK_RF"] = _nvmectl.S1XSmartRawDataUsed_FORCE_CLOSE_OPEN_BLOCK_RF_get
    if _newclass:FORCE_CLOSE_OPEN_BLOCK_RF = _swig_property(_nvmectl.S1XSmartRawDataUsed_FORCE_CLOSE_OPEN_BLOCK_RF_get, _nvmectl.S1XSmartRawDataUsed_FORCE_CLOSE_OPEN_BLOCK_RF_set)
    __swig_setmethods__["COPIED_BLOCKS_DUE_TO_RD"] = _nvmectl.S1XSmartRawDataUsed_COPIED_BLOCKS_DUE_TO_RD_set
    __swig_getmethods__["COPIED_BLOCKS_DUE_TO_RD"] = _nvmectl.S1XSmartRawDataUsed_COPIED_BLOCKS_DUE_TO_RD_get
    if _newclass:COPIED_BLOCKS_DUE_TO_RD = _swig_property(_nvmectl.S1XSmartRawDataUsed_COPIED_BLOCKS_DUE_TO_RD_get, _nvmectl.S1XSmartRawDataUsed_COPIED_BLOCKS_DUE_TO_RD_set)
    __swig_setmethods__["MAX_ODTS"] = _nvmectl.S1XSmartRawDataUsed_MAX_ODTS_set
    __swig_getmethods__["MAX_ODTS"] = _nvmectl.S1XSmartRawDataUsed_MAX_ODTS_get
    if _newclass:MAX_ODTS = _swig_property(_nvmectl.S1XSmartRawDataUsed_MAX_ODTS_get, _nvmectl.S1XSmartRawDataUsed_MAX_ODTS_set)
    __swig_setmethods__["THROTTLING_HISTOGRAM"] = _nvmectl.S1XSmartRawDataUsed_THROTTLING_HISTOGRAM_set
    __swig_getmethods__["THROTTLING_HISTOGRAM"] = _nvmectl.S1XSmartRawDataUsed_THROTTLING_HISTOGRAM_get
    if _newclass:THROTTLING_HISTOGRAM = _swig_property(_nvmectl.S1XSmartRawDataUsed_THROTTLING_HISTOGRAM_get, _nvmectl.S1XSmartRawDataUsed_THROTTLING_HISTOGRAM_set)
    __swig_setmethods__["POWER_FAIL_PROTECTION_DUMMY_PROGRAM_REQUEST"] = _nvmectl.S1XSmartRawDataUsed_POWER_FAIL_PROTECTION_DUMMY_PROGRAM_REQUEST_set
    __swig_getmethods__["POWER_FAIL_PROTECTION_DUMMY_PROGRAM_REQUEST"] = _nvmectl.S1XSmartRawDataUsed_POWER_FAIL_PROTECTION_DUMMY_PROGRAM_REQUEST_get
    if _newclass:POWER_FAIL_PROTECTION_DUMMY_PROGRAM_REQUEST = _swig_property(_nvmectl.S1XSmartRawDataUsed_POWER_FAIL_PROTECTION_DUMMY_PROGRAM_REQUEST_get, _nvmectl.S1XSmartRawDataUsed_POWER_FAIL_PROTECTION_DUMMY_PROGRAM_REQUEST_set)
    __swig_setmethods__["POWER_FAIL_PROTECTION_FORCE_ALL_DUE_TO_FLUSH_REQUEST"] = _nvmectl.S1XSmartRawDataUsed_POWER_FAIL_PROTECTION_FORCE_ALL_DUE_TO_FLUSH_REQUEST_set
    __swig_getmethods__["POWER_FAIL_PROTECTION_FORCE_ALL_DUE_TO_FLUSH_REQUEST"] = _nvmectl.S1XSmartRawDataUsed_POWER_FAIL_PROTECTION_FORCE_ALL_DUE_TO_FLUSH_REQUEST_get
    if _newclass:POWER_FAIL_PROTECTION_FORCE_ALL_DUE_TO_FLUSH_REQUEST = _swig_property(_nvmectl.S1XSmartRawDataUsed_POWER_FAIL_PROTECTION_FORCE_ALL_DUE_TO_FLUSH_REQUEST_get, _nvmectl.S1XSmartRawDataUsed_POWER_FAIL_PROTECTION_FORCE_ALL_DUE_TO_FLUSH_REQUEST_set)
    __swig_setmethods__["POWER_FAIL_PROTECTION_FLUSH_DUE_TO_NO_UPDATE_ROOM_AVAILABLE"] = _nvmectl.S1XSmartRawDataUsed_POWER_FAIL_PROTECTION_FLUSH_DUE_TO_NO_UPDATE_ROOM_AVAILABLE_set
    __swig_getmethods__["POWER_FAIL_PROTECTION_FLUSH_DUE_TO_NO_UPDATE_ROOM_AVAILABLE"] = _nvmectl.S1XSmartRawDataUsed_POWER_FAIL_PROTECTION_FLUSH_DUE_TO_NO_UPDATE_ROOM_AVAILABLE_get
    if _newclass:POWER_FAIL_PROTECTION_FLUSH_DUE_TO_NO_UPDATE_ROOM_AVAILABLE = _swig_property(_nvmectl.S1XSmartRawDataUsed_POWER_FAIL_PROTECTION_FLUSH_DUE_TO_NO_UPDATE_ROOM_AVAILABLE_get, _nvmectl.S1XSmartRawDataUsed_POWER_FAIL_PROTECTION_FLUSH_DUE_TO_NO_UPDATE_ROOM_AVAILABLE_set)
    __swig_setmethods__["POWER_FAIL_PROTECTION_FLUSH_DUE_TO_NO_FREE_CHUNKS"] = _nvmectl.S1XSmartRawDataUsed_POWER_FAIL_PROTECTION_FLUSH_DUE_TO_NO_FREE_CHUNKS_set
    __swig_getmethods__["POWER_FAIL_PROTECTION_FLUSH_DUE_TO_NO_FREE_CHUNKS"] = _nvmectl.S1XSmartRawDataUsed_POWER_FAIL_PROTECTION_FLUSH_DUE_TO_NO_FREE_CHUNKS_get
    if _newclass:POWER_FAIL_PROTECTION_FLUSH_DUE_TO_NO_FREE_CHUNKS = _swig_property(_nvmectl.S1XSmartRawDataUsed_POWER_FAIL_PROTECTION_FLUSH_DUE_TO_NO_FREE_CHUNKS_get, _nvmectl.S1XSmartRawDataUsed_POWER_FAIL_PROTECTION_FLUSH_DUE_TO_NO_FREE_CHUNKS_set)
    __swig_setmethods__["POWER_FAIL_PROTECTION_FLUSH_DUE_TO_LOW_FREE_BLOCKS"] = _nvmectl.S1XSmartRawDataUsed_POWER_FAIL_PROTECTION_FLUSH_DUE_TO_LOW_FREE_BLOCKS_set
    __swig_getmethods__["POWER_FAIL_PROTECTION_FLUSH_DUE_TO_LOW_FREE_BLOCKS"] = _nvmectl.S1XSmartRawDataUsed_POWER_FAIL_PROTECTION_FLUSH_DUE_TO_LOW_FREE_BLOCKS_get
    if _newclass:POWER_FAIL_PROTECTION_FLUSH_DUE_TO_LOW_FREE_BLOCKS = _swig_property(_nvmectl.S1XSmartRawDataUsed_POWER_FAIL_PROTECTION_FLUSH_DUE_TO_LOW_FREE_BLOCKS_get, _nvmectl.S1XSmartRawDataUsed_POWER_FAIL_PROTECTION_FLUSH_DUE_TO_LOW_FREE_BLOCKS_set)
    __swig_setmethods__["NEW_THRESHOLD_UPDATE"] = _nvmectl.S1XSmartRawDataUsed_NEW_THRESHOLD_UPDATE_set
    __swig_getmethods__["NEW_THRESHOLD_UPDATE"] = _nvmectl.S1XSmartRawDataUsed_NEW_THRESHOLD_UPDATE_get
    if _newclass:NEW_THRESHOLD_UPDATE = _swig_property(_nvmectl.S1XSmartRawDataUsed_NEW_THRESHOLD_UPDATE_get, _nvmectl.S1XSmartRawDataUsed_NEW_THRESHOLD_UPDATE_set)
    __swig_setmethods__["POWER_ON_SECS"] = _nvmectl.S1XSmartRawDataUsed_POWER_ON_SECS_set
    __swig_getmethods__["POWER_ON_SECS"] = _nvmectl.S1XSmartRawDataUsed_POWER_ON_SECS_get
    if _newclass:POWER_ON_SECS = _swig_property(_nvmectl.S1XSmartRawDataUsed_POWER_ON_SECS_get, _nvmectl.S1XSmartRawDataUsed_POWER_ON_SECS_set)
    __swig_setmethods__["POWER_ON_SECS_BIAS"] = _nvmectl.S1XSmartRawDataUsed_POWER_ON_SECS_BIAS_set
    __swig_getmethods__["POWER_ON_SECS_BIAS"] = _nvmectl.S1XSmartRawDataUsed_POWER_ON_SECS_BIAS_get
    if _newclass:POWER_ON_SECS_BIAS = _swig_property(_nvmectl.S1XSmartRawDataUsed_POWER_ON_SECS_BIAS_get, _nvmectl.S1XSmartRawDataUsed_POWER_ON_SECS_BIAS_set)
    __swig_setmethods__["POWER_CYCLES_BIAS"] = _nvmectl.S1XSmartRawDataUsed_POWER_CYCLES_BIAS_set
    __swig_getmethods__["POWER_CYCLES_BIAS"] = _nvmectl.S1XSmartRawDataUsed_POWER_CYCLES_BIAS_get
    if _newclass:POWER_CYCLES_BIAS = _swig_property(_nvmectl.S1XSmartRawDataUsed_POWER_CYCLES_BIAS_get, _nvmectl.S1XSmartRawDataUsed_POWER_CYCLES_BIAS_set)
    __swig_setmethods__["PERCENTAGE_USED_BIAS"] = _nvmectl.S1XSmartRawDataUsed_PERCENTAGE_USED_BIAS_set
    __swig_getmethods__["PERCENTAGE_USED_BIAS"] = _nvmectl.S1XSmartRawDataUsed_PERCENTAGE_USED_BIAS_get
    if _newclass:PERCENTAGE_USED_BIAS = _swig_property(_nvmectl.S1XSmartRawDataUsed_PERCENTAGE_USED_BIAS_get, _nvmectl.S1XSmartRawDataUsed_PERCENTAGE_USED_BIAS_set)
    __swig_setmethods__["MEDIA_ERRORS_BIAS"] = _nvmectl.S1XSmartRawDataUsed_MEDIA_ERRORS_BIAS_set
    __swig_getmethods__["MEDIA_ERRORS_BIAS"] = _nvmectl.S1XSmartRawDataUsed_MEDIA_ERRORS_BIAS_get
    if _newclass:MEDIA_ERRORS_BIAS = _swig_property(_nvmectl.S1XSmartRawDataUsed_MEDIA_ERRORS_BIAS_get, _nvmectl.S1XSmartRawDataUsed_MEDIA_ERRORS_BIAS_set)
    __swig_setmethods__["GROWN_BAD_BLOCKS_BIAS"] = _nvmectl.S1XSmartRawDataUsed_GROWN_BAD_BLOCKS_BIAS_set
    __swig_getmethods__["GROWN_BAD_BLOCKS_BIAS"] = _nvmectl.S1XSmartRawDataUsed_GROWN_BAD_BLOCKS_BIAS_get
    if _newclass:GROWN_BAD_BLOCKS_BIAS = _swig_property(_nvmectl.S1XSmartRawDataUsed_GROWN_BAD_BLOCKS_BIAS_get, _nvmectl.S1XSmartRawDataUsed_GROWN_BAD_BLOCKS_BIAS_set)
    def __init__(self): 
        this = _nvmectl.new_S1XSmartRawDataUsed()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_S1XSmartRawDataUsed
    __del__ = lambda self : None;
S1XSmartRawDataUsed_swigregister = _nvmectl.S1XSmartRawDataUsed_swigregister
S1XSmartRawDataUsed_swigregister(S1XSmartRawDataUsed)

class S1XBlockStatisticsPerWay(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S1XBlockStatisticsPerWay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S1XBlockStatisticsPerWay, name)
    __repr__ = _swig_repr
    __swig_setmethods__["MAX_END"] = _nvmectl.S1XBlockStatisticsPerWay_MAX_END_set
    __swig_getmethods__["MAX_END"] = _nvmectl.S1XBlockStatisticsPerWay_MAX_END_get
    if _newclass:MAX_END = _swig_property(_nvmectl.S1XBlockStatisticsPerWay_MAX_END_get, _nvmectl.S1XBlockStatisticsPerWay_MAX_END_set)
    __swig_setmethods__["MIN_END"] = _nvmectl.S1XBlockStatisticsPerWay_MIN_END_set
    __swig_getmethods__["MIN_END"] = _nvmectl.S1XBlockStatisticsPerWay_MIN_END_get
    if _newclass:MIN_END = _swig_property(_nvmectl.S1XBlockStatisticsPerWay_MIN_END_get, _nvmectl.S1XBlockStatisticsPerWay_MIN_END_set)
    __swig_setmethods__["AVG_END"] = _nvmectl.S1XBlockStatisticsPerWay_AVG_END_set
    __swig_getmethods__["AVG_END"] = _nvmectl.S1XBlockStatisticsPerWay_AVG_END_get
    if _newclass:AVG_END = _swig_property(_nvmectl.S1XBlockStatisticsPerWay_AVG_END_get, _nvmectl.S1XBlockStatisticsPerWay_AVG_END_set)
    __swig_setmethods__["NUM_OF_GOOD_BLOCKS"] = _nvmectl.S1XBlockStatisticsPerWay_NUM_OF_GOOD_BLOCKS_set
    __swig_getmethods__["NUM_OF_GOOD_BLOCKS"] = _nvmectl.S1XBlockStatisticsPerWay_NUM_OF_GOOD_BLOCKS_get
    if _newclass:NUM_OF_GOOD_BLOCKS = _swig_property(_nvmectl.S1XBlockStatisticsPerWay_NUM_OF_GOOD_BLOCKS_get, _nvmectl.S1XBlockStatisticsPerWay_NUM_OF_GOOD_BLOCKS_set)
    __swig_setmethods__["SUM_END"] = _nvmectl.S1XBlockStatisticsPerWay_SUM_END_set
    __swig_getmethods__["SUM_END"] = _nvmectl.S1XBlockStatisticsPerWay_SUM_END_get
    if _newclass:SUM_END = _swig_property(_nvmectl.S1XBlockStatisticsPerWay_SUM_END_get, _nvmectl.S1XBlockStatisticsPerWay_SUM_END_set)
    __swig_setmethods__["FACTORY_BAD"] = _nvmectl.S1XBlockStatisticsPerWay_FACTORY_BAD_set
    __swig_getmethods__["FACTORY_BAD"] = _nvmectl.S1XBlockStatisticsPerWay_FACTORY_BAD_get
    if _newclass:FACTORY_BAD = _swig_property(_nvmectl.S1XBlockStatisticsPerWay_FACTORY_BAD_get, _nvmectl.S1XBlockStatisticsPerWay_FACTORY_BAD_set)
    __swig_setmethods__["TOTAL_HOLES_IN_WAY"] = _nvmectl.S1XBlockStatisticsPerWay_TOTAL_HOLES_IN_WAY_set
    __swig_getmethods__["TOTAL_HOLES_IN_WAY"] = _nvmectl.S1XBlockStatisticsPerWay_TOTAL_HOLES_IN_WAY_get
    if _newclass:TOTAL_HOLES_IN_WAY = _swig_property(_nvmectl.S1XBlockStatisticsPerWay_TOTAL_HOLES_IN_WAY_get, _nvmectl.S1XBlockStatisticsPerWay_TOTAL_HOLES_IN_WAY_set)
    __swig_setmethods__["ERASE_FAILURE_COUNT"] = _nvmectl.S1XBlockStatisticsPerWay_ERASE_FAILURE_COUNT_set
    __swig_getmethods__["ERASE_FAILURE_COUNT"] = _nvmectl.S1XBlockStatisticsPerWay_ERASE_FAILURE_COUNT_get
    if _newclass:ERASE_FAILURE_COUNT = _swig_property(_nvmectl.S1XBlockStatisticsPerWay_ERASE_FAILURE_COUNT_get, _nvmectl.S1XBlockStatisticsPerWay_ERASE_FAILURE_COUNT_set)
    __swig_setmethods__["PROGRAM_FAILURE_COUNT"] = _nvmectl.S1XBlockStatisticsPerWay_PROGRAM_FAILURE_COUNT_set
    __swig_getmethods__["PROGRAM_FAILURE_COUNT"] = _nvmectl.S1XBlockStatisticsPerWay_PROGRAM_FAILURE_COUNT_get
    if _newclass:PROGRAM_FAILURE_COUNT = _swig_property(_nvmectl.S1XBlockStatisticsPerWay_PROGRAM_FAILURE_COUNT_get, _nvmectl.S1XBlockStatisticsPerWay_PROGRAM_FAILURE_COUNT_set)
    __swig_setmethods__["GROWN_BAD"] = _nvmectl.S1XBlockStatisticsPerWay_GROWN_BAD_set
    __swig_getmethods__["GROWN_BAD"] = _nvmectl.S1XBlockStatisticsPerWay_GROWN_BAD_get
    if _newclass:GROWN_BAD = _swig_property(_nvmectl.S1XBlockStatisticsPerWay_GROWN_BAD_get, _nvmectl.S1XBlockStatisticsPerWay_GROWN_BAD_set)
    __swig_setmethods__["FACTORY_BAD_BLOCKS_ARR"] = _nvmectl.S1XBlockStatisticsPerWay_FACTORY_BAD_BLOCKS_ARR_set
    __swig_getmethods__["FACTORY_BAD_BLOCKS_ARR"] = _nvmectl.S1XBlockStatisticsPerWay_FACTORY_BAD_BLOCKS_ARR_get
    if _newclass:FACTORY_BAD_BLOCKS_ARR = _swig_property(_nvmectl.S1XBlockStatisticsPerWay_FACTORY_BAD_BLOCKS_ARR_get, _nvmectl.S1XBlockStatisticsPerWay_FACTORY_BAD_BLOCKS_ARR_set)
    __swig_setmethods__["GROWN_BAD_BLOCKS_ARR"] = _nvmectl.S1XBlockStatisticsPerWay_GROWN_BAD_BLOCKS_ARR_set
    __swig_getmethods__["GROWN_BAD_BLOCKS_ARR"] = _nvmectl.S1XBlockStatisticsPerWay_GROWN_BAD_BLOCKS_ARR_get
    if _newclass:GROWN_BAD_BLOCKS_ARR = _swig_property(_nvmectl.S1XBlockStatisticsPerWay_GROWN_BAD_BLOCKS_ARR_get, _nvmectl.S1XBlockStatisticsPerWay_GROWN_BAD_BLOCKS_ARR_set)
    def __init__(self): 
        this = _nvmectl.new_S1XBlockStatisticsPerWay()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_S1XBlockStatisticsPerWay
    __del__ = lambda self : None;
S1XBlockStatisticsPerWay_swigregister = _nvmectl.S1XBlockStatisticsPerWay_swigregister
S1XBlockStatisticsPerWay_swigregister(S1XBlockStatisticsPerWay)

class S1XAssertHistory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S1XAssertHistory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S1XAssertHistory, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ASSERT_ID"] = _nvmectl.S1XAssertHistory_ASSERT_ID_set
    __swig_getmethods__["ASSERT_ID"] = _nvmectl.S1XAssertHistory_ASSERT_ID_get
    if _newclass:ASSERT_ID = _swig_property(_nvmectl.S1XAssertHistory_ASSERT_ID_get, _nvmectl.S1XAssertHistory_ASSERT_ID_set)
    __swig_setmethods__["RESERVED"] = _nvmectl.S1XAssertHistory_RESERVED_set
    __swig_getmethods__["RESERVED"] = _nvmectl.S1XAssertHistory_RESERVED_get
    if _newclass:RESERVED = _swig_property(_nvmectl.S1XAssertHistory_RESERVED_get, _nvmectl.S1XAssertHistory_RESERVED_set)
    __swig_setmethods__["ASSERT_ARG1"] = _nvmectl.S1XAssertHistory_ASSERT_ARG1_set
    __swig_getmethods__["ASSERT_ARG1"] = _nvmectl.S1XAssertHistory_ASSERT_ARG1_get
    if _newclass:ASSERT_ARG1 = _swig_property(_nvmectl.S1XAssertHistory_ASSERT_ARG1_get, _nvmectl.S1XAssertHistory_ASSERT_ARG1_set)
    __swig_setmethods__["ASSERT_ARG2"] = _nvmectl.S1XAssertHistory_ASSERT_ARG2_set
    __swig_getmethods__["ASSERT_ARG2"] = _nvmectl.S1XAssertHistory_ASSERT_ARG2_get
    if _newclass:ASSERT_ARG2 = _swig_property(_nvmectl.S1XAssertHistory_ASSERT_ARG2_get, _nvmectl.S1XAssertHistory_ASSERT_ARG2_set)
    __swig_setmethods__["ASSERT_ARG3"] = _nvmectl.S1XAssertHistory_ASSERT_ARG3_set
    __swig_getmethods__["ASSERT_ARG3"] = _nvmectl.S1XAssertHistory_ASSERT_ARG3_get
    if _newclass:ASSERT_ARG3 = _swig_property(_nvmectl.S1XAssertHistory_ASSERT_ARG3_get, _nvmectl.S1XAssertHistory_ASSERT_ARG3_set)
    def __init__(self): 
        this = _nvmectl.new_S1XAssertHistory()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_S1XAssertHistory
    __del__ = lambda self : None;
S1XAssertHistory_swigregister = _nvmectl.S1XAssertHistory_swigregister
S1XAssertHistory_swigregister(S1XAssertHistory)

class S1X2PlaneFTLCounters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S1X2PlaneFTLCounters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S1X2PlaneFTLCounters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["STRUCT_VERSION"] = _nvmectl.S1X2PlaneFTLCounters_STRUCT_VERSION_set
    __swig_getmethods__["STRUCT_VERSION"] = _nvmectl.S1X2PlaneFTLCounters_STRUCT_VERSION_get
    if _newclass:STRUCT_VERSION = _swig_property(_nvmectl.S1X2PlaneFTLCounters_STRUCT_VERSION_get, _nvmectl.S1X2PlaneFTLCounters_STRUCT_VERSION_set)
    __swig_setmethods__["RESERVED"] = _nvmectl.S1X2PlaneFTLCounters_RESERVED_set
    __swig_getmethods__["RESERVED"] = _nvmectl.S1X2PlaneFTLCounters_RESERVED_get
    if _newclass:RESERVED = _swig_property(_nvmectl.S1X2PlaneFTLCounters_RESERVED_get, _nvmectl.S1X2PlaneFTLCounters_RESERVED_set)
    __swig_setmethods__["DRIVE_CONFIG"] = _nvmectl.S1X2PlaneFTLCounters_DRIVE_CONFIG_set
    __swig_getmethods__["DRIVE_CONFIG"] = _nvmectl.S1X2PlaneFTLCounters_DRIVE_CONFIG_get
    if _newclass:DRIVE_CONFIG = _swig_property(_nvmectl.S1X2PlaneFTLCounters_DRIVE_CONFIG_get, _nvmectl.S1X2PlaneFTLCounters_DRIVE_CONFIG_set)
    __swig_setmethods__["SMART_COUNTERS"] = _nvmectl.S1X2PlaneFTLCounters_SMART_COUNTERS_set
    __swig_getmethods__["SMART_COUNTERS"] = _nvmectl.S1X2PlaneFTLCounters_SMART_COUNTERS_get
    if _newclass:SMART_COUNTERS = _swig_property(_nvmectl.S1X2PlaneFTLCounters_SMART_COUNTERS_get, _nvmectl.S1X2PlaneFTLCounters_SMART_COUNTERS_set)
    __swig_setmethods__["BLOCK_STATISTICS"] = _nvmectl.S1X2PlaneFTLCounters_BLOCK_STATISTICS_set
    __swig_getmethods__["BLOCK_STATISTICS"] = _nvmectl.S1X2PlaneFTLCounters_BLOCK_STATISTICS_get
    if _newclass:BLOCK_STATISTICS = _swig_property(_nvmectl.S1X2PlaneFTLCounters_BLOCK_STATISTICS_get, _nvmectl.S1X2PlaneFTLCounters_BLOCK_STATISTICS_set)
    __swig_setmethods__["HOLES_DISTRIBUTION"] = _nvmectl.S1X2PlaneFTLCounters_HOLES_DISTRIBUTION_set
    __swig_getmethods__["HOLES_DISTRIBUTION"] = _nvmectl.S1X2PlaneFTLCounters_HOLES_DISTRIBUTION_get
    if _newclass:HOLES_DISTRIBUTION = _swig_property(_nvmectl.S1X2PlaneFTLCounters_HOLES_DISTRIBUTION_get, _nvmectl.S1X2PlaneFTLCounters_HOLES_DISTRIBUTION_set)
    __swig_setmethods__["ENDURE_LEVEL_HIST"] = _nvmectl.S1X2PlaneFTLCounters_ENDURE_LEVEL_HIST_set
    __swig_getmethods__["ENDURE_LEVEL_HIST"] = _nvmectl.S1X2PlaneFTLCounters_ENDURE_LEVEL_HIST_get
    if _newclass:ENDURE_LEVEL_HIST = _swig_property(_nvmectl.S1X2PlaneFTLCounters_ENDURE_LEVEL_HIST_get, _nvmectl.S1X2PlaneFTLCounters_ENDURE_LEVEL_HIST_set)
    __swig_setmethods__["PERCENTAGE_OF_OCCUPIED_USER_V2_PENTRIES"] = _nvmectl.S1X2PlaneFTLCounters_PERCENTAGE_OF_OCCUPIED_USER_V2_PENTRIES_set
    __swig_getmethods__["PERCENTAGE_OF_OCCUPIED_USER_V2_PENTRIES"] = _nvmectl.S1X2PlaneFTLCounters_PERCENTAGE_OF_OCCUPIED_USER_V2_PENTRIES_get
    if _newclass:PERCENTAGE_OF_OCCUPIED_USER_V2_PENTRIES = _swig_property(_nvmectl.S1X2PlaneFTLCounters_PERCENTAGE_OF_OCCUPIED_USER_V2_PENTRIES_get, _nvmectl.S1X2PlaneFTLCounters_PERCENTAGE_OF_OCCUPIED_USER_V2_PENTRIES_set)
    __swig_setmethods__["ASSERT_HISTORY"] = _nvmectl.S1X2PlaneFTLCounters_ASSERT_HISTORY_set
    __swig_getmethods__["ASSERT_HISTORY"] = _nvmectl.S1X2PlaneFTLCounters_ASSERT_HISTORY_get
    if _newclass:ASSERT_HISTORY = _swig_property(_nvmectl.S1X2PlaneFTLCounters_ASSERT_HISTORY_get, _nvmectl.S1X2PlaneFTLCounters_ASSERT_HISTORY_set)
    def __init__(self): 
        this = _nvmectl.new_S1X2PlaneFTLCounters()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_S1X2PlaneFTLCounters
    __del__ = lambda self : None;
S1X2PlaneFTLCounters_swigregister = _nvmectl.S1X2PlaneFTLCounters_swigregister
S1X2PlaneFTLCounters_swigregister(S1X2PlaneFTLCounters)

class S1X4PlaneFTLCounters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S1X4PlaneFTLCounters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S1X4PlaneFTLCounters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["STRUCT_VERSION"] = _nvmectl.S1X4PlaneFTLCounters_STRUCT_VERSION_set
    __swig_getmethods__["STRUCT_VERSION"] = _nvmectl.S1X4PlaneFTLCounters_STRUCT_VERSION_get
    if _newclass:STRUCT_VERSION = _swig_property(_nvmectl.S1X4PlaneFTLCounters_STRUCT_VERSION_get, _nvmectl.S1X4PlaneFTLCounters_STRUCT_VERSION_set)
    __swig_setmethods__["RESERVED"] = _nvmectl.S1X4PlaneFTLCounters_RESERVED_set
    __swig_getmethods__["RESERVED"] = _nvmectl.S1X4PlaneFTLCounters_RESERVED_get
    if _newclass:RESERVED = _swig_property(_nvmectl.S1X4PlaneFTLCounters_RESERVED_get, _nvmectl.S1X4PlaneFTLCounters_RESERVED_set)
    __swig_setmethods__["DRIVE_CONFIG"] = _nvmectl.S1X4PlaneFTLCounters_DRIVE_CONFIG_set
    __swig_getmethods__["DRIVE_CONFIG"] = _nvmectl.S1X4PlaneFTLCounters_DRIVE_CONFIG_get
    if _newclass:DRIVE_CONFIG = _swig_property(_nvmectl.S1X4PlaneFTLCounters_DRIVE_CONFIG_get, _nvmectl.S1X4PlaneFTLCounters_DRIVE_CONFIG_set)
    __swig_setmethods__["SMART_COUNTERS"] = _nvmectl.S1X4PlaneFTLCounters_SMART_COUNTERS_set
    __swig_getmethods__["SMART_COUNTERS"] = _nvmectl.S1X4PlaneFTLCounters_SMART_COUNTERS_get
    if _newclass:SMART_COUNTERS = _swig_property(_nvmectl.S1X4PlaneFTLCounters_SMART_COUNTERS_get, _nvmectl.S1X4PlaneFTLCounters_SMART_COUNTERS_set)
    __swig_setmethods__["BLOCK_STATISTICS"] = _nvmectl.S1X4PlaneFTLCounters_BLOCK_STATISTICS_set
    __swig_getmethods__["BLOCK_STATISTICS"] = _nvmectl.S1X4PlaneFTLCounters_BLOCK_STATISTICS_get
    if _newclass:BLOCK_STATISTICS = _swig_property(_nvmectl.S1X4PlaneFTLCounters_BLOCK_STATISTICS_get, _nvmectl.S1X4PlaneFTLCounters_BLOCK_STATISTICS_set)
    __swig_setmethods__["HOLES_DISTRIBUTION"] = _nvmectl.S1X4PlaneFTLCounters_HOLES_DISTRIBUTION_set
    __swig_getmethods__["HOLES_DISTRIBUTION"] = _nvmectl.S1X4PlaneFTLCounters_HOLES_DISTRIBUTION_get
    if _newclass:HOLES_DISTRIBUTION = _swig_property(_nvmectl.S1X4PlaneFTLCounters_HOLES_DISTRIBUTION_get, _nvmectl.S1X4PlaneFTLCounters_HOLES_DISTRIBUTION_set)
    __swig_setmethods__["ENDURE_LEVEL_HIST"] = _nvmectl.S1X4PlaneFTLCounters_ENDURE_LEVEL_HIST_set
    __swig_getmethods__["ENDURE_LEVEL_HIST"] = _nvmectl.S1X4PlaneFTLCounters_ENDURE_LEVEL_HIST_get
    if _newclass:ENDURE_LEVEL_HIST = _swig_property(_nvmectl.S1X4PlaneFTLCounters_ENDURE_LEVEL_HIST_get, _nvmectl.S1X4PlaneFTLCounters_ENDURE_LEVEL_HIST_set)
    __swig_setmethods__["PERCENTAGE_OF_OCCUPIED_USER_V2_PENTRIES"] = _nvmectl.S1X4PlaneFTLCounters_PERCENTAGE_OF_OCCUPIED_USER_V2_PENTRIES_set
    __swig_getmethods__["PERCENTAGE_OF_OCCUPIED_USER_V2_PENTRIES"] = _nvmectl.S1X4PlaneFTLCounters_PERCENTAGE_OF_OCCUPIED_USER_V2_PENTRIES_get
    if _newclass:PERCENTAGE_OF_OCCUPIED_USER_V2_PENTRIES = _swig_property(_nvmectl.S1X4PlaneFTLCounters_PERCENTAGE_OF_OCCUPIED_USER_V2_PENTRIES_get, _nvmectl.S1X4PlaneFTLCounters_PERCENTAGE_OF_OCCUPIED_USER_V2_PENTRIES_set)
    __swig_setmethods__["ASSERT_HISTORY"] = _nvmectl.S1X4PlaneFTLCounters_ASSERT_HISTORY_set
    __swig_getmethods__["ASSERT_HISTORY"] = _nvmectl.S1X4PlaneFTLCounters_ASSERT_HISTORY_get
    if _newclass:ASSERT_HISTORY = _swig_property(_nvmectl.S1X4PlaneFTLCounters_ASSERT_HISTORY_get, _nvmectl.S1X4PlaneFTLCounters_ASSERT_HISTORY_set)
    def __init__(self): 
        this = _nvmectl.new_S1X4PlaneFTLCounters()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_S1X4PlaneFTLCounters
    __del__ = lambda self : None;
S1X4PlaneFTLCounters_swigregister = _nvmectl.S1X4PlaneFTLCounters_swigregister
S1X4PlaneFTLCounters_swigregister(S1X4PlaneFTLCounters)

class S1X2PlaneFieldCounters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S1X2PlaneFieldCounters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S1X2PlaneFieldCounters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ALGO_COUNTERS"] = _nvmectl.S1X2PlaneFieldCounters_ALGO_COUNTERS_set
    __swig_getmethods__["ALGO_COUNTERS"] = _nvmectl.S1X2PlaneFieldCounters_ALGO_COUNTERS_get
    if _newclass:ALGO_COUNTERS = _swig_property(_nvmectl.S1X2PlaneFieldCounters_ALGO_COUNTERS_get, _nvmectl.S1X2PlaneFieldCounters_ALGO_COUNTERS_set)
    __swig_setmethods__["RESERVED"] = _nvmectl.S1X2PlaneFieldCounters_RESERVED_set
    __swig_getmethods__["RESERVED"] = _nvmectl.S1X2PlaneFieldCounters_RESERVED_get
    if _newclass:RESERVED = _swig_property(_nvmectl.S1X2PlaneFieldCounters_RESERVED_get, _nvmectl.S1X2PlaneFieldCounters_RESERVED_set)
    __swig_setmethods__["FTL_COUNTERS"] = _nvmectl.S1X2PlaneFieldCounters_FTL_COUNTERS_set
    __swig_getmethods__["FTL_COUNTERS"] = _nvmectl.S1X2PlaneFieldCounters_FTL_COUNTERS_get
    if _newclass:FTL_COUNTERS = _swig_property(_nvmectl.S1X2PlaneFieldCounters_FTL_COUNTERS_get, _nvmectl.S1X2PlaneFieldCounters_FTL_COUNTERS_set)
    __swig_setmethods__["RESERVED2"] = _nvmectl.S1X2PlaneFieldCounters_RESERVED2_set
    __swig_getmethods__["RESERVED2"] = _nvmectl.S1X2PlaneFieldCounters_RESERVED2_get
    if _newclass:RESERVED2 = _swig_property(_nvmectl.S1X2PlaneFieldCounters_RESERVED2_get, _nvmectl.S1X2PlaneFieldCounters_RESERVED2_set)
    def __init__(self): 
        this = _nvmectl.new_S1X2PlaneFieldCounters()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_S1X2PlaneFieldCounters
    __del__ = lambda self : None;
S1X2PlaneFieldCounters_swigregister = _nvmectl.S1X2PlaneFieldCounters_swigregister
S1X2PlaneFieldCounters_swigregister(S1X2PlaneFieldCounters)

class S1X4PlaneFieldCounters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S1X4PlaneFieldCounters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S1X4PlaneFieldCounters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ALGO_COUNTERS"] = _nvmectl.S1X4PlaneFieldCounters_ALGO_COUNTERS_set
    __swig_getmethods__["ALGO_COUNTERS"] = _nvmectl.S1X4PlaneFieldCounters_ALGO_COUNTERS_get
    if _newclass:ALGO_COUNTERS = _swig_property(_nvmectl.S1X4PlaneFieldCounters_ALGO_COUNTERS_get, _nvmectl.S1X4PlaneFieldCounters_ALGO_COUNTERS_set)
    __swig_setmethods__["RESERVED"] = _nvmectl.S1X4PlaneFieldCounters_RESERVED_set
    __swig_getmethods__["RESERVED"] = _nvmectl.S1X4PlaneFieldCounters_RESERVED_get
    if _newclass:RESERVED = _swig_property(_nvmectl.S1X4PlaneFieldCounters_RESERVED_get, _nvmectl.S1X4PlaneFieldCounters_RESERVED_set)
    __swig_setmethods__["FTL_COUNTERS"] = _nvmectl.S1X4PlaneFieldCounters_FTL_COUNTERS_set
    __swig_getmethods__["FTL_COUNTERS"] = _nvmectl.S1X4PlaneFieldCounters_FTL_COUNTERS_get
    if _newclass:FTL_COUNTERS = _swig_property(_nvmectl.S1X4PlaneFieldCounters_FTL_COUNTERS_get, _nvmectl.S1X4PlaneFieldCounters_FTL_COUNTERS_set)
    __swig_setmethods__["RESERVED2"] = _nvmectl.S1X4PlaneFieldCounters_RESERVED2_set
    __swig_getmethods__["RESERVED2"] = _nvmectl.S1X4PlaneFieldCounters_RESERVED2_get
    if _newclass:RESERVED2 = _swig_property(_nvmectl.S1X4PlaneFieldCounters_RESERVED2_get, _nvmectl.S1X4PlaneFieldCounters_RESERVED2_set)
    def __init__(self): 
        this = _nvmectl.new_S1X4PlaneFieldCounters()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_S1X4PlaneFieldCounters
    __del__ = lambda self : None;
S1X4PlaneFieldCounters_swigregister = _nvmectl.S1X4PlaneFieldCounters_swigregister
S1X4PlaneFieldCounters_swigregister(S1X4PlaneFieldCounters)

class AppleNVMeAESExtension(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppleNVMeAESExtension, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AppleNVMeAESExtension, name)
    __repr__ = _swig_repr
    __swig_setmethods__["SECURITY_POLICY"] = _nvmectl.AppleNVMeAESExtension_SECURITY_POLICY_set
    __swig_getmethods__["SECURITY_POLICY"] = _nvmectl.AppleNVMeAESExtension_SECURITY_POLICY_get
    if _newclass:SECURITY_POLICY = _swig_property(_nvmectl.AppleNVMeAESExtension_SECURITY_POLICY_get, _nvmectl.AppleNVMeAESExtension_SECURITY_POLICY_set)
    __swig_setmethods__["RESERVED2"] = _nvmectl.AppleNVMeAESExtension_RESERVED2_set
    __swig_getmethods__["RESERVED2"] = _nvmectl.AppleNVMeAESExtension_RESERVED2_get
    if _newclass:RESERVED2 = _swig_property(_nvmectl.AppleNVMeAESExtension_RESERVED2_get, _nvmectl.AppleNVMeAESExtension_RESERVED2_set)
    __swig_setmethods__["CMAC"] = _nvmectl.AppleNVMeAESExtension_CMAC_set
    __swig_getmethods__["CMAC"] = _nvmectl.AppleNVMeAESExtension_CMAC_get
    if _newclass:CMAC = _swig_property(_nvmectl.AppleNVMeAESExtension_CMAC_get, _nvmectl.AppleNVMeAESExtension_CMAC_set)
    __swig_setmethods__["AES_KEY"] = _nvmectl.AppleNVMeAESExtension_AES_KEY_set
    __swig_getmethods__["AES_KEY"] = _nvmectl.AppleNVMeAESExtension_AES_KEY_get
    if _newclass:AES_KEY = _swig_property(_nvmectl.AppleNVMeAESExtension_AES_KEY_get, _nvmectl.AppleNVMeAESExtension_AES_KEY_set)
    def __init__(self): 
        this = _nvmectl.new_AppleNVMeAESExtension()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_AppleNVMeAESExtension
    __del__ = lambda self : None;
AppleNVMeAESExtension_swigregister = _nvmectl.AppleNVMeAESExtension_swigregister
AppleNVMeAESExtension_swigregister(AppleNVMeAESExtension)

kNVMe_ANS2_Device_Active_Magic = _nvmectl.kNVMe_ANS2_Device_Active_Magic
kNVMe_ANS2_IOSQ_LSB = _nvmectl.kNVMe_ANS2_IOSQ_LSB
kNVMe_ANS2_IOSQ_MSB = _nvmectl.kNVMe_ANS2_IOSQ_MSB
kNVMe_ANS2_IOCQ_LSB = _nvmectl.kNVMe_ANS2_IOCQ_LSB
kNVMe_ANS2_IOCQ_MSB = _nvmectl.kNVMe_ANS2_IOCQ_MSB
kNVMe_ANS2_IOQA = _nvmectl.kNVMe_ANS2_IOQA
kNVMe_ANS2_Device_Active = _nvmectl.kNVMe_ANS2_Device_Active
kNVMe_ANS2_MODESEL_Offset = _nvmectl.kNVMe_ANS2_MODESEL_Offset
kNVMe_ANS2_Command_ID_Base = _nvmectl.kNVMe_ANS2_Command_ID_Base
kNVMe_ANS2_Force_Assert_offset = _nvmectl.kNVMe_ANS2_Force_Assert_offset
kNVMe_ANS2_Current_Assert_Offset = _nvmectl.kNVMe_ANS2_Current_Assert_Offset
kNVMe_ANS2_Current_Assert_Arg1 = _nvmectl.kNVMe_ANS2_Current_Assert_Arg1
kNVMe_ANS2_Current_Assert_Arg2 = _nvmectl.kNVMe_ANS2_Current_Assert_Arg2
kNVMe_ANS2_Current_Assert_Arg3 = _nvmectl.kNVMe_ANS2_Current_Assert_Arg3
kNVMeAESKeyPolicyOffset = _nvmectl.kNVMeAESKeyPolicyOffset
kNVMeAESKeyPolicyLength = _nvmectl.kNVMeAESKeyPolicyLength
kNVMeAESCMACOffset = _nvmectl.kNVMeAESCMACOffset
kNVMeAESCMACLength = _nvmectl.kNVMeAESCMACLength
kNVMeAESKeyOffset = _nvmectl.kNVMeAESKeyOffset
kNVMeAESKeyLength = _nvmectl.kNVMeAESKeyLength
kNVMeAESKeyWithPolicyLength = _nvmectl.kNVMeAESKeyWithPolicyLength
kNVMe_SecurityPolicy_WrappingKeySel_Offset = _nvmectl.kNVMe_SecurityPolicy_WrappingKeySel_Offset
kNVMe_SecurityPolicy_WrappingKeySel_Len = _nvmectl.kNVMe_SecurityPolicy_WrappingKeySel_Len
kNVMe_SecurityPolicy_WrappingKeySel_Mask = _nvmectl.kNVMe_SecurityPolicy_WrappingKeySel_Mask
kNVMe_SecurityPolicy_KeyAgent_Offset = _nvmectl.kNVMe_SecurityPolicy_KeyAgent_Offset
kNVMe_SecurityPolicy_KeyAgent_Len = _nvmectl.kNVMe_SecurityPolicy_KeyAgent_Len
kNVMe_SecurityPolicy_KeyAgent_Mask = _nvmectl.kNVMe_SecurityPolicy_KeyAgent_Mask
kNVMe_SecurityPolicy_KeyDirection_Offset = _nvmectl.kNVMe_SecurityPolicy_KeyDirection_Offset
kNVMe_SecurityPolicy_KeyDirection_Len = _nvmectl.kNVMe_SecurityPolicy_KeyDirection_Len
kNVMe_SecurityPolicy_KeyDirection_Mask = _nvmectl.kNVMe_SecurityPolicy_KeyDirection_Mask
kNVMe_SecurityPolicy_KeySize_Offset = _nvmectl.kNVMe_SecurityPolicy_KeySize_Offset
kNVMe_SecurityPolicy_KeySize_Len = _nvmectl.kNVMe_SecurityPolicy_KeySize_Len
kNVMe_SecurityPolicy_KeySize_Mask = _nvmectl.kNVMe_SecurityPolicy_KeySize_Mask
kNVMe_KeyDirection_None = _nvmectl.kNVMe_KeyDirection_None
kNVMe_KeyDirection_Write = _nvmectl.kNVMe_KeyDirection_Write
kNVMe_KeyDirection_Read = _nvmectl.kNVMe_KeyDirection_Read
class charArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, charArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, charArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _nvmectl.new_charArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_charArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _nvmectl.charArray___getitem__(self, *args)
    def __setitem__(self, *args): return _nvmectl.charArray___setitem__(self, *args)
    def cast(self): return _nvmectl.charArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _nvmectl.charArray_frompointer
    if _newclass:frompointer = staticmethod(_nvmectl.charArray_frompointer)
charArray_swigregister = _nvmectl.charArray_swigregister
charArray_swigregister(charArray)

def charArray_frompointer(*args):
  return _nvmectl.charArray_frompointer(*args)
charArray_frompointer = _nvmectl.charArray_frompointer

class lbaFormatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lbaFormatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lbaFormatArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _nvmectl.new_lbaFormatArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_lbaFormatArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _nvmectl.lbaFormatArray___getitem__(self, *args)
    def __setitem__(self, *args): return _nvmectl.lbaFormatArray___setitem__(self, *args)
    def cast(self): return _nvmectl.lbaFormatArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _nvmectl.lbaFormatArray_frompointer
    if _newclass:frompointer = staticmethod(_nvmectl.lbaFormatArray_frompointer)
lbaFormatArray_swigregister = _nvmectl.lbaFormatArray_swigregister
lbaFormatArray_swigregister(lbaFormatArray)

def lbaFormatArray_frompointer(*args):
  return _nvmectl.lbaFormatArray_frompointer(*args)
lbaFormatArray_frompointer = _nvmectl.lbaFormatArray_frompointer

class ucharArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ucharArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ucharArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _nvmectl.new_ucharArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_ucharArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _nvmectl.ucharArray___getitem__(self, *args)
    def __setitem__(self, *args): return _nvmectl.ucharArray___setitem__(self, *args)
    def cast(self): return _nvmectl.ucharArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _nvmectl.ucharArray_frompointer
    if _newclass:frompointer = staticmethod(_nvmectl.ucharArray_frompointer)
ucharArray_swigregister = _nvmectl.ucharArray_swigregister
ucharArray_swigregister(ucharArray)

def ucharArray_frompointer(*args):
  return _nvmectl.ucharArray_frompointer(*args)
ucharArray_frompointer = _nvmectl.ucharArray_frompointer

class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _nvmectl.new_intArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_intArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _nvmectl.intArray___getitem__(self, *args)
    def __setitem__(self, *args): return _nvmectl.intArray___setitem__(self, *args)
    def cast(self): return _nvmectl.intArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _nvmectl.intArray_frompointer
    if _newclass:frompointer = staticmethod(_nvmectl.intArray_frompointer)
intArray_swigregister = _nvmectl.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(*args):
  return _nvmectl.intArray_frompointer(*args)
intArray_frompointer = _nvmectl.intArray_frompointer

class uint64Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uint64Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uint64Array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _nvmectl.new_uint64Array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_uint64Array
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _nvmectl.uint64Array___getitem__(self, *args)
    def __setitem__(self, *args): return _nvmectl.uint64Array___setitem__(self, *args)
    def cast(self): return _nvmectl.uint64Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _nvmectl.uint64Array_frompointer
    if _newclass:frompointer = staticmethod(_nvmectl.uint64Array_frompointer)
uint64Array_swigregister = _nvmectl.uint64Array_swigregister
uint64Array_swigregister(uint64Array)

def uint64Array_frompointer(*args):
  return _nvmectl.uint64Array_frompointer(*args)
uint64Array_frompointer = _nvmectl.uint64Array_frompointer

class DeviceArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _nvmectl.new_DeviceArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_DeviceArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _nvmectl.DeviceArray___getitem__(self, *args)
    def __setitem__(self, *args): return _nvmectl.DeviceArray___setitem__(self, *args)
    def cast(self): return _nvmectl.DeviceArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _nvmectl.DeviceArray_frompointer
    if _newclass:frompointer = staticmethod(_nvmectl.DeviceArray_frompointer)
DeviceArray_swigregister = _nvmectl.DeviceArray_swigregister
DeviceArray_swigregister(DeviceArray)

def DeviceArray_frompointer(*args):
  return _nvmectl.DeviceArray_frompointer(*args)
DeviceArray_frompointer = _nvmectl.DeviceArray_frompointer

class LBARangeArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LBARangeArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LBARangeArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _nvmectl.new_LBARangeArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nvmectl.delete_LBARangeArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _nvmectl.LBARangeArray___getitem__(self, *args)
    def __setitem__(self, *args): return _nvmectl.LBARangeArray___setitem__(self, *args)
    def cast(self): return _nvmectl.LBARangeArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _nvmectl.LBARangeArray_frompointer
    if _newclass:frompointer = staticmethod(_nvmectl.LBARangeArray_frompointer)
LBARangeArray_swigregister = _nvmectl.LBARangeArray_swigregister
LBARangeArray_swigregister(LBARangeArray)

def LBARangeArray_frompointer(*args):
  return _nvmectl.LBARangeArray_frompointer(*args)
LBARangeArray_frompointer = _nvmectl.LBARangeArray_frompointer



